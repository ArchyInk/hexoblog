{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/pln/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/pln/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/pln/source/css/code.scss","path":"css/code.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/animation.scss","path":"css/animation.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/m.min.css","path":"css/m.min.css","modified":0,"renderable":1},{"_id":"themes/pln/source/css/footer.scss","path":"css/footer.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/m.min.css.map","path":"css/m.min.css.map","modified":0,"renderable":1},{"_id":"themes/pln/source/css/main.scss","path":"css/main.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/navigator.scss","path":"css/navigator.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/pager.scss","path":"css/pager.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/posts.scss","path":"css/posts.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/toc.scss","path":"css/toc.scss","modified":0,"renderable":1},{"_id":"source/images/0721.jpg","path":"images/0721.jpg","modified":0,"renderable":0},{"_id":"source/images/0722_2.jpg","path":"images/0722_2.jpg","modified":0,"renderable":0},{"_id":"source/images/0722_1.jpg","path":"images/0722_1.jpg","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1626850246761},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"99f9af2ef438c65fa3943dd954d5217b8d43f2f3","modified":1626850311588},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"public/2021/07/21/hello-world/index.html","hash":"5cd524dbef99ee2faea412db268034b97616fc2c","modified":1626851346381},{"_id":"public/archives/index.html","hash":"7564c119c47ef5bc1b6a870823b2b1e6cd8a3cf6","modified":1626942645440},{"_id":"public/archives/2021/index.html","hash":"9d25ddac0f3d7815b947ff8cfb7c43e7dba62c25","modified":1626942645440},{"_id":"public/index.html","hash":"9ef6609beaa4cc1f865641ee9113dbff2d355764","modified":1626942645440},{"_id":"public/archives/2021/07/index.html","hash":"20ba8ea9fd47c032a10dd84646749f2ef535881e","modified":1626942645440},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1626850928830},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1626850928830},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1626850928830},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1626850928830},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1626850928830},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1626850928830},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1626850928830},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1626850928830},{"_id":"source/_posts/test-md.md","hash":"ea047322d9f8165f6238bdd4d978098a825438e7","modified":1626851098880},{"_id":"public/2021/07/21/test-md/index.html","hash":"a3831978c64402cb1bc63b05506bc084f22ab518","modified":1626851346381},{"_id":"source/_posts/0721.md","hash":"89df46599aa9a88009e9aa890dc291a231c7541c","modified":1626854277726},{"_id":"public/2021/07/21/0721/index.html","hash":"64831e0db9e28e4b18760f0ca1642f7b3683848b","modified":1626854982200},{"_id":"source/_posts/AntDesignVue源码学习（1）.md","hash":"51c00ddec8307459700ac58c018df47bf0ea3fab","modified":1626851241145},{"_id":"public/2021/07/21/AntDesignVue源码学习（1）/index.html","hash":"99606f7a43ab36353b98efdc09965f46cef4e8c9","modified":1626851247589},{"_id":"themes/pln/.all-contributorsrc","hash":"1f62791c168b72c30e7d5cc0d64df4f9807dc9cf","modified":1626851841373},{"_id":"themes/pln/.gitignore","hash":"b2bfa11a587b14a043ce5520249bbae2da638955","modified":1626851841373},{"_id":"themes/pln/_config.yml","hash":"2699dbe2c271dc8179de2124a683311c990885fc","modified":1626935097862},{"_id":"themes/pln/LICENSE","hash":"4d90003c868a47825f884e9cb5e1a98acb8c91ff","modified":1626851841373},{"_id":"themes/pln/README.md","hash":"405aaf7a43947d1f20da93432de36e0f4594376d","modified":1626851841374},{"_id":"themes/pln/README.zh.md","hash":"c8ac21353cb180127001dba3742a1d6ecce617de","modified":1626851841374},{"_id":"themes/pln/package-lock.json","hash":"8c803a254d1ca477cfec6b31dc35f24812563ccf","modified":1626851870132},{"_id":"themes/pln/languages/zh-CN.yml","hash":"0fde01776479a1a7a116606e384dce66e36820d6","modified":1626851841375},{"_id":"themes/pln/languages/en.yml","hash":"39c0b9ffdea8fc421510e149a1acf13a3a08aa52","modified":1626851841374},{"_id":"themes/pln/layout/index.ejs","hash":"b55f1fbdc86903181a8629c4f2960e45c9ac5c8d","modified":1626851841379},{"_id":"themes/pln/layout/layout.ejs","hash":"2b9b91fc1367673ccf315911811f74ccffeab113","modified":1626851841379},{"_id":"themes/pln/layout/post.ejs","hash":"5fd2ef2452aad199db13e704d4359207034b5fcd","modified":1626851841380},{"_id":"themes/pln/layout/page.ejs","hash":"21e4ec36b3de78f92d8afad2cd6c49bd86e4c97c","modified":1626851841380},{"_id":"themes/pln/layout/archive.ejs","hash":"73a10033d532e26fa9fcf24309c1e94a3c2d9112","modified":1626851841379},{"_id":"themes/pln/screenShots/index.md","hash":"06f59082e01b8083ad62b2c7331ef2d466742efe","modified":1626851841380},{"_id":"themes/pln/layout/_partial/article.ejs","hash":"35c9a07ae6d2d32c587c7f4d9bb1df36bb285c98","modified":1626851841376},{"_id":"themes/pln/layout/_partial/archive.ejs","hash":"709f97683665e844ee3c8d927999eb69de2d7982","modified":1626851841375},{"_id":"themes/pln/layout/_partial/footer.ejs","hash":"c29cd6b92d2ab07d96af876ae04880bbbd64bd37","modified":1626851841376},{"_id":"themes/pln/layout/_partial/navigator.ejs","hash":"7adb5d5088b4b0277985eaab82bd85a6ce66bed3","modified":1626851841377},{"_id":"themes/pln/layout/_partial/head.ejs","hash":"a58ecbbbea8afced7dddbf787e76e5848207758d","modified":1626851841376},{"_id":"themes/pln/layout/_partial/pagination.ejs","hash":"0e47f93657f6fa8d6e15512de0a01b42a3d279e3","modified":1626851841377},{"_id":"themes/pln/layout/_partial/search.ejs","hash":"2abd7b2eda6814eb19070d8a8af40f5f9a82589e","modified":1626851841379},{"_id":"themes/pln/layout/_partial/after_footer.ejs","hash":"a7cd60ac91486a117570327fe18b2fb03b1916b4","modified":1626851841375},{"_id":"themes/pln/source/js/search.js","hash":"47e0dac3d918daa3240610ecc3880169ffa6bb8c","modified":1626851841395},{"_id":"themes/pln/source/js/search.min.js","hash":"c494b0d8cc15a9e1beb6e9364775675e7f258604","modified":1626851841395},{"_id":"themes/pln/source/css/animation.scss","hash":"9cd401fea3e3289c9532aa99df0ad7e2e946c247","modified":1626851841392},{"_id":"themes/pln/source/css/footer.scss","hash":"ace718d27ff2792ca2b5795c0229993cbd153023","modified":1626851841392},{"_id":"themes/pln/source/css/m.min.css.map","hash":"686dbed556f1c2625b79f1b59f24bf20ba98ad60","modified":1626851841393},{"_id":"themes/pln/source/css/pager.scss","hash":"02d07e64c538b4bd2133a5a72b0d673bd075df18","modified":1626851841394},{"_id":"themes/pln/source/css/navigator.scss","hash":"f265e09551fec38fd2048605c938d61dadd737ff","modified":1626851841393},{"_id":"themes/pln/source/css/search.scss","hash":"90d2304c4f05076754a614d37807c83c3b3fcc29","modified":1626851841394},{"_id":"themes/pln/source/css/posts.scss","hash":"fd8608593da9632191e98b5c6c5cd2d3c6f10a2d","modified":1626851841394},{"_id":"themes/pln/source/css/toc.scss","hash":"411daab74373ef49cb581b676d76bcb16c44e44c","modified":1626851841394},{"_id":"themes/pln/layout/_partial/post/comment.ejs","hash":"33a1b01d6b896477b42f14ac6872c8af118891cc","modified":1626851841378},{"_id":"themes/pln/layout/_partial/post/meta.ejs","hash":"efff1d3d494f3cad9842780bb0d16efcaa1bdcaa","modified":1626851841378},{"_id":"themes/pln/layout/_partial/post/gallery.ejs","hash":"a778c47d9a4bffef90d21eb55a029bd19c7d140e","modified":1626851841378},{"_id":"themes/pln/layout/_partial/post/title.ejs","hash":"158ff7c7ed394b13cb66cc6753cb4b0774dacb7d","modified":1626851841378},{"_id":"themes/pln/source/css/code.scss","hash":"43f2062f512810e1bee8525329da6ace597d19a2","modified":1626851841392},{"_id":"themes/pln/screenShots/ver1.0-dropdown.jpg","hash":"f4d1ca29f532a8eaf88234263d5de706a7fb097c","modified":1626851841389},{"_id":"themes/pln/screenShots/ver1.0-tags.jpg","hash":"507cb86efaa632ed67b6fb4af4f137097f8ce5b7","modified":1626851841391},{"_id":"themes/pln/screenShots/ver1.0-article.jpg","hash":"43d6668b1ea6f8342c842c1b6cd46e848b351de9","modified":1626851841388},{"_id":"themes/pln/source/css/main.scss","hash":"00236029554e96aaad6f2af127b83c985d1275d0","modified":1626851841393},{"_id":"themes/pln/screenShots/ver0.9-index.jpg","hash":"b82c7d09b44adae132acff47037df5bfb7f48da1","modified":1626851841385},{"_id":"themes/pln/screenShots/ver0.9-tags.jpg","hash":"19ab2cf23beb1c3814968b616e52a9f44d4d939d","modified":1626851841386},{"_id":"themes/pln/screenShots/ver0.9-dropdown.jpg","hash":"07d6e84d99ff5960eea53657749c1ae642eb3fac","modified":1626851841383},{"_id":"themes/pln/screenShots/ver0.9-article.jpg","hash":"3877cf411b7ebc8eef73cddb38477f305eb2cdc9","modified":1626851841382},{"_id":"themes/pln/screenShots/ver1.0-index.jpg","hash":"502291f046e78d9f13cc77ec7a294f095b0f5f54","modified":1626851841390},{"_id":"themes/pln/source/css/m.min.css","hash":"b6a3407c3ca1c59b3299b12110aa8722c57da7ad","modified":1626851841392},{"_id":"public/tags/AntDesignVue源码学习/index.html","hash":"86b7ede87962f766b4c8795787980700318b25d7","modified":1626942645440},{"_id":"public/css/code.scss","hash":"43f2062f512810e1bee8525329da6ace597d19a2","modified":1626854982200},{"_id":"public/css/animation.scss","hash":"9cd401fea3e3289c9532aa99df0ad7e2e946c247","modified":1626854982200},{"_id":"public/css/footer.scss","hash":"ace718d27ff2792ca2b5795c0229993cbd153023","modified":1626854982200},{"_id":"public/css/m.min.css.map","hash":"686dbed556f1c2625b79f1b59f24bf20ba98ad60","modified":1626854982200},{"_id":"public/css/main.scss","hash":"00236029554e96aaad6f2af127b83c985d1275d0","modified":1626854982200},{"_id":"public/css/navigator.scss","hash":"f265e09551fec38fd2048605c938d61dadd737ff","modified":1626854982200},{"_id":"public/css/pager.scss","hash":"02d07e64c538b4bd2133a5a72b0d673bd075df18","modified":1626854982200},{"_id":"public/css/posts.scss","hash":"fd8608593da9632191e98b5c6c5cd2d3c6f10a2d","modified":1626854982200},{"_id":"public/css/toc.scss","hash":"411daab74373ef49cb581b676d76bcb16c44e44c","modified":1626854982200},{"_id":"public/css/search.scss","hash":"90d2304c4f05076754a614d37807c83c3b3fcc29","modified":1626854982200},{"_id":"public/js/search.js","hash":"09ac1aaacb622b3a56697e2f7eb39c7d5aa6fa25","modified":1626854982200},{"_id":"public/js/search.min.js","hash":"c494b0d8cc15a9e1beb6e9364775675e7f258604","modified":1626854982200},{"_id":"public/css/m.min.css","hash":"c809bb17d2e29af545699acba5e10a556c3a0019","modified":1626854982200},{"_id":"source/_posts/colorful.md","hash":"3775b4f1064f837c2f8eba46632847b5312eb2a4","modified":1626856501265},{"_id":"source/_posts/start.md","hash":"59d0feacaba89946625cddb93bd67fa5d6a9b539","modified":1626856623586},{"_id":"source/images/0721.jpg","hash":"31e0447f595db7404469a2aa81ca7d861f0b1357","modified":1626856294706},{"_id":"source/favicon.ico","hash":"75a4cc26f5b64bb5e9e9a350dcdc80ae62b5a2a2","modified":1626934971263},{"_id":"source/_posts/commander.md","hash":"9c5b33cc62cd4289731f69dd4f65f50512e47762","modified":1626939635642},{"_id":"source/_posts/xmrig.md","hash":"2f608e7ce7949c15b5e495f628c565830cf42455","modified":1626941302467},{"_id":"source/images/0722_1.jpg","hash":"c987c5227a77f99c2eea30c20f917a13a6bd8674","modified":1626920721397},{"_id":"source/images/0722_2.jpg","hash":"3d8a6824275f9a02472ead87caf6fcc62d1b7cd5","modified":1626920718213},{"_id":"source/_posts/gulp.md","hash":"f48f672d52c4cc165baadb162d8096e0d2d5b4c4","modified":1626942640630},{"_id":"public/search.xml","hash":"ddc41c97d7161ee55f5718891eb72072a7c84606","modified":1626942645440},{"_id":"public/xmrig/index.html","hash":"b44aa53c31560b508bc7c559fa7fe9fcc7573eb1","modified":1626942597842},{"_id":"public/colorful/index.html","hash":"08697fafb4ec361238c4e2ec029a4815eadff99d","modified":1626942597842},{"_id":"public/start/index.html","hash":"9b4d9f60023ee6b5975419fe59aae2213f4a075e","modified":1626942597842},{"_id":"public/tags/前端/index.html","hash":"8f45b7b7ad5e5b7e9124927b193d3aa71930ebfd","modified":1626942645440},{"_id":"public/tags/node/index.html","hash":"86490bc180586c21376378de7d926d943c5cdc85","modified":1626942645440},{"_id":"public/tags/服务器/index.html","hash":"4ab639edf7dc48eb42c7c013a70edea4bdf75853","modified":1626942597842},{"_id":"public/commander/index.html","hash":"9542f8edc81be765d16d7057cbfd3f5ad3b4432d","modified":1626942597842},{"_id":"public/tags/记事/index.html","hash":"ceb6060199fc39212318960e40c0ea265fa74827","modified":1626942597842},{"_id":"public/gulp/index.html","hash":"8be37c78d99141b77502c39698a0a4d4e5e9881e","modified":1626942645440}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"开始","date":"2021-07-21T07:03:52.000Z","_content":"\n最近开始想把自己工作常用的组件封装成一个组件库\n于是准备学习一下AntDesignVue的源码\n顺便巩固一下vue3的知识\n所以临时开了个Hexo博客\n记录一下自己学习的笔记\n\n顺便当个qq空间\n\n\n\n*#オリジナル Living with a hobby - くっか的插画*\n\n![#オリジナル Living with a hobby - くっか的插画](/images/0721.jpg)\n\n[AntDesignVue](https://github.com/vueComponent/ant-design-vue)\n[ArchyUI](https://github.com/ArchyInk/Archy-UI)\n[follow](https://github.com/ArchyInk/)","source":"_posts/start.md","raw":"---\ntitle: 开始\ndate: 2021-07-21 15:03:52\ntags: [AntDesignVue源码学习,前端]\n---\n\n最近开始想把自己工作常用的组件封装成一个组件库\n于是准备学习一下AntDesignVue的源码\n顺便巩固一下vue3的知识\n所以临时开了个Hexo博客\n记录一下自己学习的笔记\n\n顺便当个qq空间\n\n\n\n*#オリジナル Living with a hobby - くっか的插画*\n\n![#オリジナル Living with a hobby - くっか的插画](/images/0721.jpg)\n\n[AntDesignVue](https://github.com/vueComponent/ant-design-vue)\n[ArchyUI](https://github.com/ArchyInk/Archy-UI)\n[follow](https://github.com/ArchyInk/)","slug":"start","published":1,"updated":"2021-07-21T08:37:03.586Z","_id":"ckrd88uxr0000hf673xu3hgyk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近开始想把自己工作常用的组件封装成一个组件库<br>于是准备学习一下AntDesignVue的源码<br>顺便巩固一下vue3的知识<br>所以临时开了个Hexo博客<br>记录一下自己学习的笔记</p>\n<p>顺便当个qq空间</p>\n<p><em>#オリジナル Living with a hobby - くっか的插画</em></p>\n<p><img src=\"/images/0721.jpg\" alt=\"#オリジナル Living with a hobby - くっか的插画\"></p>\n<p><a href=\"https://github.com/vueComponent/ant-design-vue\">AntDesignVue</a><br><a href=\"https://github.com/ArchyInk/Archy-UI\">ArchyUI</a><br><a href=\"https://github.com/ArchyInk/\">follow</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近开始想把自己工作常用的组件封装成一个组件库<br>于是准备学习一下AntDesignVue的源码<br>顺便巩固一下vue3的知识<br>所以临时开了个Hexo博客<br>记录一下自己学习的笔记</p>\n<p>顺便当个qq空间</p>\n<p><em>#オリジナル Living with a hobby - くっか的插画</em></p>\n<p><img src=\"/images/0721.jpg\" alt=\"#オリジナル Living with a hobby - くっか的插画\"></p>\n<p><a href=\"https://github.com/vueComponent/ant-design-vue\">AntDesignVue</a><br><a href=\"https://github.com/ArchyInk/Archy-UI\">ArchyUI</a><br><a href=\"https://github.com/ArchyInk/\">follow</a></p>\n"},{"title":"colorful工具","date":"2021-07-21T07:04:58.000Z","_content":"\n### colorful\n\nantd-tools/cli/index.js里面有`require('colorful').colorful()`\n\nnpm里有介绍，是在终端里显示颜色的\n\n```javascript\nrequire('colorful').colorful()\nrequire('colorful').isatty = true;\n\nconsole.log('hello'.to.red.color);\n```\n\n终端显示就是红色的hello，具体用法暂时不去了解，但是很cool\n\n","source":"_posts/colorful.md","raw":"---\ntitle: colorful工具\ndate: 2021-07-21 15:04:58\ntags: [AntDesignVue源码学习,前端]\n---\n\n### colorful\n\nantd-tools/cli/index.js里面有`require('colorful').colorful()`\n\nnpm里有介绍，是在终端里显示颜色的\n\n```javascript\nrequire('colorful').colorful()\nrequire('colorful').isatty = true;\n\nconsole.log('hello'.to.red.color);\n```\n\n终端显示就是红色的hello，具体用法暂时不去了解，但是很cool\n\n","slug":"colorful","published":1,"updated":"2021-07-21T08:35:01.265Z","_id":"ckrd88uxt0001hf677d399iij","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"colorful\"><a href=\"#colorful\" class=\"headerlink\" title=\"colorful\"></a>colorful</h3><p>antd-tools/cli/index.js里面有<code>require(&#39;colorful&#39;).colorful()</code></p>\n<p>npm里有介绍，是在终端里显示颜色的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).colorful()</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).isatty = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>.to.red.color);</span><br></pre></td></tr></table></figure>\n\n<p>终端显示就是红色的hello，具体用法暂时不去了解，但是很cool</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"colorful\"><a href=\"#colorful\" class=\"headerlink\" title=\"colorful\"></a>colorful</h3><p>antd-tools/cli/index.js里面有<code>require(&#39;colorful&#39;).colorful()</code></p>\n<p>npm里有介绍，是在终端里显示颜色的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).colorful()</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).isatty = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>.to.red.color);</span><br></pre></td></tr></table></figure>\n\n<p>终端显示就是红色的hello，具体用法暂时不去了解，但是很cool</p>\n"},{"title":"xmrig挖矿病毒","date":"2021-07-22T02:04:03.000Z","_content":"\n昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%\n\n![阿里云控制台图片](/images/0722_1.jpg)\n\n心想可能中病毒了，好不容易连接上服务器，输入\n\n`[root@archyInk]# top` \n\n![大战过后，只有到网上找图了](/images/0722_2.jpg)\n发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。\n\n气死了，矿佬连我2g小水管都不放过。\n\nkill进程发现没啥用，会自动重启\n\n查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入`ll /proc/14454/exe`中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。\n\n于是我直接把这个文件夹`rm -rf`了，然后直接重启服务器\n\n\n\n果然病毒没有重启了\n\n花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。\n\n\n\n最后把skypool的自启动删除了，具体的我也是查的\n\n","source":"_posts/xmrig.md","raw":"---\ntitle: xmrig挖矿病毒\ndate: 2021-07-22 10:04:03\ntags: [服务器,记事]\n---\n\n昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%\n\n![阿里云控制台图片](/images/0722_1.jpg)\n\n心想可能中病毒了，好不容易连接上服务器，输入\n\n`[root@archyInk]# top` \n\n![大战过后，只有到网上找图了](/images/0722_2.jpg)\n发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。\n\n气死了，矿佬连我2g小水管都不放过。\n\nkill进程发现没啥用，会自动重启\n\n查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入`ll /proc/14454/exe`中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。\n\n于是我直接把这个文件夹`rm -rf`了，然后直接重启服务器\n\n\n\n果然病毒没有重启了\n\n花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。\n\n\n\n最后把skypool的自启动删除了，具体的我也是查的\n\n","slug":"xmrig","published":1,"updated":"2021-07-22T08:08:22.467Z","_id":"ckrealjgl0000iu67dd6j2cmv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%</p>\n<p><img src=\"/images/0722_1.jpg\" alt=\"阿里云控制台图片\"></p>\n<p>心想可能中病毒了，好不容易连接上服务器，输入</p>\n<p><code>[root@archyInk]# top</code> </p>\n<p><img src=\"/images/0722_2.jpg\" alt=\"大战过后，只有到网上找图了\"><br>发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。</p>\n<p>气死了，矿佬连我2g小水管都不放过。</p>\n<p>kill进程发现没啥用，会自动重启</p>\n<p>查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入<code>ll /proc/14454/exe</code>中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。</p>\n<p>于是我直接把这个文件夹<code>rm -rf</code>了，然后直接重启服务器</p>\n<p>果然病毒没有重启了</p>\n<p>花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。</p>\n<p>最后把skypool的自启动删除了，具体的我也是查的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%</p>\n<p><img src=\"/images/0722_1.jpg\" alt=\"阿里云控制台图片\"></p>\n<p>心想可能中病毒了，好不容易连接上服务器，输入</p>\n<p><code>[root@archyInk]# top</code> </p>\n<p><img src=\"/images/0722_2.jpg\" alt=\"大战过后，只有到网上找图了\"><br>发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。</p>\n<p>气死了，矿佬连我2g小水管都不放过。</p>\n<p>kill进程发现没啥用，会自动重启</p>\n<p>查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入<code>ll /proc/14454/exe</code>中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。</p>\n<p>于是我直接把这个文件夹<code>rm -rf</code>了，然后直接重启服务器</p>\n<p>果然病毒没有重启了</p>\n<p>花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。</p>\n<p>最后把skypool的自启动删除了，具体的我也是查的</p>\n"},{"title":"开发cli必备的commander工具","date":"2021-07-22T02:42:17.000Z","_content":"\n开发cli必备\n\n文档，竟然有中文，对我这种四级都没过得辣鸡太友好了\n\n[Commander.js](https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md)\n\n首先\n\n## Install\n\n```\nnpm install commander\n```\n\n## Declaring\n\n```\nconst { program } = require('commander');\n```\n\n## API\n\n### version\n\n```\nprogram.version('0.0.1').parse(process.argv);\n//console \n//node commander.js -V\n0.0.1\nprogram.version('0.0.1','-v,--version').parse(process.argv);\n//console \n//node commander.js -v or --version\n0.0.1\n```\n\n### option\n\nCommander 使用`.option()` 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（--后面接一个或多个单词），使用逗号、空格或`|`分隔。\n\n选项可以通过在`Command`对象上调用`.opts()`方法来获取。对于多个单词的长选项，使用驼峰法获取，例如`--template-engine`选项通过`program.opts().templateEngine`获取。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-d, --debug', 'debug')\n  .option('-s, --small', 'small')\n  .option('-p, --type <type>', 'type')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.debug) console.log(options)\nconsole.log('details:')\nif (options.small) console.log('- small')\nif (options.type) console.log(`- ${options.type}`)\n\n//node commander.js -h\nUsage: commander [options]\n\nOptions:\n  -v, --version      output the version number\n  -d, --debug        debug\n  -s, --small        small\n  -p, --type <type>  type\n  -h, --help         display help for command\n\n//node commander -d\n{debug:true}\ndetails:\n\n//node comander -d -s \n{debug:true,small:true}\ndetails:\n- smaill \n\n//node comander -d -s -t chinese\n{debug:true,small:true,type:chinese}\ndetails:\n- smaill \n- chinese\n\n```\n\n选项可以设置默认值\n\n```\n//选项可以设置一个默认值。\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n#### 其他的选项类型\n\n**取反选项**\n可以定义一个以`no-`开头的`boolean`型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带`no-`的选项，未定义对应不带`no-`的选项时，该选项的默认值会被置为true。\n\n如果已经定义了`--foo`，那么再定义`--no-foo`并不会改变它本来的默认值。可以为一个`boolean`类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-o, --option','show options')\n  .option('--no-gf', 'no object')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.option) console.log(options)\n//node commander -o\n{ gf: true, option: true }\n//node commander -o --no-gf\n{ gf: false, option: true }\n```\n\n**选项的参数使用方括号声明表示参数是可选参数（如 `--optional [value]`）。**\n\n该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。\n\n**选项的参数使用尖括号声明表示参数是必填参数（如 `--optional <value>`）。**\n\n必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与`.option`一致。\n\n**选项的参数使用...前缀表示参数是变长参数（如`--optional <...value>`)。**\n\n在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或--开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过`--`标记当前命令的结束。\n\n**其他选项配置**\n\n大多数情况下，选项均可通过`.option()`方法添加。但对某些不常见的用例，也可以直接构造`Option`对象，对选项进行更详尽的配置。\n\n```\nconst { program, Option } = require('commander')\n\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(\n    new Option('-t, --timeout <delay>', 'timeout in seconds').default(\n      60,\n      'one minute'\n    )\n  )\n  .addOption(\n    new Option('-d, --drink <size>', 'drink size').choices([\n      'small',\n      'medium',\n      'large',\n    ])\n  )\nprogram.parse()\nconsole.log('Options: ', program.opts());\n\n//node commander --help\nUsage: commander [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n  \n//node commander -s\nOptions:  { timeout: 60, secret: true }\n\n//node commander -d big\nerror: option '-d, --drink <size>' argument 'big' is invalid. Allowed choices are small, medium, large.\n```\n\n**自定义选项处理**\n\n选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。\n\n自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。\n\n\n\n**有点多，时间原因不每一个都看完了**\n\n**把常用的看了理解了**\n\n**总不能一次性把所有知识全学完吧**\n\n","source":"_posts/commander.md","raw":"---\ntitle: 开发cli必备的commander工具\ndate: 2021-07-22 10:42:17\ntags: [AntDesignVue源码学习,前端,node]\n---\n\n开发cli必备\n\n文档，竟然有中文，对我这种四级都没过得辣鸡太友好了\n\n[Commander.js](https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md)\n\n首先\n\n## Install\n\n```\nnpm install commander\n```\n\n## Declaring\n\n```\nconst { program } = require('commander');\n```\n\n## API\n\n### version\n\n```\nprogram.version('0.0.1').parse(process.argv);\n//console \n//node commander.js -V\n0.0.1\nprogram.version('0.0.1','-v,--version').parse(process.argv);\n//console \n//node commander.js -v or --version\n0.0.1\n```\n\n### option\n\nCommander 使用`.option()` 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（--后面接一个或多个单词），使用逗号、空格或`|`分隔。\n\n选项可以通过在`Command`对象上调用`.opts()`方法来获取。对于多个单词的长选项，使用驼峰法获取，例如`--template-engine`选项通过`program.opts().templateEngine`获取。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-d, --debug', 'debug')\n  .option('-s, --small', 'small')\n  .option('-p, --type <type>', 'type')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.debug) console.log(options)\nconsole.log('details:')\nif (options.small) console.log('- small')\nif (options.type) console.log(`- ${options.type}`)\n\n//node commander.js -h\nUsage: commander [options]\n\nOptions:\n  -v, --version      output the version number\n  -d, --debug        debug\n  -s, --small        small\n  -p, --type <type>  type\n  -h, --help         display help for command\n\n//node commander -d\n{debug:true}\ndetails:\n\n//node comander -d -s \n{debug:true,small:true}\ndetails:\n- smaill \n\n//node comander -d -s -t chinese\n{debug:true,small:true,type:chinese}\ndetails:\n- smaill \n- chinese\n\n```\n\n选项可以设置默认值\n\n```\n//选项可以设置一个默认值。\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n#### 其他的选项类型\n\n**取反选项**\n可以定义一个以`no-`开头的`boolean`型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带`no-`的选项，未定义对应不带`no-`的选项时，该选项的默认值会被置为true。\n\n如果已经定义了`--foo`，那么再定义`--no-foo`并不会改变它本来的默认值。可以为一个`boolean`类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-o, --option','show options')\n  .option('--no-gf', 'no object')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.option) console.log(options)\n//node commander -o\n{ gf: true, option: true }\n//node commander -o --no-gf\n{ gf: false, option: true }\n```\n\n**选项的参数使用方括号声明表示参数是可选参数（如 `--optional [value]`）。**\n\n该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。\n\n**选项的参数使用尖括号声明表示参数是必填参数（如 `--optional <value>`）。**\n\n必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与`.option`一致。\n\n**选项的参数使用...前缀表示参数是变长参数（如`--optional <...value>`)。**\n\n在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或--开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过`--`标记当前命令的结束。\n\n**其他选项配置**\n\n大多数情况下，选项均可通过`.option()`方法添加。但对某些不常见的用例，也可以直接构造`Option`对象，对选项进行更详尽的配置。\n\n```\nconst { program, Option } = require('commander')\n\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(\n    new Option('-t, --timeout <delay>', 'timeout in seconds').default(\n      60,\n      'one minute'\n    )\n  )\n  .addOption(\n    new Option('-d, --drink <size>', 'drink size').choices([\n      'small',\n      'medium',\n      'large',\n    ])\n  )\nprogram.parse()\nconsole.log('Options: ', program.opts());\n\n//node commander --help\nUsage: commander [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n  \n//node commander -s\nOptions:  { timeout: 60, secret: true }\n\n//node commander -d big\nerror: option '-d, --drink <size>' argument 'big' is invalid. Allowed choices are small, medium, large.\n```\n\n**自定义选项处理**\n\n选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。\n\n自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。\n\n\n\n**有点多，时间原因不每一个都看完了**\n\n**把常用的看了理解了**\n\n**总不能一次性把所有知识全学完吧**\n\n","slug":"commander","published":1,"updated":"2021-07-22T07:40:35.642Z","_id":"ckred61r10003iu67buva19bf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>开发cli必备</p>\n<p>文档，竟然有中文，对我这种四级都没过得辣鸡太友好了</p>\n<p><a href=\"https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md\">Commander.js</a></p>\n<p>首先</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Declaring\"><a href=\"#Declaring\" class=\"headerlink\" title=\"Declaring\"></a>Declaring</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program &#125; = require(&#x27;commander&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.version(&#x27;0.0.1&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -V</span><br><span class=\"line\">0.0.1</span><br><span class=\"line\">program.version(&#x27;0.0.1&#x27;,&#x27;-v,--version&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -v or --version</span><br><span class=\"line\">0.0.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"option\"><a href=\"#option\" class=\"headerlink\" title=\"option\"></a>option</h3><p>Commander 使用<code>.option()</code> 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（–后面接一个或多个单词），使用逗号、空格或<code>|</code>分隔。</p>\n<p>选项可以通过在<code>Command</code>对象上调用<code>.opts()</code>方法来获取。对于多个单词的长选项，使用驼峰法获取，例如<code>--template-engine</code>选项通过<code>program.opts().templateEngine</code>获取。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-d, --debug&#x27;, &#x27;debug&#x27;)</span><br><span class=\"line\">  .option(&#x27;-s, --small&#x27;, &#x27;small&#x27;)</span><br><span class=\"line\">  .option(&#x27;-p, --type &lt;type&gt;&#x27;, &#x27;type&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.debug) console.log(options)</span><br><span class=\"line\">console.log(&#x27;details:&#x27;)</span><br><span class=\"line\">if (options.small) console.log(&#x27;- small&#x27;)</span><br><span class=\"line\">if (options.type) console.log(`- $&#123;options.type&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander.js -h</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -v, --version      output the version number</span><br><span class=\"line\">  -d, --debug        debug</span><br><span class=\"line\">  -s, --small        small</span><br><span class=\"line\">  -p, --type &lt;type&gt;  type</span><br><span class=\"line\">  -h, --help         display help for command</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d</span><br><span class=\"line\">&#123;debug:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s </span><br><span class=\"line\">&#123;debug:true,small:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s -t chinese</span><br><span class=\"line\">&#123;debug:true,small:true,type:chinese&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\">- chinese</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选项可以设置默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选项可以设置一个默认值。</span><br><span class=\"line\">program</span><br><span class=\"line\">  .option(&#x27;-c, --cheese &lt;type&gt;&#x27;, &#x27;add the specified type of cheese&#x27;, &#x27;blue&#x27;);</span><br><span class=\"line\">program.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(`cheese: $&#123;program.opts().cheese&#125;`);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他的选项类型\"><a href=\"#其他的选项类型\" class=\"headerlink\" title=\"其他的选项类型\"></a>其他的选项类型</h4><p><strong>取反选项</strong><br>可以定义一个以<code>no-</code>开头的<code>boolean</code>型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带<code>no-</code>的选项，未定义对应不带<code>no-</code>的选项时，该选项的默认值会被置为true。</p>\n<p>如果已经定义了<code>--foo</code>，那么再定义<code>--no-foo</code>并不会改变它本来的默认值。可以为一个<code>boolean</code>类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-o, --option&#x27;,&#x27;show options&#x27;)</span><br><span class=\"line\">  .option(&#x27;--no-gf&#x27;, &#x27;no object&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.option) console.log(options)</span><br><span class=\"line\">//node commander -o</span><br><span class=\"line\">&#123; gf: true, option: true &#125;</span><br><span class=\"line\">//node commander -o --no-gf</span><br><span class=\"line\">&#123; gf: false, option: true &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>选项的参数使用方括号声明表示参数是可选参数（如 <code>--optional [value]</code>）。</strong></p>\n<p>该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。</p>\n<p><strong>选项的参数使用尖括号声明表示参数是必填参数（如 <code>--optional &lt;value&gt;</code>）。</strong></p>\n<p>必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与<code>.option</code>一致。</p>\n<p><strong>选项的参数使用…前缀表示参数是变长参数（如<code>--optional &lt;...value&gt;</code>)。</strong></p>\n<p>在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或–开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过<code>--</code>标记当前命令的结束。</p>\n<p><strong>其他选项配置</strong></p>\n<p>大多数情况下，选项均可通过<code>.option()</code>方法添加。但对某些不常见的用例，也可以直接构造<code>Option</code>对象，对选项进行更详尽的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program, Option &#125; = require(&#x27;commander&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .addOption(new Option(&#x27;-s, --secret&#x27;).hideHelp())</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-t, --timeout &lt;delay&gt;&#x27;, &#x27;timeout in seconds&#x27;).default(</span><br><span class=\"line\">      60,</span><br><span class=\"line\">      &#x27;one minute&#x27;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-d, --drink &lt;size&gt;&#x27;, &#x27;drink size&#x27;).choices([</span><br><span class=\"line\">      &#x27;small&#x27;,</span><br><span class=\"line\">      &#x27;medium&#x27;,</span><br><span class=\"line\">      &#x27;large&#x27;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  )</span><br><span class=\"line\">program.parse()</span><br><span class=\"line\">console.log(&#x27;Options: &#x27;, program.opts());</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander --help</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -t, --timeout &lt;delay&gt;  timeout in seconds (default: one minute)</span><br><span class=\"line\">  -d, --drink &lt;size&gt;     drink size (choices: &quot;small&quot;, &quot;medium&quot;, &quot;large&quot;)</span><br><span class=\"line\">  -h, --help             display help for command</span><br><span class=\"line\">  </span><br><span class=\"line\">//node commander -s</span><br><span class=\"line\">Options:  &#123; timeout: 60, secret: true &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d big</span><br><span class=\"line\">error: option &#x27;-d, --drink &lt;size&gt;&#x27; argument &#x27;big&#x27; is invalid. Allowed choices are small, medium, large.</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义选项处理</strong></p>\n<p>选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。</p>\n<p>自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。</p>\n<p><strong>有点多，时间原因不每一个都看完了</strong></p>\n<p><strong>把常用的看了理解了</strong></p>\n<p><strong>总不能一次性把所有知识全学完吧</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>开发cli必备</p>\n<p>文档，竟然有中文，对我这种四级都没过得辣鸡太友好了</p>\n<p><a href=\"https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md\">Commander.js</a></p>\n<p>首先</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Declaring\"><a href=\"#Declaring\" class=\"headerlink\" title=\"Declaring\"></a>Declaring</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program &#125; = require(&#x27;commander&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.version(&#x27;0.0.1&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -V</span><br><span class=\"line\">0.0.1</span><br><span class=\"line\">program.version(&#x27;0.0.1&#x27;,&#x27;-v,--version&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -v or --version</span><br><span class=\"line\">0.0.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"option\"><a href=\"#option\" class=\"headerlink\" title=\"option\"></a>option</h3><p>Commander 使用<code>.option()</code> 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（–后面接一个或多个单词），使用逗号、空格或<code>|</code>分隔。</p>\n<p>选项可以通过在<code>Command</code>对象上调用<code>.opts()</code>方法来获取。对于多个单词的长选项，使用驼峰法获取，例如<code>--template-engine</code>选项通过<code>program.opts().templateEngine</code>获取。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-d, --debug&#x27;, &#x27;debug&#x27;)</span><br><span class=\"line\">  .option(&#x27;-s, --small&#x27;, &#x27;small&#x27;)</span><br><span class=\"line\">  .option(&#x27;-p, --type &lt;type&gt;&#x27;, &#x27;type&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.debug) console.log(options)</span><br><span class=\"line\">console.log(&#x27;details:&#x27;)</span><br><span class=\"line\">if (options.small) console.log(&#x27;- small&#x27;)</span><br><span class=\"line\">if (options.type) console.log(`- $&#123;options.type&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander.js -h</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -v, --version      output the version number</span><br><span class=\"line\">  -d, --debug        debug</span><br><span class=\"line\">  -s, --small        small</span><br><span class=\"line\">  -p, --type &lt;type&gt;  type</span><br><span class=\"line\">  -h, --help         display help for command</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d</span><br><span class=\"line\">&#123;debug:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s </span><br><span class=\"line\">&#123;debug:true,small:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s -t chinese</span><br><span class=\"line\">&#123;debug:true,small:true,type:chinese&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\">- chinese</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选项可以设置默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选项可以设置一个默认值。</span><br><span class=\"line\">program</span><br><span class=\"line\">  .option(&#x27;-c, --cheese &lt;type&gt;&#x27;, &#x27;add the specified type of cheese&#x27;, &#x27;blue&#x27;);</span><br><span class=\"line\">program.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(`cheese: $&#123;program.opts().cheese&#125;`);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他的选项类型\"><a href=\"#其他的选项类型\" class=\"headerlink\" title=\"其他的选项类型\"></a>其他的选项类型</h4><p><strong>取反选项</strong><br>可以定义一个以<code>no-</code>开头的<code>boolean</code>型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带<code>no-</code>的选项，未定义对应不带<code>no-</code>的选项时，该选项的默认值会被置为true。</p>\n<p>如果已经定义了<code>--foo</code>，那么再定义<code>--no-foo</code>并不会改变它本来的默认值。可以为一个<code>boolean</code>类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-o, --option&#x27;,&#x27;show options&#x27;)</span><br><span class=\"line\">  .option(&#x27;--no-gf&#x27;, &#x27;no object&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.option) console.log(options)</span><br><span class=\"line\">//node commander -o</span><br><span class=\"line\">&#123; gf: true, option: true &#125;</span><br><span class=\"line\">//node commander -o --no-gf</span><br><span class=\"line\">&#123; gf: false, option: true &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>选项的参数使用方括号声明表示参数是可选参数（如 <code>--optional [value]</code>）。</strong></p>\n<p>该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。</p>\n<p><strong>选项的参数使用尖括号声明表示参数是必填参数（如 <code>--optional &lt;value&gt;</code>）。</strong></p>\n<p>必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与<code>.option</code>一致。</p>\n<p><strong>选项的参数使用…前缀表示参数是变长参数（如<code>--optional &lt;...value&gt;</code>)。</strong></p>\n<p>在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或–开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过<code>--</code>标记当前命令的结束。</p>\n<p><strong>其他选项配置</strong></p>\n<p>大多数情况下，选项均可通过<code>.option()</code>方法添加。但对某些不常见的用例，也可以直接构造<code>Option</code>对象，对选项进行更详尽的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program, Option &#125; = require(&#x27;commander&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .addOption(new Option(&#x27;-s, --secret&#x27;).hideHelp())</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-t, --timeout &lt;delay&gt;&#x27;, &#x27;timeout in seconds&#x27;).default(</span><br><span class=\"line\">      60,</span><br><span class=\"line\">      &#x27;one minute&#x27;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-d, --drink &lt;size&gt;&#x27;, &#x27;drink size&#x27;).choices([</span><br><span class=\"line\">      &#x27;small&#x27;,</span><br><span class=\"line\">      &#x27;medium&#x27;,</span><br><span class=\"line\">      &#x27;large&#x27;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  )</span><br><span class=\"line\">program.parse()</span><br><span class=\"line\">console.log(&#x27;Options: &#x27;, program.opts());</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander --help</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -t, --timeout &lt;delay&gt;  timeout in seconds (default: one minute)</span><br><span class=\"line\">  -d, --drink &lt;size&gt;     drink size (choices: &quot;small&quot;, &quot;medium&quot;, &quot;large&quot;)</span><br><span class=\"line\">  -h, --help             display help for command</span><br><span class=\"line\">  </span><br><span class=\"line\">//node commander -s</span><br><span class=\"line\">Options:  &#123; timeout: 60, secret: true &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d big</span><br><span class=\"line\">error: option &#x27;-d, --drink &lt;size&gt;&#x27; argument &#x27;big&#x27; is invalid. Allowed choices are small, medium, large.</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义选项处理</strong></p>\n<p>选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。</p>\n<p>自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。</p>\n<p><strong>有点多，时间原因不每一个都看完了</strong></p>\n<p><strong>把常用的看了理解了</strong></p>\n<p><strong>总不能一次性把所有知识全学完吧</strong></p>\n"},{"title":"antd-tools中的gulp","date":"2021-07-22T07:14:23.000Z","_content":"\n首先三连\n\n`npm install --global gulp-cli`\n\n`npm install --save-dev gulp`\n\n`gulp --version`\n\n```\n>gulp --version\nCLI version: 2.3.0\nLocal version: 4.0.2\n```\n\n\n\n**测试**\n\n创建gulpfile.js文件\n\n```\nfunction defaultTask(cb) {\n  // place code for your default task here\n  cb();\n}\n\nexports.default = defaultTask\n```\n\n在该目录下\n\n`>gulp`\n\n如需运行多个任务（task），可以执行 `gulp <task> <othertask>`\n\n```\n>gulp\n[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js\n[14:31:47] Starting 'default'...\n[14:31:47] Finished 'default' after 1.69 ms\n```\n\n**gulp和webpack的区别**\n\ngulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。\n\nwebpack注重模块化开发，把所有的文件模块化。\n\n懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了\n\n**runTask**\n\nAnt Design Vue里面有这样一个方法\n\n```\nfunction runTask(toRun) {\n  const metadata = { task: toRun };\n  // Gulp >= 4.0.0 (doesn't support events)\n  const taskInstance = gulp.task(toRun);\n  if (taskInstance === undefined) {\n    gulp.emit('task_not_found', metadata);\n    return;\n  }\n  const start = process.hrtime();\n  gulp.emit('task_start', metadata);\n  try {\n    taskInstance.apply(gulp);\n    metadata.hrDuration = process.hrtime(start);\n    gulp.emit('task_stop', metadata);\n    gulp.emit('stop');\n  } catch (err) {\n    err.hrDuration = process.hrtime(start);\n    err.task = metadata.task;\n    gulp.emit('task_err', err);\n  }\n}\n```\n\n函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行\n\n所以后面我们来一个一个理解antd-tools这里面的工具有什么作用\n\n","source":"_posts/gulp.md","raw":"---\ntitle: antd-tools中的gulp\ndate: 2021-07-22 15:14:23\ntags: [AntDesignVue源码学习,前端,node]\n---\n\n首先三连\n\n`npm install --global gulp-cli`\n\n`npm install --save-dev gulp`\n\n`gulp --version`\n\n```\n>gulp --version\nCLI version: 2.3.0\nLocal version: 4.0.2\n```\n\n\n\n**测试**\n\n创建gulpfile.js文件\n\n```\nfunction defaultTask(cb) {\n  // place code for your default task here\n  cb();\n}\n\nexports.default = defaultTask\n```\n\n在该目录下\n\n`>gulp`\n\n如需运行多个任务（task），可以执行 `gulp <task> <othertask>`\n\n```\n>gulp\n[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js\n[14:31:47] Starting 'default'...\n[14:31:47] Finished 'default' after 1.69 ms\n```\n\n**gulp和webpack的区别**\n\ngulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。\n\nwebpack注重模块化开发，把所有的文件模块化。\n\n懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了\n\n**runTask**\n\nAnt Design Vue里面有这样一个方法\n\n```\nfunction runTask(toRun) {\n  const metadata = { task: toRun };\n  // Gulp >= 4.0.0 (doesn't support events)\n  const taskInstance = gulp.task(toRun);\n  if (taskInstance === undefined) {\n    gulp.emit('task_not_found', metadata);\n    return;\n  }\n  const start = process.hrtime();\n  gulp.emit('task_start', metadata);\n  try {\n    taskInstance.apply(gulp);\n    metadata.hrDuration = process.hrtime(start);\n    gulp.emit('task_stop', metadata);\n    gulp.emit('stop');\n  } catch (err) {\n    err.hrDuration = process.hrtime(start);\n    err.task = metadata.task;\n    gulp.emit('task_err', err);\n  }\n}\n```\n\n函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行\n\n所以后面我们来一个一个理解antd-tools这里面的工具有什么作用\n\n","slug":"gulp","published":1,"updated":"2021-07-22T08:30:40.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrenn7vb000078v79hji3hcz","content":"<p>首先三连</p>\n<p><code>npm install --global gulp-cli</code></p>\n<p><code>npm install --save-dev gulp</code></p>\n<p><code>gulp --version</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp --version</span><br><span class=\"line\">CLI version: 2.3.0</span><br><span class=\"line\">Local version: 4.0.2</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>测试</strong></p>\n<p>创建gulpfile.js文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function defaultTask(cb) &#123;</span><br><span class=\"line\">  // place code for your default task here</span><br><span class=\"line\">  cb();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.default = defaultTask</span><br></pre></td></tr></table></figure>\n\n<p>在该目录下</p>\n<p><code>&gt;gulp</code></p>\n<p>如需运行多个任务（task），可以执行 <code>gulp &lt;task&gt; &lt;othertask&gt;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp</span><br><span class=\"line\">[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js</span><br><span class=\"line\">[14:31:47] Starting &#x27;default&#x27;...</span><br><span class=\"line\">[14:31:47] Finished &#x27;default&#x27; after 1.69 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>gulp和webpack的区别</strong></p>\n<p>gulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。</p>\n<p>webpack注重模块化开发，把所有的文件模块化。</p>\n<p>懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了</p>\n<p><strong>runTask</strong></p>\n<p>Ant Design Vue里面有这样一个方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function runTask(toRun) &#123;</span><br><span class=\"line\">  const metadata = &#123; task: toRun &#125;;</span><br><span class=\"line\">  // Gulp &gt;= 4.0.0 (doesn&#x27;t support events)</span><br><span class=\"line\">  const taskInstance = gulp.task(toRun);</span><br><span class=\"line\">  if (taskInstance === undefined) &#123;</span><br><span class=\"line\">    gulp.emit(&#x27;task_not_found&#x27;, metadata);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const start = process.hrtime();</span><br><span class=\"line\">  gulp.emit(&#x27;task_start&#x27;, metadata);</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    taskInstance.apply(gulp);</span><br><span class=\"line\">    metadata.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    gulp.emit(&#x27;task_stop&#x27;, metadata);</span><br><span class=\"line\">    gulp.emit(&#x27;stop&#x27;);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    err.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    err.task = metadata.task;</span><br><span class=\"line\">    gulp.emit(&#x27;task_err&#x27;, err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行</p>\n<p>所以后面我们来一个一个理解antd-tools这里面的工具有什么作用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先三连</p>\n<p><code>npm install --global gulp-cli</code></p>\n<p><code>npm install --save-dev gulp</code></p>\n<p><code>gulp --version</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp --version</span><br><span class=\"line\">CLI version: 2.3.0</span><br><span class=\"line\">Local version: 4.0.2</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>测试</strong></p>\n<p>创建gulpfile.js文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function defaultTask(cb) &#123;</span><br><span class=\"line\">  // place code for your default task here</span><br><span class=\"line\">  cb();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.default = defaultTask</span><br></pre></td></tr></table></figure>\n\n<p>在该目录下</p>\n<p><code>&gt;gulp</code></p>\n<p>如需运行多个任务（task），可以执行 <code>gulp &lt;task&gt; &lt;othertask&gt;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp</span><br><span class=\"line\">[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js</span><br><span class=\"line\">[14:31:47] Starting &#x27;default&#x27;...</span><br><span class=\"line\">[14:31:47] Finished &#x27;default&#x27; after 1.69 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>gulp和webpack的区别</strong></p>\n<p>gulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。</p>\n<p>webpack注重模块化开发，把所有的文件模块化。</p>\n<p>懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了</p>\n<p><strong>runTask</strong></p>\n<p>Ant Design Vue里面有这样一个方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function runTask(toRun) &#123;</span><br><span class=\"line\">  const metadata = &#123; task: toRun &#125;;</span><br><span class=\"line\">  // Gulp &gt;= 4.0.0 (doesn&#x27;t support events)</span><br><span class=\"line\">  const taskInstance = gulp.task(toRun);</span><br><span class=\"line\">  if (taskInstance === undefined) &#123;</span><br><span class=\"line\">    gulp.emit(&#x27;task_not_found&#x27;, metadata);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const start = process.hrtime();</span><br><span class=\"line\">  gulp.emit(&#x27;task_start&#x27;, metadata);</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    taskInstance.apply(gulp);</span><br><span class=\"line\">    metadata.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    gulp.emit(&#x27;task_stop&#x27;, metadata);</span><br><span class=\"line\">    gulp.emit(&#x27;stop&#x27;);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    err.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    err.task = metadata.task;</span><br><span class=\"line\">    gulp.emit(&#x27;task_err&#x27;, err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行</p>\n<p>所以后面我们来一个一个理解antd-tools这里面的工具有什么作用</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckrd88uxt0001hf677d399iij","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrd8cug6000bhf672fwgaq9a"},{"post_id":"ckrd88uxt0001hf677d399iij","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrd8cug6000chf675gab65ys"},{"post_id":"ckrd88uxr0000hf673xu3hgyk","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrd8cug6000dhf67f1d9ekke"},{"post_id":"ckrd88uxr0000hf673xu3hgyk","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrd8cug6000ehf671juffz0a"},{"post_id":"ckred61r10003iu67buva19bf","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrenm75l0001d4v78c7i5cyc"},{"post_id":"ckred61r10003iu67buva19bf","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrenm75l0002d4v707shgfnl"},{"post_id":"ckred61r10003iu67buva19bf","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrenm75l0003d4v7gwq8cleo"},{"post_id":"ckrealjgl0000iu67dd6j2cmv","tag_id":"ckrenm75t0004d4v7bhe3awjh","_id":"ckrenm75u0006d4v7230tb5vs"},{"post_id":"ckrealjgl0000iu67dd6j2cmv","tag_id":"ckrenm75u0005d4v7ayxv70bk","_id":"ckrenm75u0007d4v76uy35x7w"},{"post_id":"ckrenn7vb000078v79hji3hcz","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrenn7vf000178v76vlp7m9k"},{"post_id":"ckrenn7vb000078v79hji3hcz","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrenn7vf000278v7c50bf9ut"},{"post_id":"ckrenn7vb000078v79hji3hcz","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrenn7vf000378v7eqc5ejqm"}],"Tag":[{"name":"AntDesignVue源码学习","_id":"ckrd78pel0000ec67bxeyawkt"},{"name":"AntDesignVue源码学习,前端","_id":"ckrd88uxu0002hf67f6nxgefh"},{"name":"AntDesignVue源码学习 前端","_id":"ckrd8bj6p0005hf6729vj05d3"},{"name":"前端","_id":"ckrd8cug40009hf67cyw56dbz"},{"name":"服务器，记事","_id":"ckrealjgn0001iu67fesv4uz1"},{"name":"AntDesignVue源码学习，前端，node","_id":"ckred61r20004iu67guyp47qw"},{"name":"node","_id":"ckrenm75j0000d4v79yzgdij4"},{"name":"服务器","_id":"ckrenm75t0004d4v7bhe3awjh"},{"name":"记事","_id":"ckrenm75u0005d4v7ayxv70bk"}]}}