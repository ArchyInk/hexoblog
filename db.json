{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/pln/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/pln/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/pln/source/css/code.scss","path":"css/code.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/animation.scss","path":"css/animation.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/m.min.css","path":"css/m.min.css","modified":0,"renderable":1},{"_id":"themes/pln/source/css/footer.scss","path":"css/footer.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/m.min.css.map","path":"css/m.min.css.map","modified":0,"renderable":1},{"_id":"themes/pln/source/css/main.scss","path":"css/main.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/navigator.scss","path":"css/navigator.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/pager.scss","path":"css/pager.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/posts.scss","path":"css/posts.scss","modified":0,"renderable":1},{"_id":"themes/pln/source/css/toc.scss","path":"css/toc.scss","modified":0,"renderable":1},{"_id":"source/images/0721.jpg","path":"images/0721.jpg","modified":0,"renderable":0},{"_id":"source/images/0722_2.jpg","path":"images/0722_2.jpg","modified":0,"renderable":0},{"_id":"source/images/0722_1.jpg","path":"images/0722_1.jpg","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/0723_1.jpg","path":"images/0723_1.jpg","modified":0,"renderable":0},{"_id":"source/images/0723_2.jpg","path":"images/0723_2.jpg","modified":0,"renderable":0},{"_id":"source/images/0723_3.jpg","path":"images/0723_3.jpg","modified":0,"renderable":0},{"_id":"source/images/0723_4.jpg","path":"images/0723_4.jpg","modified":0,"renderable":0},{"_id":"source/images/0728_2.jpg","path":"images/0728_2.jpg","modified":0,"renderable":0},{"_id":"source/images/0728_1.jpg","path":"images/0728_1.jpg","modified":0,"renderable":0},{"_id":"source/images/0728_3.jpg","path":"images/0728_3.jpg","modified":0,"renderable":0},{"_id":"source/images/0728_4.jpg","path":"images/0728_4.jpg","modified":0,"renderable":0},{"_id":"source/images/0728_5.jpg","path":"images/0728_5.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1626850246761},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"99f9af2ef438c65fa3943dd954d5217b8d43f2f3","modified":1626850311588},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"public/2021/07/21/hello-world/index.html","hash":"5cd524dbef99ee2faea412db268034b97616fc2c","modified":1626851346381},{"_id":"public/archives/index.html","hash":"7626a5693a44b107984e53d64f62878701b82a75","modified":1627462957980},{"_id":"public/archives/2021/index.html","hash":"68d5adba4786a51d45c7fad5182f3992671d4556","modified":1627462957980},{"_id":"public/index.html","hash":"70f9ae994795707a365bc6725850c2609f421291","modified":1627462957980},{"_id":"public/archives/2021/07/index.html","hash":"a8a95a3e14e674a17d61b4f2b26af7f73cd4b1df","modified":1627462957980},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1626850928830},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1626850928830},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1626850928830},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1626850928830},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1626850928830},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1626850928830},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1626850928830},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1626850928830},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1626850928830},{"_id":"source/_posts/test-md.md","hash":"ea047322d9f8165f6238bdd4d978098a825438e7","modified":1626851098880},{"_id":"public/2021/07/21/test-md/index.html","hash":"a3831978c64402cb1bc63b05506bc084f22ab518","modified":1626851346381},{"_id":"source/_posts/0721.md","hash":"89df46599aa9a88009e9aa890dc291a231c7541c","modified":1626854277726},{"_id":"public/2021/07/21/0721/index.html","hash":"64831e0db9e28e4b18760f0ca1642f7b3683848b","modified":1626854982200},{"_id":"source/_posts/AntDesignVue源码学习（1）.md","hash":"51c00ddec8307459700ac58c018df47bf0ea3fab","modified":1626851241145},{"_id":"public/2021/07/21/AntDesignVue源码学习（1）/index.html","hash":"99606f7a43ab36353b98efdc09965f46cef4e8c9","modified":1626851247589},{"_id":"themes/pln/.all-contributorsrc","hash":"1f62791c168b72c30e7d5cc0d64df4f9807dc9cf","modified":1626851841373},{"_id":"themes/pln/.gitignore","hash":"b2bfa11a587b14a043ce5520249bbae2da638955","modified":1626851841373},{"_id":"themes/pln/_config.yml","hash":"2699dbe2c271dc8179de2124a683311c990885fc","modified":1626935097862},{"_id":"themes/pln/LICENSE","hash":"4d90003c868a47825f884e9cb5e1a98acb8c91ff","modified":1626851841373},{"_id":"themes/pln/README.md","hash":"405aaf7a43947d1f20da93432de36e0f4594376d","modified":1626851841374},{"_id":"themes/pln/README.zh.md","hash":"c8ac21353cb180127001dba3742a1d6ecce617de","modified":1626851841374},{"_id":"themes/pln/package-lock.json","hash":"8c803a254d1ca477cfec6b31dc35f24812563ccf","modified":1626851870132},{"_id":"themes/pln/languages/zh-CN.yml","hash":"0fde01776479a1a7a116606e384dce66e36820d6","modified":1626851841375},{"_id":"themes/pln/languages/en.yml","hash":"39c0b9ffdea8fc421510e149a1acf13a3a08aa52","modified":1626851841374},{"_id":"themes/pln/layout/index.ejs","hash":"b55f1fbdc86903181a8629c4f2960e45c9ac5c8d","modified":1626851841379},{"_id":"themes/pln/layout/layout.ejs","hash":"2b9b91fc1367673ccf315911811f74ccffeab113","modified":1626851841379},{"_id":"themes/pln/layout/post.ejs","hash":"5fd2ef2452aad199db13e704d4359207034b5fcd","modified":1626851841380},{"_id":"themes/pln/layout/page.ejs","hash":"21e4ec36b3de78f92d8afad2cd6c49bd86e4c97c","modified":1626851841380},{"_id":"themes/pln/layout/archive.ejs","hash":"73a10033d532e26fa9fcf24309c1e94a3c2d9112","modified":1626851841379},{"_id":"themes/pln/screenShots/index.md","hash":"06f59082e01b8083ad62b2c7331ef2d466742efe","modified":1626851841380},{"_id":"themes/pln/layout/_partial/article.ejs","hash":"35c9a07ae6d2d32c587c7f4d9bb1df36bb285c98","modified":1626851841376},{"_id":"themes/pln/layout/_partial/archive.ejs","hash":"709f97683665e844ee3c8d927999eb69de2d7982","modified":1626851841375},{"_id":"themes/pln/layout/_partial/footer.ejs","hash":"7626bc4ff7fb41239f87bba4a039482b259f7aab","modified":1627462951091},{"_id":"themes/pln/layout/_partial/navigator.ejs","hash":"7adb5d5088b4b0277985eaab82bd85a6ce66bed3","modified":1626851841377},{"_id":"themes/pln/layout/_partial/head.ejs","hash":"a58ecbbbea8afced7dddbf787e76e5848207758d","modified":1626851841376},{"_id":"themes/pln/layout/_partial/pagination.ejs","hash":"0e47f93657f6fa8d6e15512de0a01b42a3d279e3","modified":1626851841377},{"_id":"themes/pln/layout/_partial/search.ejs","hash":"2abd7b2eda6814eb19070d8a8af40f5f9a82589e","modified":1626851841379},{"_id":"themes/pln/layout/_partial/after_footer.ejs","hash":"a7cd60ac91486a117570327fe18b2fb03b1916b4","modified":1626851841375},{"_id":"themes/pln/source/js/search.js","hash":"47e0dac3d918daa3240610ecc3880169ffa6bb8c","modified":1626851841395},{"_id":"themes/pln/source/js/search.min.js","hash":"c494b0d8cc15a9e1beb6e9364775675e7f258604","modified":1626851841395},{"_id":"themes/pln/source/css/animation.scss","hash":"9cd401fea3e3289c9532aa99df0ad7e2e946c247","modified":1626851841392},{"_id":"themes/pln/source/css/footer.scss","hash":"ace718d27ff2792ca2b5795c0229993cbd153023","modified":1626851841392},{"_id":"themes/pln/source/css/m.min.css.map","hash":"686dbed556f1c2625b79f1b59f24bf20ba98ad60","modified":1626851841393},{"_id":"themes/pln/source/css/pager.scss","hash":"02d07e64c538b4bd2133a5a72b0d673bd075df18","modified":1626851841394},{"_id":"themes/pln/source/css/navigator.scss","hash":"f265e09551fec38fd2048605c938d61dadd737ff","modified":1626851841393},{"_id":"themes/pln/source/css/search.scss","hash":"90d2304c4f05076754a614d37807c83c3b3fcc29","modified":1626851841394},{"_id":"themes/pln/source/css/posts.scss","hash":"fd8608593da9632191e98b5c6c5cd2d3c6f10a2d","modified":1626851841394},{"_id":"themes/pln/source/css/toc.scss","hash":"411daab74373ef49cb581b676d76bcb16c44e44c","modified":1626851841394},{"_id":"themes/pln/layout/_partial/post/comment.ejs","hash":"33a1b01d6b896477b42f14ac6872c8af118891cc","modified":1626851841378},{"_id":"themes/pln/layout/_partial/post/meta.ejs","hash":"efff1d3d494f3cad9842780bb0d16efcaa1bdcaa","modified":1626851841378},{"_id":"themes/pln/layout/_partial/post/gallery.ejs","hash":"a778c47d9a4bffef90d21eb55a029bd19c7d140e","modified":1626851841378},{"_id":"themes/pln/layout/_partial/post/title.ejs","hash":"158ff7c7ed394b13cb66cc6753cb4b0774dacb7d","modified":1626851841378},{"_id":"themes/pln/source/css/code.scss","hash":"43f2062f512810e1bee8525329da6ace597d19a2","modified":1626851841392},{"_id":"themes/pln/screenShots/ver1.0-dropdown.jpg","hash":"f4d1ca29f532a8eaf88234263d5de706a7fb097c","modified":1626851841389},{"_id":"themes/pln/screenShots/ver1.0-tags.jpg","hash":"507cb86efaa632ed67b6fb4af4f137097f8ce5b7","modified":1626851841391},{"_id":"themes/pln/screenShots/ver1.0-article.jpg","hash":"43d6668b1ea6f8342c842c1b6cd46e848b351de9","modified":1626851841388},{"_id":"themes/pln/source/css/main.scss","hash":"00236029554e96aaad6f2af127b83c985d1275d0","modified":1626851841393},{"_id":"themes/pln/screenShots/ver0.9-index.jpg","hash":"b82c7d09b44adae132acff47037df5bfb7f48da1","modified":1626851841385},{"_id":"themes/pln/screenShots/ver0.9-tags.jpg","hash":"19ab2cf23beb1c3814968b616e52a9f44d4d939d","modified":1626851841386},{"_id":"themes/pln/screenShots/ver0.9-dropdown.jpg","hash":"07d6e84d99ff5960eea53657749c1ae642eb3fac","modified":1626851841383},{"_id":"themes/pln/screenShots/ver0.9-article.jpg","hash":"3877cf411b7ebc8eef73cddb38477f305eb2cdc9","modified":1626851841382},{"_id":"themes/pln/screenShots/ver1.0-index.jpg","hash":"502291f046e78d9f13cc77ec7a294f095b0f5f54","modified":1626851841390},{"_id":"themes/pln/source/css/m.min.css","hash":"b6a3407c3ca1c59b3299b12110aa8722c57da7ad","modified":1626851841392},{"_id":"public/tags/AntDesignVue源码学习/index.html","hash":"d914f2fc31eb0da3b8eb313bd3b9019cf44582d1","modified":1627462957980},{"_id":"public/css/code.scss","hash":"43f2062f512810e1bee8525329da6ace597d19a2","modified":1626854982200},{"_id":"public/css/animation.scss","hash":"9cd401fea3e3289c9532aa99df0ad7e2e946c247","modified":1626854982200},{"_id":"public/css/footer.scss","hash":"ace718d27ff2792ca2b5795c0229993cbd153023","modified":1626854982200},{"_id":"public/css/m.min.css.map","hash":"686dbed556f1c2625b79f1b59f24bf20ba98ad60","modified":1626854982200},{"_id":"public/css/main.scss","hash":"00236029554e96aaad6f2af127b83c985d1275d0","modified":1626854982200},{"_id":"public/css/navigator.scss","hash":"f265e09551fec38fd2048605c938d61dadd737ff","modified":1626854982200},{"_id":"public/css/pager.scss","hash":"02d07e64c538b4bd2133a5a72b0d673bd075df18","modified":1626854982200},{"_id":"public/css/posts.scss","hash":"fd8608593da9632191e98b5c6c5cd2d3c6f10a2d","modified":1626854982200},{"_id":"public/css/toc.scss","hash":"411daab74373ef49cb581b676d76bcb16c44e44c","modified":1626854982200},{"_id":"public/css/search.scss","hash":"90d2304c4f05076754a614d37807c83c3b3fcc29","modified":1626854982200},{"_id":"public/js/search.js","hash":"09ac1aaacb622b3a56697e2f7eb39c7d5aa6fa25","modified":1626854982200},{"_id":"public/js/search.min.js","hash":"c494b0d8cc15a9e1beb6e9364775675e7f258604","modified":1626854982200},{"_id":"public/css/m.min.css","hash":"c809bb17d2e29af545699acba5e10a556c3a0019","modified":1626854982200},{"_id":"source/_posts/colorful.md","hash":"3775b4f1064f837c2f8eba46632847b5312eb2a4","modified":1626856501265},{"_id":"source/_posts/start.md","hash":"59d0feacaba89946625cddb93bd67fa5d6a9b539","modified":1626856623586},{"_id":"source/images/0721.jpg","hash":"31e0447f595db7404469a2aa81ca7d861f0b1357","modified":1626856294706},{"_id":"source/favicon.ico","hash":"75a4cc26f5b64bb5e9e9a350dcdc80ae62b5a2a2","modified":1626934971263},{"_id":"source/_posts/commander.md","hash":"9c5b33cc62cd4289731f69dd4f65f50512e47762","modified":1626939635642},{"_id":"source/_posts/xmrig.md","hash":"2f608e7ce7949c15b5e495f628c565830cf42455","modified":1626941302467},{"_id":"source/images/0722_1.jpg","hash":"c987c5227a77f99c2eea30c20f917a13a6bd8674","modified":1626920721397},{"_id":"source/images/0722_2.jpg","hash":"3d8a6824275f9a02472ead87caf6fcc62d1b7cd5","modified":1626920718213},{"_id":"source/_posts/gulp.md","hash":"f48f672d52c4cc165baadb162d8096e0d2d5b4c4","modified":1626942640630},{"_id":"public/search.xml","hash":"c329217b41b40da61a219418fdd020ce2fdcefc1","modified":1627462299454},{"_id":"public/xmrig/index.html","hash":"cc7e5daa19573e585efabdbc9188074a7c6caf86","modified":1627462957980},{"_id":"public/colorful/index.html","hash":"725ac05d41f482ea8f368f5bfe2b168d788f431b","modified":1627462957980},{"_id":"public/start/index.html","hash":"2fbe329b379f39208e09bc6921516fb4a789a565","modified":1627462957980},{"_id":"public/tags/前端/index.html","hash":"77b95df4345a00b263f9aea1c3eaa71118052783","modified":1627462957980},{"_id":"public/tags/node/index.html","hash":"7822d0caa89b7de14d2ad4f66a52f3120f06d158","modified":1627462957980},{"_id":"public/tags/服务器/index.html","hash":"e9ff45840b75003e96d87038d7a3296d158c5a62","modified":1627462957980},{"_id":"public/commander/index.html","hash":"f7ed55369e6767fe2d8c476b01b1f395ca71c2af","modified":1627462957980},{"_id":"public/tags/记事/index.html","hash":"8f71613c3c1dc73e5c381f49d321552b92a7634c","modified":1627462957980},{"_id":"public/gulp/index.html","hash":"c3ae60f5b8889afb90a61d114f4057cf0b8cbc5c","modified":1627462957980},{"_id":"source/_posts/archy-ui-01.md","hash":"6c7ff04f6bd80bdc1899f26513e4150eb9f2498f","modified":1627461451422},{"_id":"source/_posts/antd-tools-4.md","hash":"85a07f9ec7b58744517d8ea4c06e5da7ebc92a81","modified":1627283648712},{"_id":"source/_posts/antd-tools-1.md","hash":"55f5298696f4f8937d437f0141b6c717d4f02696","modified":1627024780522},{"_id":"source/_posts/antd-tools-2.md","hash":"ad6f02d82fc99bb48a7b05c8310b1aca6f25939f","modified":1627028797870},{"_id":"source/_posts/nodejs-stream.md","hash":"60b51b72a3a0e409b25962baeb43781ffd85b195","modified":1627019135318},{"_id":"source/images/0723_2.jpg","hash":"65cac8eb64a451c8c51cc80da4d84ba8f87bc007","modified":1627009687411},{"_id":"source/images/0728_2.jpg","hash":"c4b112d030630f97c48d2fdf29fb57040459919b","modified":1627453585438},{"_id":"source/images/0728_1.jpg","hash":"7e111f9219e17a3a8079a42f198c9e2c452c76d7","modified":1627453612732},{"_id":"source/images/0728_3.jpg","hash":"0fe0ca042b6f40850ab9d8b667ea180f431562db","modified":1627453339054},{"_id":"source/images/0728_4.jpg","hash":"250647a3caa1c756e8bef412eec0fa101db62414","modified":1627461401168},{"_id":"source/images/0728_5.jpg","hash":"b8b56e11441fce52856cc2526ba74e2301ef665c","modified":1627461419079},{"_id":"source/images/0723_3.jpg","hash":"567e91203d3fdd74b079f7a109d495e6aadf0499","modified":1627010433540},{"_id":"source/images/0723_4.jpg","hash":"4bceb2d3d227765efbd4f1ccf1642bd4811c91f5","modified":1627028357515},{"_id":"source/images/0723_1.jpg","hash":"c936d54fa63613ea61eade6fa5100fa6832da887","modified":1627009149898},{"_id":"source/_posts/antd-tools-3.md","hash":"9d3b85142b1a0a00bea2ade0d3760377314265ec","modified":1627278496211},{"_id":"public/antd-tools-3/index.html","hash":"b99ff6a0937f7b5b79a551b808ddf66798c8e99a","modified":1627462957980},{"_id":"public/nodejs-stream/index.html","hash":"4a44227b4ef7febfcbcc68a5af0b1330760cb5cd","modified":1627462957980},{"_id":"public/archives/2021/page/2/index.html","hash":"675b6c8e7d280f0db2cbdec615d8bc028bb661b3","modified":1627462957980},{"_id":"public/archives/page/2/index.html","hash":"193da1fdf1ea329e84a118a222f784357bec197b","modified":1627462957980},{"_id":"public/archives/2021/07/page/2/index.html","hash":"84fb8a090a1720ad31a72c2444a7d2a9697b7111","modified":1627462957980},{"_id":"public/page/2/index.html","hash":"fe2b2e7cb6428f5f8343133f73c00c93c0dc889a","modified":1627462957980},{"_id":"public/tags/stream/index.html","hash":"1a9d97d1b2ceaa9383876f1d207cd077c019ff01","modified":1627462957980},{"_id":"public/tags/ArchyUI，前端/index.html","hash":"2c8635614be067ccd29d3274d31298b5574751a0","modified":1627462957980},{"_id":"public/tags/Ant-tools/index.html","hash":"a077144d7ed342ab6ce7b7b5d301df0f47b40604","modified":1627462957980},{"_id":"public/antd-tools-4/index.html","hash":"7604e412c87e9c191733c83d1893a213d08949b4","modified":1627462957980},{"_id":"public/archy-ui-01/index.html","hash":"cecfee57f42c80d6fabf0992b92b6f8c18856e5e","modified":1627462957980},{"_id":"public/antd-tools-2/index.html","hash":"379b81725455a20ca15aafa61fdb724ae8c49d41","modified":1627462957980},{"_id":"public/antd-tools-1/index.html","hash":"d9b11e0ff36c17bbab6237d17eaec8afec6532f5","modified":1627462957980},{"_id":"public/images/0723_2.jpg","hash":"65cac8eb64a451c8c51cc80da4d84ba8f87bc007","modified":1627462299454},{"_id":"public/images/0723_3.jpg","hash":"567e91203d3fdd74b079f7a109d495e6aadf0499","modified":1627462299454},{"_id":"public/images/0723_4.jpg","hash":"4bceb2d3d227765efbd4f1ccf1642bd4811c91f5","modified":1627462299454},{"_id":"public/images/0723_1.jpg","hash":"c936d54fa63613ea61eade6fa5100fa6832da887","modified":1627462299454},{"_id":"public/images/0728_2.jpg","hash":"c4b112d030630f97c48d2fdf29fb57040459919b","modified":1627462299454},{"_id":"public/images/0728_1.jpg","hash":"7e111f9219e17a3a8079a42f198c9e2c452c76d7","modified":1627462299454},{"_id":"public/images/0728_3.jpg","hash":"0fe0ca042b6f40850ab9d8b667ea180f431562db","modified":1627462299454},{"_id":"public/images/0728_4.jpg","hash":"250647a3caa1c756e8bef412eec0fa101db62414","modified":1627462299454},{"_id":"public/images/0728_5.jpg","hash":"b8b56e11441fce52856cc2526ba74e2301ef665c","modified":1627462299454}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"开始","date":"2021-07-21T07:03:52.000Z","_content":"\n最近开始想把自己工作常用的组件封装成一个组件库\n于是准备学习一下AntDesignVue的源码\n顺便巩固一下vue3的知识\n所以临时开了个Hexo博客\n记录一下自己学习的笔记\n\n顺便当个qq空间\n\n\n\n*#オリジナル Living with a hobby - くっか的插画*\n\n![#オリジナル Living with a hobby - くっか的插画](/images/0721.jpg)\n\n[AntDesignVue](https://github.com/vueComponent/ant-design-vue)\n[ArchyUI](https://github.com/ArchyInk/Archy-UI)\n[follow](https://github.com/ArchyInk/)","source":"_posts/start.md","raw":"---\ntitle: 开始\ndate: 2021-07-21 15:03:52\ntags: [AntDesignVue源码学习,前端]\n---\n\n最近开始想把自己工作常用的组件封装成一个组件库\n于是准备学习一下AntDesignVue的源码\n顺便巩固一下vue3的知识\n所以临时开了个Hexo博客\n记录一下自己学习的笔记\n\n顺便当个qq空间\n\n\n\n*#オリジナル Living with a hobby - くっか的插画*\n\n![#オリジナル Living with a hobby - くっか的插画](/images/0721.jpg)\n\n[AntDesignVue](https://github.com/vueComponent/ant-design-vue)\n[ArchyUI](https://github.com/ArchyInk/Archy-UI)\n[follow](https://github.com/ArchyInk/)","slug":"start","published":1,"updated":"2021-07-21T08:37:03.586Z","_id":"ckrd88uxr0000hf673xu3hgyk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近开始想把自己工作常用的组件封装成一个组件库<br>于是准备学习一下AntDesignVue的源码<br>顺便巩固一下vue3的知识<br>所以临时开了个Hexo博客<br>记录一下自己学习的笔记</p>\n<p>顺便当个qq空间</p>\n<p><em>#オリジナル Living with a hobby - くっか的插画</em></p>\n<p><img src=\"/images/0721.jpg\" alt=\"#オリジナル Living with a hobby - くっか的插画\"></p>\n<p><a href=\"https://github.com/vueComponent/ant-design-vue\">AntDesignVue</a><br><a href=\"https://github.com/ArchyInk/Archy-UI\">ArchyUI</a><br><a href=\"https://github.com/ArchyInk/\">follow</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近开始想把自己工作常用的组件封装成一个组件库<br>于是准备学习一下AntDesignVue的源码<br>顺便巩固一下vue3的知识<br>所以临时开了个Hexo博客<br>记录一下自己学习的笔记</p>\n<p>顺便当个qq空间</p>\n<p><em>#オリジナル Living with a hobby - くっか的插画</em></p>\n<p><img src=\"/images/0721.jpg\" alt=\"#オリジナル Living with a hobby - くっか的插画\"></p>\n<p><a href=\"https://github.com/vueComponent/ant-design-vue\">AntDesignVue</a><br><a href=\"https://github.com/ArchyInk/Archy-UI\">ArchyUI</a><br><a href=\"https://github.com/ArchyInk/\">follow</a></p>\n"},{"title":"colorful工具","date":"2021-07-21T07:04:58.000Z","_content":"\n### colorful\n\nantd-tools/cli/index.js里面有`require('colorful').colorful()`\n\nnpm里有介绍，是在终端里显示颜色的\n\n```javascript\nrequire('colorful').colorful()\nrequire('colorful').isatty = true;\n\nconsole.log('hello'.to.red.color);\n```\n\n终端显示就是红色的hello，具体用法暂时不去了解，但是很cool\n\n","source":"_posts/colorful.md","raw":"---\ntitle: colorful工具\ndate: 2021-07-21 15:04:58\ntags: [AntDesignVue源码学习,前端]\n---\n\n### colorful\n\nantd-tools/cli/index.js里面有`require('colorful').colorful()`\n\nnpm里有介绍，是在终端里显示颜色的\n\n```javascript\nrequire('colorful').colorful()\nrequire('colorful').isatty = true;\n\nconsole.log('hello'.to.red.color);\n```\n\n终端显示就是红色的hello，具体用法暂时不去了解，但是很cool\n\n","slug":"colorful","published":1,"updated":"2021-07-21T08:35:01.265Z","_id":"ckrd88uxt0001hf677d399iij","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"colorful\"><a href=\"#colorful\" class=\"headerlink\" title=\"colorful\"></a>colorful</h3><p>antd-tools/cli/index.js里面有<code>require(&#39;colorful&#39;).colorful()</code></p>\n<p>npm里有介绍，是在终端里显示颜色的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).colorful()</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).isatty = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>.to.red.color);</span><br></pre></td></tr></table></figure>\n\n<p>终端显示就是红色的hello，具体用法暂时不去了解，但是很cool</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"colorful\"><a href=\"#colorful\" class=\"headerlink\" title=\"colorful\"></a>colorful</h3><p>antd-tools/cli/index.js里面有<code>require(&#39;colorful&#39;).colorful()</code></p>\n<p>npm里有介绍，是在终端里显示颜色的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).colorful()</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;colorful&#x27;</span>).isatty = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span>.to.red.color);</span><br></pre></td></tr></table></figure>\n\n<p>终端显示就是红色的hello，具体用法暂时不去了解，但是很cool</p>\n"},{"title":"xmrig挖矿病毒","date":"2021-07-22T02:04:03.000Z","_content":"\n昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%\n\n![阿里云控制台图片](/images/0722_1.jpg)\n\n心想可能中病毒了，好不容易连接上服务器，输入\n\n`[root@archyInk]# top` \n\n![大战过后，只有到网上找图了](/images/0722_2.jpg)\n发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。\n\n气死了，矿佬连我2g小水管都不放过。\n\nkill进程发现没啥用，会自动重启\n\n查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入`ll /proc/14454/exe`中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。\n\n于是我直接把这个文件夹`rm -rf`了，然后直接重启服务器\n\n\n\n果然病毒没有重启了\n\n花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。\n\n\n\n最后把skypool的自启动删除了，具体的我也是查的\n\n","source":"_posts/xmrig.md","raw":"---\ntitle: xmrig挖矿病毒\ndate: 2021-07-22 10:04:03\ntags: [服务器,记事]\n---\n\n昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%\n\n![阿里云控制台图片](/images/0722_1.jpg)\n\n心想可能中病毒了，好不容易连接上服务器，输入\n\n`[root@archyInk]# top` \n\n![大战过后，只有到网上找图了](/images/0722_2.jpg)\n发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。\n\n气死了，矿佬连我2g小水管都不放过。\n\nkill进程发现没啥用，会自动重启\n\n查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入`ll /proc/14454/exe`中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。\n\n于是我直接把这个文件夹`rm -rf`了，然后直接重启服务器\n\n\n\n果然病毒没有重启了\n\n花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。\n\n\n\n最后把skypool的自启动删除了，具体的我也是查的\n\n","slug":"xmrig","published":1,"updated":"2021-07-22T08:08:22.467Z","_id":"ckrealjgl0000iu67dd6j2cmv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%</p>\n<p><img src=\"/images/0722_1.jpg\" alt=\"阿里云控制台图片\"></p>\n<p>心想可能中病毒了，好不容易连接上服务器，输入</p>\n<p><code>[root@archyInk]# top</code> </p>\n<p><img src=\"/images/0722_2.jpg\" alt=\"大战过后，只有到网上找图了\"><br>发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。</p>\n<p>气死了，矿佬连我2g小水管都不放过。</p>\n<p>kill进程发现没啥用，会自动重启</p>\n<p>查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入<code>ll /proc/14454/exe</code>中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。</p>\n<p>于是我直接把这个文件夹<code>rm -rf</code>了，然后直接重启服务器</p>\n<p>果然病毒没有重启了</p>\n<p>花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。</p>\n<p>最后把skypool的自启动删除了，具体的我也是查的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%</p>\n<p><img src=\"/images/0722_1.jpg\" alt=\"阿里云控制台图片\"></p>\n<p>心想可能中病毒了，好不容易连接上服务器，输入</p>\n<p><code>[root@archyInk]# top</code> </p>\n<p><img src=\"/images/0722_2.jpg\" alt=\"大战过后，只有到网上找图了\"><br>发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。</p>\n<p>气死了，矿佬连我2g小水管都不放过。</p>\n<p>kill进程发现没啥用，会自动重启</p>\n<p>查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入<code>ll /proc/14454/exe</code>中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。</p>\n<p>于是我直接把这个文件夹<code>rm -rf</code>了，然后直接重启服务器</p>\n<p>果然病毒没有重启了</p>\n<p>花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。</p>\n<p>最后把skypool的自启动删除了，具体的我也是查的</p>\n"},{"title":"开发cli必备的commander工具","date":"2021-07-22T02:42:17.000Z","_content":"\n开发cli必备\n\n文档，竟然有中文，对我这种四级都没过得辣鸡太友好了\n\n[Commander.js](https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md)\n\n首先\n\n## Install\n\n```\nnpm install commander\n```\n\n## Declaring\n\n```\nconst { program } = require('commander');\n```\n\n## API\n\n### version\n\n```\nprogram.version('0.0.1').parse(process.argv);\n//console \n//node commander.js -V\n0.0.1\nprogram.version('0.0.1','-v,--version').parse(process.argv);\n//console \n//node commander.js -v or --version\n0.0.1\n```\n\n### option\n\nCommander 使用`.option()` 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（--后面接一个或多个单词），使用逗号、空格或`|`分隔。\n\n选项可以通过在`Command`对象上调用`.opts()`方法来获取。对于多个单词的长选项，使用驼峰法获取，例如`--template-engine`选项通过`program.opts().templateEngine`获取。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-d, --debug', 'debug')\n  .option('-s, --small', 'small')\n  .option('-p, --type <type>', 'type')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.debug) console.log(options)\nconsole.log('details:')\nif (options.small) console.log('- small')\nif (options.type) console.log(`- ${options.type}`)\n\n//node commander.js -h\nUsage: commander [options]\n\nOptions:\n  -v, --version      output the version number\n  -d, --debug        debug\n  -s, --small        small\n  -p, --type <type>  type\n  -h, --help         display help for command\n\n//node commander -d\n{debug:true}\ndetails:\n\n//node comander -d -s \n{debug:true,small:true}\ndetails:\n- smaill \n\n//node comander -d -s -t chinese\n{debug:true,small:true,type:chinese}\ndetails:\n- smaill \n- chinese\n\n```\n\n选项可以设置默认值\n\n```\n//选项可以设置一个默认值。\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n#### 其他的选项类型\n\n**取反选项**\n可以定义一个以`no-`开头的`boolean`型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带`no-`的选项，未定义对应不带`no-`的选项时，该选项的默认值会被置为true。\n\n如果已经定义了`--foo`，那么再定义`--no-foo`并不会改变它本来的默认值。可以为一个`boolean`类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-o, --option','show options')\n  .option('--no-gf', 'no object')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.option) console.log(options)\n//node commander -o\n{ gf: true, option: true }\n//node commander -o --no-gf\n{ gf: false, option: true }\n```\n\n**选项的参数使用方括号声明表示参数是可选参数（如 `--optional [value]`）。**\n\n该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。\n\n**选项的参数使用尖括号声明表示参数是必填参数（如 `--optional <value>`）。**\n\n必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与`.option`一致。\n\n**选项的参数使用...前缀表示参数是变长参数（如`--optional <...value>`)。**\n\n在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或--开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过`--`标记当前命令的结束。\n\n**其他选项配置**\n\n大多数情况下，选项均可通过`.option()`方法添加。但对某些不常见的用例，也可以直接构造`Option`对象，对选项进行更详尽的配置。\n\n```\nconst { program, Option } = require('commander')\n\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(\n    new Option('-t, --timeout <delay>', 'timeout in seconds').default(\n      60,\n      'one minute'\n    )\n  )\n  .addOption(\n    new Option('-d, --drink <size>', 'drink size').choices([\n      'small',\n      'medium',\n      'large',\n    ])\n  )\nprogram.parse()\nconsole.log('Options: ', program.opts());\n\n//node commander --help\nUsage: commander [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n  \n//node commander -s\nOptions:  { timeout: 60, secret: true }\n\n//node commander -d big\nerror: option '-d, --drink <size>' argument 'big' is invalid. Allowed choices are small, medium, large.\n```\n\n**自定义选项处理**\n\n选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。\n\n自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。\n\n\n\n**有点多，时间原因不每一个都看完了**\n\n**把常用的看了理解了**\n\n**总不能一次性把所有知识全学完吧**\n\n","source":"_posts/commander.md","raw":"---\ntitle: 开发cli必备的commander工具\ndate: 2021-07-22 10:42:17\ntags: [AntDesignVue源码学习,前端,node]\n---\n\n开发cli必备\n\n文档，竟然有中文，对我这种四级都没过得辣鸡太友好了\n\n[Commander.js](https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md)\n\n首先\n\n## Install\n\n```\nnpm install commander\n```\n\n## Declaring\n\n```\nconst { program } = require('commander');\n```\n\n## API\n\n### version\n\n```\nprogram.version('0.0.1').parse(process.argv);\n//console \n//node commander.js -V\n0.0.1\nprogram.version('0.0.1','-v,--version').parse(process.argv);\n//console \n//node commander.js -v or --version\n0.0.1\n```\n\n### option\n\nCommander 使用`.option()` 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（--后面接一个或多个单词），使用逗号、空格或`|`分隔。\n\n选项可以通过在`Command`对象上调用`.opts()`方法来获取。对于多个单词的长选项，使用驼峰法获取，例如`--template-engine`选项通过`program.opts().templateEngine`获取。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-d, --debug', 'debug')\n  .option('-s, --small', 'small')\n  .option('-p, --type <type>', 'type')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.debug) console.log(options)\nconsole.log('details:')\nif (options.small) console.log('- small')\nif (options.type) console.log(`- ${options.type}`)\n\n//node commander.js -h\nUsage: commander [options]\n\nOptions:\n  -v, --version      output the version number\n  -d, --debug        debug\n  -s, --small        small\n  -p, --type <type>  type\n  -h, --help         display help for command\n\n//node commander -d\n{debug:true}\ndetails:\n\n//node comander -d -s \n{debug:true,small:true}\ndetails:\n- smaill \n\n//node comander -d -s -t chinese\n{debug:true,small:true,type:chinese}\ndetails:\n- smaill \n- chinese\n\n```\n\n选项可以设置默认值\n\n```\n//选项可以设置一个默认值。\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n#### 其他的选项类型\n\n**取反选项**\n可以定义一个以`no-`开头的`boolean`型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带`no-`的选项，未定义对应不带`no-`的选项时，该选项的默认值会被置为true。\n\n如果已经定义了`--foo`，那么再定义`--no-foo`并不会改变它本来的默认值。可以为一个`boolean`类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。\n\n```\nprogram\n  .version('0.0.1', '-v, --version')\n  .option('-o, --option','show options')\n  .option('--no-gf', 'no object')\n\nprogram.parse(process.argv)\n\nconst options = program.opts()\nif (options.option) console.log(options)\n//node commander -o\n{ gf: true, option: true }\n//node commander -o --no-gf\n{ gf: false, option: true }\n```\n\n**选项的参数使用方括号声明表示参数是可选参数（如 `--optional [value]`）。**\n\n该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。\n\n**选项的参数使用尖括号声明表示参数是必填参数（如 `--optional <value>`）。**\n\n必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与`.option`一致。\n\n**选项的参数使用...前缀表示参数是变长参数（如`--optional <...value>`)。**\n\n在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或--开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过`--`标记当前命令的结束。\n\n**其他选项配置**\n\n大多数情况下，选项均可通过`.option()`方法添加。但对某些不常见的用例，也可以直接构造`Option`对象，对选项进行更详尽的配置。\n\n```\nconst { program, Option } = require('commander')\n\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(\n    new Option('-t, --timeout <delay>', 'timeout in seconds').default(\n      60,\n      'one minute'\n    )\n  )\n  .addOption(\n    new Option('-d, --drink <size>', 'drink size').choices([\n      'small',\n      'medium',\n      'large',\n    ])\n  )\nprogram.parse()\nconsole.log('Options: ', program.opts());\n\n//node commander --help\nUsage: commander [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n  \n//node commander -s\nOptions:  { timeout: 60, secret: true }\n\n//node commander -d big\nerror: option '-d, --drink <size>' argument 'big' is invalid. Allowed choices are small, medium, large.\n```\n\n**自定义选项处理**\n\n选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。\n\n自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。\n\n\n\n**有点多，时间原因不每一个都看完了**\n\n**把常用的看了理解了**\n\n**总不能一次性把所有知识全学完吧**\n\n","slug":"commander","published":1,"updated":"2021-07-22T07:40:35.642Z","_id":"ckred61r10003iu67buva19bf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>开发cli必备</p>\n<p>文档，竟然有中文，对我这种四级都没过得辣鸡太友好了</p>\n<p><a href=\"https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md\">Commander.js</a></p>\n<p>首先</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Declaring\"><a href=\"#Declaring\" class=\"headerlink\" title=\"Declaring\"></a>Declaring</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program &#125; = require(&#x27;commander&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.version(&#x27;0.0.1&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -V</span><br><span class=\"line\">0.0.1</span><br><span class=\"line\">program.version(&#x27;0.0.1&#x27;,&#x27;-v,--version&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -v or --version</span><br><span class=\"line\">0.0.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"option\"><a href=\"#option\" class=\"headerlink\" title=\"option\"></a>option</h3><p>Commander 使用<code>.option()</code> 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（–后面接一个或多个单词），使用逗号、空格或<code>|</code>分隔。</p>\n<p>选项可以通过在<code>Command</code>对象上调用<code>.opts()</code>方法来获取。对于多个单词的长选项，使用驼峰法获取，例如<code>--template-engine</code>选项通过<code>program.opts().templateEngine</code>获取。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-d, --debug&#x27;, &#x27;debug&#x27;)</span><br><span class=\"line\">  .option(&#x27;-s, --small&#x27;, &#x27;small&#x27;)</span><br><span class=\"line\">  .option(&#x27;-p, --type &lt;type&gt;&#x27;, &#x27;type&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.debug) console.log(options)</span><br><span class=\"line\">console.log(&#x27;details:&#x27;)</span><br><span class=\"line\">if (options.small) console.log(&#x27;- small&#x27;)</span><br><span class=\"line\">if (options.type) console.log(`- $&#123;options.type&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander.js -h</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -v, --version      output the version number</span><br><span class=\"line\">  -d, --debug        debug</span><br><span class=\"line\">  -s, --small        small</span><br><span class=\"line\">  -p, --type &lt;type&gt;  type</span><br><span class=\"line\">  -h, --help         display help for command</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d</span><br><span class=\"line\">&#123;debug:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s </span><br><span class=\"line\">&#123;debug:true,small:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s -t chinese</span><br><span class=\"line\">&#123;debug:true,small:true,type:chinese&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\">- chinese</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选项可以设置默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选项可以设置一个默认值。</span><br><span class=\"line\">program</span><br><span class=\"line\">  .option(&#x27;-c, --cheese &lt;type&gt;&#x27;, &#x27;add the specified type of cheese&#x27;, &#x27;blue&#x27;);</span><br><span class=\"line\">program.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(`cheese: $&#123;program.opts().cheese&#125;`);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他的选项类型\"><a href=\"#其他的选项类型\" class=\"headerlink\" title=\"其他的选项类型\"></a>其他的选项类型</h4><p><strong>取反选项</strong><br>可以定义一个以<code>no-</code>开头的<code>boolean</code>型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带<code>no-</code>的选项，未定义对应不带<code>no-</code>的选项时，该选项的默认值会被置为true。</p>\n<p>如果已经定义了<code>--foo</code>，那么再定义<code>--no-foo</code>并不会改变它本来的默认值。可以为一个<code>boolean</code>类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-o, --option&#x27;,&#x27;show options&#x27;)</span><br><span class=\"line\">  .option(&#x27;--no-gf&#x27;, &#x27;no object&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.option) console.log(options)</span><br><span class=\"line\">//node commander -o</span><br><span class=\"line\">&#123; gf: true, option: true &#125;</span><br><span class=\"line\">//node commander -o --no-gf</span><br><span class=\"line\">&#123; gf: false, option: true &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>选项的参数使用方括号声明表示参数是可选参数（如 <code>--optional [value]</code>）。</strong></p>\n<p>该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。</p>\n<p><strong>选项的参数使用尖括号声明表示参数是必填参数（如 <code>--optional &lt;value&gt;</code>）。</strong></p>\n<p>必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与<code>.option</code>一致。</p>\n<p><strong>选项的参数使用…前缀表示参数是变长参数（如<code>--optional &lt;...value&gt;</code>)。</strong></p>\n<p>在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或–开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过<code>--</code>标记当前命令的结束。</p>\n<p><strong>其他选项配置</strong></p>\n<p>大多数情况下，选项均可通过<code>.option()</code>方法添加。但对某些不常见的用例，也可以直接构造<code>Option</code>对象，对选项进行更详尽的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program, Option &#125; = require(&#x27;commander&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .addOption(new Option(&#x27;-s, --secret&#x27;).hideHelp())</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-t, --timeout &lt;delay&gt;&#x27;, &#x27;timeout in seconds&#x27;).default(</span><br><span class=\"line\">      60,</span><br><span class=\"line\">      &#x27;one minute&#x27;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-d, --drink &lt;size&gt;&#x27;, &#x27;drink size&#x27;).choices([</span><br><span class=\"line\">      &#x27;small&#x27;,</span><br><span class=\"line\">      &#x27;medium&#x27;,</span><br><span class=\"line\">      &#x27;large&#x27;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  )</span><br><span class=\"line\">program.parse()</span><br><span class=\"line\">console.log(&#x27;Options: &#x27;, program.opts());</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander --help</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -t, --timeout &lt;delay&gt;  timeout in seconds (default: one minute)</span><br><span class=\"line\">  -d, --drink &lt;size&gt;     drink size (choices: &quot;small&quot;, &quot;medium&quot;, &quot;large&quot;)</span><br><span class=\"line\">  -h, --help             display help for command</span><br><span class=\"line\">  </span><br><span class=\"line\">//node commander -s</span><br><span class=\"line\">Options:  &#123; timeout: 60, secret: true &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d big</span><br><span class=\"line\">error: option &#x27;-d, --drink &lt;size&gt;&#x27; argument &#x27;big&#x27; is invalid. Allowed choices are small, medium, large.</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义选项处理</strong></p>\n<p>选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。</p>\n<p>自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。</p>\n<p><strong>有点多，时间原因不每一个都看完了</strong></p>\n<p><strong>把常用的看了理解了</strong></p>\n<p><strong>总不能一次性把所有知识全学完吧</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>开发cli必备</p>\n<p>文档，竟然有中文，对我这种四级都没过得辣鸡太友好了</p>\n<p><a href=\"https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md\">Commander.js</a></p>\n<p>首先</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Declaring\"><a href=\"#Declaring\" class=\"headerlink\" title=\"Declaring\"></a>Declaring</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program &#125; = require(&#x27;commander&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program.version(&#x27;0.0.1&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -V</span><br><span class=\"line\">0.0.1</span><br><span class=\"line\">program.version(&#x27;0.0.1&#x27;,&#x27;-v,--version&#x27;).parse(process.argv);</span><br><span class=\"line\">//console </span><br><span class=\"line\">//node commander.js -v or --version</span><br><span class=\"line\">0.0.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"option\"><a href=\"#option\" class=\"headerlink\" title=\"option\"></a>option</h3><p>Commander 使用<code>.option()</code> 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（–后面接一个或多个单词），使用逗号、空格或<code>|</code>分隔。</p>\n<p>选项可以通过在<code>Command</code>对象上调用<code>.opts()</code>方法来获取。对于多个单词的长选项，使用驼峰法获取，例如<code>--template-engine</code>选项通过<code>program.opts().templateEngine</code>获取。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-d, --debug&#x27;, &#x27;debug&#x27;)</span><br><span class=\"line\">  .option(&#x27;-s, --small&#x27;, &#x27;small&#x27;)</span><br><span class=\"line\">  .option(&#x27;-p, --type &lt;type&gt;&#x27;, &#x27;type&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.debug) console.log(options)</span><br><span class=\"line\">console.log(&#x27;details:&#x27;)</span><br><span class=\"line\">if (options.small) console.log(&#x27;- small&#x27;)</span><br><span class=\"line\">if (options.type) console.log(`- $&#123;options.type&#125;`)</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander.js -h</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -v, --version      output the version number</span><br><span class=\"line\">  -d, --debug        debug</span><br><span class=\"line\">  -s, --small        small</span><br><span class=\"line\">  -p, --type &lt;type&gt;  type</span><br><span class=\"line\">  -h, --help         display help for command</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d</span><br><span class=\"line\">&#123;debug:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s </span><br><span class=\"line\">&#123;debug:true,small:true&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\"></span><br><span class=\"line\">//node comander -d -s -t chinese</span><br><span class=\"line\">&#123;debug:true,small:true,type:chinese&#125;</span><br><span class=\"line\">details:</span><br><span class=\"line\">- smaill </span><br><span class=\"line\">- chinese</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选项可以设置默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选项可以设置一个默认值。</span><br><span class=\"line\">program</span><br><span class=\"line\">  .option(&#x27;-c, --cheese &lt;type&gt;&#x27;, &#x27;add the specified type of cheese&#x27;, &#x27;blue&#x27;);</span><br><span class=\"line\">program.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(`cheese: $&#123;program.opts().cheese&#125;`);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他的选项类型\"><a href=\"#其他的选项类型\" class=\"headerlink\" title=\"其他的选项类型\"></a>其他的选项类型</h4><p><strong>取反选项</strong><br>可以定义一个以<code>no-</code>开头的<code>boolean</code>型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带<code>no-</code>的选项，未定义对应不带<code>no-</code>的选项时，该选项的默认值会被置为true。</p>\n<p>如果已经定义了<code>--foo</code>，那么再定义<code>--no-foo</code>并不会改变它本来的默认值。可以为一个<code>boolean</code>类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class=\"line\">  .option(&#x27;-o, --option&#x27;,&#x27;show options&#x27;)</span><br><span class=\"line\">  .option(&#x27;--no-gf&#x27;, &#x27;no object&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const options = program.opts()</span><br><span class=\"line\">if (options.option) console.log(options)</span><br><span class=\"line\">//node commander -o</span><br><span class=\"line\">&#123; gf: true, option: true &#125;</span><br><span class=\"line\">//node commander -o --no-gf</span><br><span class=\"line\">&#123; gf: false, option: true &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>选项的参数使用方括号声明表示参数是可选参数（如 <code>--optional [value]</code>）。</strong></p>\n<p>该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。</p>\n<p><strong>选项的参数使用尖括号声明表示参数是必填参数（如 <code>--optional &lt;value&gt;</code>）。</strong></p>\n<p>必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与<code>.option</code>一致。</p>\n<p><strong>选项的参数使用…前缀表示参数是变长参数（如<code>--optional &lt;...value&gt;</code>)。</strong></p>\n<p>在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或–开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过<code>--</code>标记当前命令的结束。</p>\n<p><strong>其他选项配置</strong></p>\n<p>大多数情况下，选项均可通过<code>.option()</code>方法添加。但对某些不常见的用例，也可以直接构造<code>Option</code>对象，对选项进行更详尽的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; program, Option &#125; = require(&#x27;commander&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .addOption(new Option(&#x27;-s, --secret&#x27;).hideHelp())</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-t, --timeout &lt;delay&gt;&#x27;, &#x27;timeout in seconds&#x27;).default(</span><br><span class=\"line\">      60,</span><br><span class=\"line\">      &#x27;one minute&#x27;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .addOption(</span><br><span class=\"line\">    new Option(&#x27;-d, --drink &lt;size&gt;&#x27;, &#x27;drink size&#x27;).choices([</span><br><span class=\"line\">      &#x27;small&#x27;,</span><br><span class=\"line\">      &#x27;medium&#x27;,</span><br><span class=\"line\">      &#x27;large&#x27;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  )</span><br><span class=\"line\">program.parse()</span><br><span class=\"line\">console.log(&#x27;Options: &#x27;, program.opts());</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander --help</span><br><span class=\"line\">Usage: commander [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -t, --timeout &lt;delay&gt;  timeout in seconds (default: one minute)</span><br><span class=\"line\">  -d, --drink &lt;size&gt;     drink size (choices: &quot;small&quot;, &quot;medium&quot;, &quot;large&quot;)</span><br><span class=\"line\">  -h, --help             display help for command</span><br><span class=\"line\">  </span><br><span class=\"line\">//node commander -s</span><br><span class=\"line\">Options:  &#123; timeout: 60, secret: true &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//node commander -d big</span><br><span class=\"line\">error: option &#x27;-d, --drink &lt;size&gt;&#x27; argument &#x27;big&#x27; is invalid. Allowed choices are small, medium, large.</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义选项处理</strong></p>\n<p>选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。</p>\n<p>自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。</p>\n<p><strong>有点多，时间原因不每一个都看完了</strong></p>\n<p><strong>把常用的看了理解了</strong></p>\n<p><strong>总不能一次性把所有知识全学完吧</strong></p>\n"},{"title":"antd-tools中的gulp","date":"2021-07-22T07:14:23.000Z","_content":"\n首先三连\n\n`npm install --global gulp-cli`\n\n`npm install --save-dev gulp`\n\n`gulp --version`\n\n```\n>gulp --version\nCLI version: 2.3.0\nLocal version: 4.0.2\n```\n\n\n\n**测试**\n\n创建gulpfile.js文件\n\n```\nfunction defaultTask(cb) {\n  // place code for your default task here\n  cb();\n}\n\nexports.default = defaultTask\n```\n\n在该目录下\n\n`>gulp`\n\n如需运行多个任务（task），可以执行 `gulp <task> <othertask>`\n\n```\n>gulp\n[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js\n[14:31:47] Starting 'default'...\n[14:31:47] Finished 'default' after 1.69 ms\n```\n\n**gulp和webpack的区别**\n\ngulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。\n\nwebpack注重模块化开发，把所有的文件模块化。\n\n懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了\n\n**runTask**\n\nAnt Design Vue里面有这样一个方法\n\n```\nfunction runTask(toRun) {\n  const metadata = { task: toRun };\n  // Gulp >= 4.0.0 (doesn't support events)\n  const taskInstance = gulp.task(toRun);\n  if (taskInstance === undefined) {\n    gulp.emit('task_not_found', metadata);\n    return;\n  }\n  const start = process.hrtime();\n  gulp.emit('task_start', metadata);\n  try {\n    taskInstance.apply(gulp);\n    metadata.hrDuration = process.hrtime(start);\n    gulp.emit('task_stop', metadata);\n    gulp.emit('stop');\n  } catch (err) {\n    err.hrDuration = process.hrtime(start);\n    err.task = metadata.task;\n    gulp.emit('task_err', err);\n  }\n}\n```\n\n函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行\n\n所以后面我们来一个一个理解antd-tools这里面的工具有什么作用\n\n","source":"_posts/gulp.md","raw":"---\ntitle: antd-tools中的gulp\ndate: 2021-07-22 15:14:23\ntags: [AntDesignVue源码学习,前端,node]\n---\n\n首先三连\n\n`npm install --global gulp-cli`\n\n`npm install --save-dev gulp`\n\n`gulp --version`\n\n```\n>gulp --version\nCLI version: 2.3.0\nLocal version: 4.0.2\n```\n\n\n\n**测试**\n\n创建gulpfile.js文件\n\n```\nfunction defaultTask(cb) {\n  // place code for your default task here\n  cb();\n}\n\nexports.default = defaultTask\n```\n\n在该目录下\n\n`>gulp`\n\n如需运行多个任务（task），可以执行 `gulp <task> <othertask>`\n\n```\n>gulp\n[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js\n[14:31:47] Starting 'default'...\n[14:31:47] Finished 'default' after 1.69 ms\n```\n\n**gulp和webpack的区别**\n\ngulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。\n\nwebpack注重模块化开发，把所有的文件模块化。\n\n懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了\n\n**runTask**\n\nAnt Design Vue里面有这样一个方法\n\n```\nfunction runTask(toRun) {\n  const metadata = { task: toRun };\n  // Gulp >= 4.0.0 (doesn't support events)\n  const taskInstance = gulp.task(toRun);\n  if (taskInstance === undefined) {\n    gulp.emit('task_not_found', metadata);\n    return;\n  }\n  const start = process.hrtime();\n  gulp.emit('task_start', metadata);\n  try {\n    taskInstance.apply(gulp);\n    metadata.hrDuration = process.hrtime(start);\n    gulp.emit('task_stop', metadata);\n    gulp.emit('stop');\n  } catch (err) {\n    err.hrDuration = process.hrtime(start);\n    err.task = metadata.task;\n    gulp.emit('task_err', err);\n  }\n}\n```\n\n函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行\n\n所以后面我们来一个一个理解antd-tools这里面的工具有什么作用\n\n","slug":"gulp","published":1,"updated":"2021-07-22T08:30:40.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrenn7vb000078v79hji3hcz","content":"<p>首先三连</p>\n<p><code>npm install --global gulp-cli</code></p>\n<p><code>npm install --save-dev gulp</code></p>\n<p><code>gulp --version</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp --version</span><br><span class=\"line\">CLI version: 2.3.0</span><br><span class=\"line\">Local version: 4.0.2</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>测试</strong></p>\n<p>创建gulpfile.js文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function defaultTask(cb) &#123;</span><br><span class=\"line\">  // place code for your default task here</span><br><span class=\"line\">  cb();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.default = defaultTask</span><br></pre></td></tr></table></figure>\n\n<p>在该目录下</p>\n<p><code>&gt;gulp</code></p>\n<p>如需运行多个任务（task），可以执行 <code>gulp &lt;task&gt; &lt;othertask&gt;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp</span><br><span class=\"line\">[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js</span><br><span class=\"line\">[14:31:47] Starting &#x27;default&#x27;...</span><br><span class=\"line\">[14:31:47] Finished &#x27;default&#x27; after 1.69 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>gulp和webpack的区别</strong></p>\n<p>gulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。</p>\n<p>webpack注重模块化开发，把所有的文件模块化。</p>\n<p>懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了</p>\n<p><strong>runTask</strong></p>\n<p>Ant Design Vue里面有这样一个方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function runTask(toRun) &#123;</span><br><span class=\"line\">  const metadata = &#123; task: toRun &#125;;</span><br><span class=\"line\">  // Gulp &gt;= 4.0.0 (doesn&#x27;t support events)</span><br><span class=\"line\">  const taskInstance = gulp.task(toRun);</span><br><span class=\"line\">  if (taskInstance === undefined) &#123;</span><br><span class=\"line\">    gulp.emit(&#x27;task_not_found&#x27;, metadata);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const start = process.hrtime();</span><br><span class=\"line\">  gulp.emit(&#x27;task_start&#x27;, metadata);</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    taskInstance.apply(gulp);</span><br><span class=\"line\">    metadata.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    gulp.emit(&#x27;task_stop&#x27;, metadata);</span><br><span class=\"line\">    gulp.emit(&#x27;stop&#x27;);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    err.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    err.task = metadata.task;</span><br><span class=\"line\">    gulp.emit(&#x27;task_err&#x27;, err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行</p>\n<p>所以后面我们来一个一个理解antd-tools这里面的工具有什么作用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先三连</p>\n<p><code>npm install --global gulp-cli</code></p>\n<p><code>npm install --save-dev gulp</code></p>\n<p><code>gulp --version</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp --version</span><br><span class=\"line\">CLI version: 2.3.0</span><br><span class=\"line\">Local version: 4.0.2</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>测试</strong></p>\n<p>创建gulpfile.js文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function defaultTask(cb) &#123;</span><br><span class=\"line\">  // place code for your default task here</span><br><span class=\"line\">  cb();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.default = defaultTask</span><br></pre></td></tr></table></figure>\n\n<p>在该目录下</p>\n<p><code>&gt;gulp</code></p>\n<p>如需运行多个任务（task），可以执行 <code>gulp &lt;task&gt; &lt;othertask&gt;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;gulp</span><br><span class=\"line\">[14:31:47] Using gulpfile D:\\sgd_cd_pro\\test\\node\\gulpfile.js</span><br><span class=\"line\">[14:31:47] Starting &#x27;default&#x27;...</span><br><span class=\"line\">[14:31:47] Finished &#x27;default&#x27; after 1.69 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>gulp和webpack的区别</strong></p>\n<p>gulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。</p>\n<p>webpack注重模块化开发，把所有的文件模块化。</p>\n<p>懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了</p>\n<p><strong>runTask</strong></p>\n<p>Ant Design Vue里面有这样一个方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function runTask(toRun) &#123;</span><br><span class=\"line\">  const metadata = &#123; task: toRun &#125;;</span><br><span class=\"line\">  // Gulp &gt;= 4.0.0 (doesn&#x27;t support events)</span><br><span class=\"line\">  const taskInstance = gulp.task(toRun);</span><br><span class=\"line\">  if (taskInstance === undefined) &#123;</span><br><span class=\"line\">    gulp.emit(&#x27;task_not_found&#x27;, metadata);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const start = process.hrtime();</span><br><span class=\"line\">  gulp.emit(&#x27;task_start&#x27;, metadata);</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    taskInstance.apply(gulp);</span><br><span class=\"line\">    metadata.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    gulp.emit(&#x27;task_stop&#x27;, metadata);</span><br><span class=\"line\">    gulp.emit(&#x27;stop&#x27;);</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    err.hrDuration = process.hrtime(start);</span><br><span class=\"line\">    err.task = metadata.task;</span><br><span class=\"line\">    gulp.emit(&#x27;task_err&#x27;, err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行</p>\n<p>所以后面我们来一个一个理解antd-tools这里面的工具有什么作用</p>\n"},{"title":"antd-tools详解（一）","date":"2021-07-22T08:44:24.000Z","_content":"\n首先看看antd-design-vue根目录中的[package.json](https://github.com/vueComponent/ant-design-vue/blob/next/package.json)\n\n从中可以看到antd-tools里面使用的工具有哪些\n\n```\n\"compile\": \"node antd-tools/cli/run.js compile\",\n\n\"generator-webtypes\": \"tsc -p antd-tools/generator-types/tsconfig.json && node antd-tools/generator-types/index.js\",\n\n\"pub\": \"node --max_old_space_size=8192 antd-tools/cli/run.js pub\",\n\n\"pub-with-ci\": \"node antd-tools/cli/run.js pub-with-ci\",\n\n\"prepublish\": \"node antd-tools/cli/run.js guard\",\n\n\"dist\": \"node --max_old_space_size=8192 antd-tools/cli/run.js dist\",\n```\n\n目前看就是这6个工具\n\n根据命令语义看\n\n```\ncompile 编译\ngenerator-webtypes 初始化\npub 发布 \npub-with-ci 在ci下pub（不懂） \nprepublish 预发布\ndist 打包\n```\n\n一个个看吧\n\n### compile\n\n在`antd-tools\\gulpfile.js`里能找到代码\n\n```\ngulp.task(\n  'compile',\n  gulp.series(gulp.parallel('compile-with-es', 'compile-with-lib'), done => {\n    done();\n  }),\n);\n```\n\n`gulp.series()`和`gulp.parallel()`是gulp中的组合任务，允许将多个独立的任务组合为一个更大的操作，`series()` 和 `parallel()` 可以互相嵌套至任意深度。如果需要让任务（task）按顺序执行，请使用 `series()` 方法。对于希望以最大并发来运行的任务（tasks），可以使用 `parallel()` 方法将它们组合起来。\n\n上面的意思就是创建一个名为`compile`的任务，这个任务是先执行并发的`compile-with-es`和`compile-with-lib`，然后执行回调。(这个回调貌似不是必要的？)\n\n然后我们再来看看`compile-with-es`和`compile-with-lib`\n\n##### compile-with-es\n\n```\ngulp.task('compile-with-es', done => {\n  console.log('[Parallel] Compile to es...');\n  compile(false).on('finish', done);\n});\n```\n\n##### compile-with-lib\n\n```\ngulp.task('compile-with-lib', done => {\n  console.log('[Parallel] Compile to js...');\n  compile().on('finish', done);\n});\n```\n\n看起来都是对`compile`的执行，然后来看看`compile`方法，也就是核心代码。\n\n##### compile\n\n```\nfunction compile(modules) {\n  rimraf.sync(modules !== false ? libDir : esDir);\n  const less = gulp\n    .src(['components/**/*.less'])\n    .pipe(\n      through2.obj(function (file, encoding, next) {\n        this.push(file.clone());\n        if (\n          file.path.match(/\\/style\\/index\\.less$/) ||\n          file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)\n        ) {\n          transformLess(file.path)\n            .then(css => {\n              file.contents = Buffer.from(css);\n              file.path = file.path.replace(/\\.less$/, '.css');\n              this.push(file);\n              next();\n            })\n            .catch(e => {\n              console.error(e);\n            });\n        } else {\n          next();\n        }\n      }),\n    )\n    .pipe(gulp.dest(modules === false ? esDir : libDir));\n  const assets = gulp\n    .src(['components/**/*.@(png|svg)'])\n    .pipe(gulp.dest(modules === false ? esDir : libDir));\n  let error = 0;\n  const source = [\n    'components/**/*.js',\n    'components/**/*.jsx',\n    'components/**/*.tsx',\n    'components/**/*.ts',\n    'typings/**/*.d.ts',\n    '!components/*/__tests__/*',\n  ];\n\n  const tsResult = gulp.src(source).pipe(\n    ts(tsConfig, {\n      error(e) {\n        tsDefaultReporter.error(e);\n        error = 1;\n      },\n      finish: tsDefaultReporter.finish,\n    }),\n  );\n\n  function check() {\n    if (error && !argv['ignore-error']) {\n      process.exit(1);\n    }\n  }\n\n  tsResult.on('finish', check);\n  tsResult.on('end', check);\n  const tsFilesStream = babelify(tsResult.js, modules);\n  const tsd = tsResult.dts.pipe(gulp.dest(modules === false ? esDir : libDir));\n  return merge2([less, tsFilesStream, tsd, assets]);\n}\n```\n\n---\n\n下班了，明天再来写           2021/7/22 17:22\n\n---\n\n继续            2021/7/23/ 10:09\n\n---\n\n*第一句就没看懂*\n\n*`rimraf.sync(modules !== false ? libDir : esDir);`*\n\n*rimraf是引入的插件`const rimraf = require('rimraf');`*\n\n*名字很奇怪*\n\n查了下是对rm -rf的包封装，那就不奇怪了\n\n那这句话就是对旧包的删除了\n\n不过编译的话第一步确实应该清理旧包，大意了，竟然没联想到\n\n\n\nless变量是一个较长的链式调用，得拉出来单独看看\n\n```\n const less = gulp\n    .src(['components/**/*.less'])\t\t\t\t    \n    .pipe(\t\t\t\t\t\t\t\t\t\t\t\n      through2.obj(function (file, encoding, next) {\n        this.push(file.clone());\n        if (\n          file.path.match(/\\/style\\/index\\.less$/) ||\n          file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)\n        ) {\n          transformLess(file.path)\n            .then(css => {\n              file.contents = Buffer.from(css);\n              file.path = file.path.replace(/\\.less$/, '.css');\n              this.push(file);\n              next();\n            })\n            .catch(e => {\n              console.error(e);\n            });\n        } else {\n          next();\n        }\n      }),\n    )\n    .pipe(gulp.dest(modules === false ? esDir : libDir));\n```\n\n`gulp.src()`创建流，文件系统中读取文件然后生成一个 Node 流（stream）。\n\n`.pipe() `方法，用于连接转换流（Transform streams）或可写流（Writable streams），我理解的是文件操作写在这里面。\n\n`through2` 听说使用gulp会常用到，但我还是第一次见，是对`transform stream`封装。\n\n什么是transform stream呢，我也不知道，虽然我大学学习java出生，但看来我的java学的真的不行啊。\n\nMDN是这么说的\n\n> 在`TransformStream`所述的接口 [流API](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) 表示一组可变形的数据。\n\n看来我得专门去巩固一下node的流了,单独开个文，等会儿回来\n\n---\n\n2021/7/23 10:55\n\n---\n\n2021/7/23 13:50 大概的巩固了一下stream，回来继续研究antd-tools\n\n---\n\n那么`through2.obj`里面就是对流的处理\n\n一个`if`判断，对\n\n` file.path.match(/\\/style\\/index\\.less$/) ` \n\n`file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)`\n\n这两种匹配或逻辑成立的时候特殊判断\n\n这两种less有什么特殊的地方吗？\n\n那就要看看怎么特殊处理的\n\n```\n transformLess(file.path)\n     .then(css => {\n         file.contents = Buffer.from(css);\n         file.path = file.path.replace(/\\.less$/, '.css');\n         this.push(file);\n         next();\n     })\n     .catch(e => {\n     \tconsole.error(e);\n     });\n```\n\n调用了`transformLess`方法\n\n`transformLess`在同目录下,看来不是只有这个地方用了\n\n```\nfunction transformLess(lessFile, config = {}) {\n  const { cwd = process.cwd() } = config;\n  const resolvedLessFile = path.resolve(cwd, lessFile);\n\n  let data = readFileSync(resolvedLessFile, 'utf-8');\n  data = data.replace(/^\\uFEFF/, '');\n\n  // Do less compile\n  const lessOpts = {\n    paths: [path.dirname(resolvedLessFile)],\n    filename: resolvedLessFile,\n    plugins: [new NpmImportPlugin({ prefix: '~' })],\n    javascriptEnabled: true,\n  };\n  return less\n    .render(data, lessOpts)\n    .then(result => postcss([autoprefixer]).process(result.css, { from: undefined }))\n    .then(r => {\n      return r.css;\n    });\n}\n```\n\n`  const { cwd = process.cwd() } = config;`\n`const resolvedLessFile = path.resolve(cwd, lessFile);`\n\n获取了less目录\n\n读取文件流\n\n然后`  data = data.replace(/^\\uFEFF/, '');`删除文件中的\\uFEFF,这是个啥？\n\n> 文本保存时包含了BOM（Byte Order Mark，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码）,导致出现\\uFEFF\n\n又出现一个BOM= - =\n\n接下来有句注释 `//Do less compile`\n\n说明下面就是做less的编译了\n\n`lessOpts`赋值就不用看了，直接看返回值`less.render().then().then()`\n\n猜也能猜到是把less编译成css\n\n**可是咋看来看去，还是用的less的API呢，我看这么久是为了啥？**\n\n但中间用了个插件还是可以注意下`less-plugin-npm-import`\n\n这个插件可以从npm包里面导入less\n\n*但从两个匹配的less里面并没有看到从npm中引入的less文件*\n\n*不知道为什么要用这个插件？*\n\n*或者我没找到？*\n\n*做完这些，就是调用`gulp.dest()`这个写入文件系统的方法了*\n\n*到此链式调用理解完了*\n\n***我真是啰嗦啊***\n\n**看来看去，就是对less.render的调用**\n\n**这一长串就是less的编译打包**\n\n回到`compile`本身\n\n接着下面分别是对\n\n`components/**/*.@(png|svg)`\n\n`components/**/*.js`\n\n`components/**/*.jsx`\n\n`components/**/*.tsx`\n\n`components/**/*.ts`\n\n`typings/**/*.d.ts`\n\n`!components/*/__tests__/*`\n\n的编译整理\n\n其中ts特殊处理了一下，引入了`const ts = require('gulp-typescript');`\n\n然后调用`ts(tsConfig,{})`\n\n\n\n对错误情况进行了处理。\n\n然后进行了babel处理\n\n` const tsFilesStream = babelify(tsResult.js, modules);`\n\nbabel化之后在写入文件\n\nbabel化简单来说把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。\n\n**非常牛逼的工具，解决了前端工作者一大痛点。**\n\n\n\n最后一句话\n\n` return merge2([less, tsFilesStream, tsd, assets]);`\n\n把所有流按队列整合为一个流\n\n---\n\n妈的，也不复杂的东西我怎么写了这么多，以后写文得精简了\n\n","source":"_posts/antd-tools-1.md","raw":"---\ntitle: antd-tools详解（一）\ndate: 2021-07-22 16:44:24\ntags: [AntDesignVue源码学习,Ant-tools,前端,node]\n---\n\n首先看看antd-design-vue根目录中的[package.json](https://github.com/vueComponent/ant-design-vue/blob/next/package.json)\n\n从中可以看到antd-tools里面使用的工具有哪些\n\n```\n\"compile\": \"node antd-tools/cli/run.js compile\",\n\n\"generator-webtypes\": \"tsc -p antd-tools/generator-types/tsconfig.json && node antd-tools/generator-types/index.js\",\n\n\"pub\": \"node --max_old_space_size=8192 antd-tools/cli/run.js pub\",\n\n\"pub-with-ci\": \"node antd-tools/cli/run.js pub-with-ci\",\n\n\"prepublish\": \"node antd-tools/cli/run.js guard\",\n\n\"dist\": \"node --max_old_space_size=8192 antd-tools/cli/run.js dist\",\n```\n\n目前看就是这6个工具\n\n根据命令语义看\n\n```\ncompile 编译\ngenerator-webtypes 初始化\npub 发布 \npub-with-ci 在ci下pub（不懂） \nprepublish 预发布\ndist 打包\n```\n\n一个个看吧\n\n### compile\n\n在`antd-tools\\gulpfile.js`里能找到代码\n\n```\ngulp.task(\n  'compile',\n  gulp.series(gulp.parallel('compile-with-es', 'compile-with-lib'), done => {\n    done();\n  }),\n);\n```\n\n`gulp.series()`和`gulp.parallel()`是gulp中的组合任务，允许将多个独立的任务组合为一个更大的操作，`series()` 和 `parallel()` 可以互相嵌套至任意深度。如果需要让任务（task）按顺序执行，请使用 `series()` 方法。对于希望以最大并发来运行的任务（tasks），可以使用 `parallel()` 方法将它们组合起来。\n\n上面的意思就是创建一个名为`compile`的任务，这个任务是先执行并发的`compile-with-es`和`compile-with-lib`，然后执行回调。(这个回调貌似不是必要的？)\n\n然后我们再来看看`compile-with-es`和`compile-with-lib`\n\n##### compile-with-es\n\n```\ngulp.task('compile-with-es', done => {\n  console.log('[Parallel] Compile to es...');\n  compile(false).on('finish', done);\n});\n```\n\n##### compile-with-lib\n\n```\ngulp.task('compile-with-lib', done => {\n  console.log('[Parallel] Compile to js...');\n  compile().on('finish', done);\n});\n```\n\n看起来都是对`compile`的执行，然后来看看`compile`方法，也就是核心代码。\n\n##### compile\n\n```\nfunction compile(modules) {\n  rimraf.sync(modules !== false ? libDir : esDir);\n  const less = gulp\n    .src(['components/**/*.less'])\n    .pipe(\n      through2.obj(function (file, encoding, next) {\n        this.push(file.clone());\n        if (\n          file.path.match(/\\/style\\/index\\.less$/) ||\n          file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)\n        ) {\n          transformLess(file.path)\n            .then(css => {\n              file.contents = Buffer.from(css);\n              file.path = file.path.replace(/\\.less$/, '.css');\n              this.push(file);\n              next();\n            })\n            .catch(e => {\n              console.error(e);\n            });\n        } else {\n          next();\n        }\n      }),\n    )\n    .pipe(gulp.dest(modules === false ? esDir : libDir));\n  const assets = gulp\n    .src(['components/**/*.@(png|svg)'])\n    .pipe(gulp.dest(modules === false ? esDir : libDir));\n  let error = 0;\n  const source = [\n    'components/**/*.js',\n    'components/**/*.jsx',\n    'components/**/*.tsx',\n    'components/**/*.ts',\n    'typings/**/*.d.ts',\n    '!components/*/__tests__/*',\n  ];\n\n  const tsResult = gulp.src(source).pipe(\n    ts(tsConfig, {\n      error(e) {\n        tsDefaultReporter.error(e);\n        error = 1;\n      },\n      finish: tsDefaultReporter.finish,\n    }),\n  );\n\n  function check() {\n    if (error && !argv['ignore-error']) {\n      process.exit(1);\n    }\n  }\n\n  tsResult.on('finish', check);\n  tsResult.on('end', check);\n  const tsFilesStream = babelify(tsResult.js, modules);\n  const tsd = tsResult.dts.pipe(gulp.dest(modules === false ? esDir : libDir));\n  return merge2([less, tsFilesStream, tsd, assets]);\n}\n```\n\n---\n\n下班了，明天再来写           2021/7/22 17:22\n\n---\n\n继续            2021/7/23/ 10:09\n\n---\n\n*第一句就没看懂*\n\n*`rimraf.sync(modules !== false ? libDir : esDir);`*\n\n*rimraf是引入的插件`const rimraf = require('rimraf');`*\n\n*名字很奇怪*\n\n查了下是对rm -rf的包封装，那就不奇怪了\n\n那这句话就是对旧包的删除了\n\n不过编译的话第一步确实应该清理旧包，大意了，竟然没联想到\n\n\n\nless变量是一个较长的链式调用，得拉出来单独看看\n\n```\n const less = gulp\n    .src(['components/**/*.less'])\t\t\t\t    \n    .pipe(\t\t\t\t\t\t\t\t\t\t\t\n      through2.obj(function (file, encoding, next) {\n        this.push(file.clone());\n        if (\n          file.path.match(/\\/style\\/index\\.less$/) ||\n          file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)\n        ) {\n          transformLess(file.path)\n            .then(css => {\n              file.contents = Buffer.from(css);\n              file.path = file.path.replace(/\\.less$/, '.css');\n              this.push(file);\n              next();\n            })\n            .catch(e => {\n              console.error(e);\n            });\n        } else {\n          next();\n        }\n      }),\n    )\n    .pipe(gulp.dest(modules === false ? esDir : libDir));\n```\n\n`gulp.src()`创建流，文件系统中读取文件然后生成一个 Node 流（stream）。\n\n`.pipe() `方法，用于连接转换流（Transform streams）或可写流（Writable streams），我理解的是文件操作写在这里面。\n\n`through2` 听说使用gulp会常用到，但我还是第一次见，是对`transform stream`封装。\n\n什么是transform stream呢，我也不知道，虽然我大学学习java出生，但看来我的java学的真的不行啊。\n\nMDN是这么说的\n\n> 在`TransformStream`所述的接口 [流API](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) 表示一组可变形的数据。\n\n看来我得专门去巩固一下node的流了,单独开个文，等会儿回来\n\n---\n\n2021/7/23 10:55\n\n---\n\n2021/7/23 13:50 大概的巩固了一下stream，回来继续研究antd-tools\n\n---\n\n那么`through2.obj`里面就是对流的处理\n\n一个`if`判断，对\n\n` file.path.match(/\\/style\\/index\\.less$/) ` \n\n`file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)`\n\n这两种匹配或逻辑成立的时候特殊判断\n\n这两种less有什么特殊的地方吗？\n\n那就要看看怎么特殊处理的\n\n```\n transformLess(file.path)\n     .then(css => {\n         file.contents = Buffer.from(css);\n         file.path = file.path.replace(/\\.less$/, '.css');\n         this.push(file);\n         next();\n     })\n     .catch(e => {\n     \tconsole.error(e);\n     });\n```\n\n调用了`transformLess`方法\n\n`transformLess`在同目录下,看来不是只有这个地方用了\n\n```\nfunction transformLess(lessFile, config = {}) {\n  const { cwd = process.cwd() } = config;\n  const resolvedLessFile = path.resolve(cwd, lessFile);\n\n  let data = readFileSync(resolvedLessFile, 'utf-8');\n  data = data.replace(/^\\uFEFF/, '');\n\n  // Do less compile\n  const lessOpts = {\n    paths: [path.dirname(resolvedLessFile)],\n    filename: resolvedLessFile,\n    plugins: [new NpmImportPlugin({ prefix: '~' })],\n    javascriptEnabled: true,\n  };\n  return less\n    .render(data, lessOpts)\n    .then(result => postcss([autoprefixer]).process(result.css, { from: undefined }))\n    .then(r => {\n      return r.css;\n    });\n}\n```\n\n`  const { cwd = process.cwd() } = config;`\n`const resolvedLessFile = path.resolve(cwd, lessFile);`\n\n获取了less目录\n\n读取文件流\n\n然后`  data = data.replace(/^\\uFEFF/, '');`删除文件中的\\uFEFF,这是个啥？\n\n> 文本保存时包含了BOM（Byte Order Mark，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码）,导致出现\\uFEFF\n\n又出现一个BOM= - =\n\n接下来有句注释 `//Do less compile`\n\n说明下面就是做less的编译了\n\n`lessOpts`赋值就不用看了，直接看返回值`less.render().then().then()`\n\n猜也能猜到是把less编译成css\n\n**可是咋看来看去，还是用的less的API呢，我看这么久是为了啥？**\n\n但中间用了个插件还是可以注意下`less-plugin-npm-import`\n\n这个插件可以从npm包里面导入less\n\n*但从两个匹配的less里面并没有看到从npm中引入的less文件*\n\n*不知道为什么要用这个插件？*\n\n*或者我没找到？*\n\n*做完这些，就是调用`gulp.dest()`这个写入文件系统的方法了*\n\n*到此链式调用理解完了*\n\n***我真是啰嗦啊***\n\n**看来看去，就是对less.render的调用**\n\n**这一长串就是less的编译打包**\n\n回到`compile`本身\n\n接着下面分别是对\n\n`components/**/*.@(png|svg)`\n\n`components/**/*.js`\n\n`components/**/*.jsx`\n\n`components/**/*.tsx`\n\n`components/**/*.ts`\n\n`typings/**/*.d.ts`\n\n`!components/*/__tests__/*`\n\n的编译整理\n\n其中ts特殊处理了一下，引入了`const ts = require('gulp-typescript');`\n\n然后调用`ts(tsConfig,{})`\n\n\n\n对错误情况进行了处理。\n\n然后进行了babel处理\n\n` const tsFilesStream = babelify(tsResult.js, modules);`\n\nbabel化之后在写入文件\n\nbabel化简单来说把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。\n\n**非常牛逼的工具，解决了前端工作者一大痛点。**\n\n\n\n最后一句话\n\n` return merge2([less, tsFilesStream, tsd, assets]);`\n\n把所有流按队列整合为一个流\n\n---\n\n妈的，也不复杂的东西我怎么写了这么多，以后写文得精简了\n\n","slug":"antd-tools-1","published":1,"updated":"2021-07-23T07:19:40.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrn8zvk8000088v7heqj2r5r","content":"<p>首先看看antd-design-vue根目录中的<a href=\"https://github.com/vueComponent/ant-design-vue/blob/next/package.json\">package.json</a></p>\n<p>从中可以看到antd-tools里面使用的工具有哪些</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;compile&quot;: &quot;node antd-tools/cli/run.js compile&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;generator-webtypes&quot;: &quot;tsc -p antd-tools/generator-types/tsconfig.json &amp;&amp; node antd-tools/generator-types/index.js&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;pub&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js pub&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;pub-with-ci&quot;: &quot;node antd-tools/cli/run.js pub-with-ci&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;prepublish&quot;: &quot;node antd-tools/cli/run.js guard&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;dist&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js dist&quot;,</span><br></pre></td></tr></table></figure>\n\n<p>目前看就是这6个工具</p>\n<p>根据命令语义看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile 编译</span><br><span class=\"line\">generator-webtypes 初始化</span><br><span class=\"line\">pub 发布 </span><br><span class=\"line\">pub-with-ci 在ci下pub（不懂） </span><br><span class=\"line\">prepublish 预发布</span><br><span class=\"line\">dist 打包</span><br></pre></td></tr></table></figure>\n\n<p>一个个看吧</p>\n<h3 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h3><p>在<code>antd-tools\\gulpfile.js</code>里能找到代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;compile&#x27;,</span><br><span class=\"line\">  gulp.series(gulp.parallel(&#x27;compile-with-es&#x27;, &#x27;compile-with-lib&#x27;), done =&gt; &#123;</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><code>gulp.series()</code>和<code>gulp.parallel()</code>是gulp中的组合任务，允许将多个独立的任务组合为一个更大的操作，<code>series()</code> 和 <code>parallel()</code> 可以互相嵌套至任意深度。如果需要让任务（task）按顺序执行，请使用 <code>series()</code> 方法。对于希望以最大并发来运行的任务（tasks），可以使用 <code>parallel()</code> 方法将它们组合起来。</p>\n<p>上面的意思就是创建一个名为<code>compile</code>的任务，这个任务是先执行并发的<code>compile-with-es</code>和<code>compile-with-lib</code>，然后执行回调。(这个回调貌似不是必要的？)</p>\n<p>然后我们再来看看<code>compile-with-es</code>和<code>compile-with-lib</code></p>\n<h5 id=\"compile-with-es\"><a href=\"#compile-with-es\" class=\"headerlink\" title=\"compile-with-es\"></a>compile-with-es</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&#x27;compile-with-es&#x27;, done =&gt; &#123;</span><br><span class=\"line\">  console.log(&#x27;[Parallel] Compile to es...&#x27;);</span><br><span class=\"line\">  compile(false).on(&#x27;finish&#x27;, done);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"compile-with-lib\"><a href=\"#compile-with-lib\" class=\"headerlink\" title=\"compile-with-lib\"></a>compile-with-lib</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&#x27;compile-with-lib&#x27;, done =&gt; &#123;</span><br><span class=\"line\">  console.log(&#x27;[Parallel] Compile to js...&#x27;);</span><br><span class=\"line\">  compile().on(&#x27;finish&#x27;, done);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>看起来都是对<code>compile</code>的执行，然后来看看<code>compile</code>方法，也就是核心代码。</p>\n<h5 id=\"compile-1\"><a href=\"#compile-1\" class=\"headerlink\" title=\"compile\"></a>compile</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compile(modules) &#123;</span><br><span class=\"line\">  rimraf.sync(modules !== false ? libDir : esDir);</span><br><span class=\"line\">  const less = gulp</span><br><span class=\"line\">    .src([&#x27;components/**/*.less&#x27;])</span><br><span class=\"line\">    .pipe(</span><br><span class=\"line\">      through2.obj(function (file, encoding, next) &#123;</span><br><span class=\"line\">        this.push(file.clone());</span><br><span class=\"line\">        if (</span><br><span class=\"line\">          file.path.match(/\\/style\\/index\\.less$/) ||</span><br><span class=\"line\">          file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          transformLess(file.path)</span><br><span class=\"line\">            .then(css =&gt; &#123;</span><br><span class=\"line\">              file.contents = Buffer.from(css);</span><br><span class=\"line\">              file.path = file.path.replace(/\\.less$/, &#x27;.css&#x27;);</span><br><span class=\"line\">              this.push(file);</span><br><span class=\"line\">              next();</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(e =&gt; &#123;</span><br><span class=\"line\">              console.error(e);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class=\"line\">  const assets = gulp</span><br><span class=\"line\">    .src([&#x27;components/**/*.@(png|svg)&#x27;])</span><br><span class=\"line\">    .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class=\"line\">  let error = 0;</span><br><span class=\"line\">  const source = [</span><br><span class=\"line\">    &#x27;components/**/*.js&#x27;,</span><br><span class=\"line\">    &#x27;components/**/*.jsx&#x27;,</span><br><span class=\"line\">    &#x27;components/**/*.tsx&#x27;,</span><br><span class=\"line\">    &#x27;components/**/*.ts&#x27;,</span><br><span class=\"line\">    &#x27;typings/**/*.d.ts&#x27;,</span><br><span class=\"line\">    &#x27;!components/*/__tests__/*&#x27;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  const tsResult = gulp.src(source).pipe(</span><br><span class=\"line\">    ts(tsConfig, &#123;</span><br><span class=\"line\">      error(e) &#123;</span><br><span class=\"line\">        tsDefaultReporter.error(e);</span><br><span class=\"line\">        error = 1;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      finish: tsDefaultReporter.finish,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  function check() &#123;</span><br><span class=\"line\">    if (error &amp;&amp; !argv[&#x27;ignore-error&#x27;]) &#123;</span><br><span class=\"line\">      process.exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tsResult.on(&#x27;finish&#x27;, check);</span><br><span class=\"line\">  tsResult.on(&#x27;end&#x27;, check);</span><br><span class=\"line\">  const tsFilesStream = babelify(tsResult.js, modules);</span><br><span class=\"line\">  const tsd = tsResult.dts.pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class=\"line\">  return merge2([less, tsFilesStream, tsd, assets]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>下班了，明天再来写           2021/7/22 17:22</p>\n<hr>\n<p>继续            2021/7/23/ 10:09</p>\n<hr>\n<p><em>第一句就没看懂</em></p>\n<p><em><code>rimraf.sync(modules !== false ? libDir : esDir);</code></em></p>\n<p><em>rimraf是引入的插件<code>const rimraf = require(&#39;rimraf&#39;);</code></em></p>\n<p><em>名字很奇怪</em></p>\n<p>查了下是对rm -rf的包封装，那就不奇怪了</p>\n<p>那这句话就是对旧包的删除了</p>\n<p>不过编译的话第一步确实应该清理旧包，大意了，竟然没联想到</p>\n<p>less变量是一个较长的链式调用，得拉出来单独看看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const less = gulp</span><br><span class=\"line\">   .src([&#x27;components/**/*.less&#x27;])\t\t\t\t    </span><br><span class=\"line\">   .pipe(\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">     through2.obj(function (file, encoding, next) &#123;</span><br><span class=\"line\">       this.push(file.clone());</span><br><span class=\"line\">       if (</span><br><span class=\"line\">         file.path.match(/\\/style\\/index\\.less$/) ||</span><br><span class=\"line\">         file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)</span><br><span class=\"line\">       ) &#123;</span><br><span class=\"line\">         transformLess(file.path)</span><br><span class=\"line\">           .then(css =&gt; &#123;</span><br><span class=\"line\">             file.contents = Buffer.from(css);</span><br><span class=\"line\">             file.path = file.path.replace(/\\.less$/, &#x27;.css&#x27;);</span><br><span class=\"line\">             this.push(file);</span><br><span class=\"line\">             next();</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">           .catch(e =&gt; &#123;</span><br><span class=\"line\">             console.error(e);</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">         next();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;),</span><br><span class=\"line\">   )</span><br><span class=\"line\">   .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br></pre></td></tr></table></figure>\n\n<p><code>gulp.src()</code>创建流，文件系统中读取文件然后生成一个 Node 流（stream）。</p>\n<p><code>.pipe() </code>方法，用于连接转换流（Transform streams）或可写流（Writable streams），我理解的是文件操作写在这里面。</p>\n<p><code>through2</code> 听说使用gulp会常用到，但我还是第一次见，是对<code>transform stream</code>封装。</p>\n<p>什么是transform stream呢，我也不知道，虽然我大学学习java出生，但看来我的java学的真的不行啊。</p>\n<p>MDN是这么说的</p>\n<blockquote>\n<p>在<code>TransformStream</code>所述的接口 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">流API</a> 表示一组可变形的数据。</p>\n</blockquote>\n<p>看来我得专门去巩固一下node的流了,单独开个文，等会儿回来</p>\n<hr>\n<p>2021/7/23 10:55</p>\n<hr>\n<p>2021/7/23 13:50 大概的巩固了一下stream，回来继续研究antd-tools</p>\n<hr>\n<p>那么<code>through2.obj</code>里面就是对流的处理</p>\n<p>一个<code>if</code>判断，对</p>\n<p><code>file.path.match(/\\/style\\/index\\.less$/)</code> </p>\n<p><code>file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)</code></p>\n<p>这两种匹配或逻辑成立的时候特殊判断</p>\n<p>这两种less有什么特殊的地方吗？</p>\n<p>那就要看看怎么特殊处理的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transformLess(file.path)</span><br><span class=\"line\">    .then(css =&gt; &#123;</span><br><span class=\"line\">        file.contents = Buffer.from(css);</span><br><span class=\"line\">        file.path = file.path.replace(/\\.less$/, &#x27;.css&#x27;);</span><br><span class=\"line\">        this.push(file);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(e =&gt; &#123;</span><br><span class=\"line\">    \tconsole.error(e);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>调用了<code>transformLess</code>方法</p>\n<p><code>transformLess</code>在同目录下,看来不是只有这个地方用了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function transformLess(lessFile, config = &#123;&#125;) &#123;</span><br><span class=\"line\">  const &#123; cwd = process.cwd() &#125; = config;</span><br><span class=\"line\">  const resolvedLessFile = path.resolve(cwd, lessFile);</span><br><span class=\"line\"></span><br><span class=\"line\">  let data = readFileSync(resolvedLessFile, &#x27;utf-8&#x27;);</span><br><span class=\"line\">  data = data.replace(/^\\uFEFF/, &#x27;&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">  // Do less compile</span><br><span class=\"line\">  const lessOpts = &#123;</span><br><span class=\"line\">    paths: [path.dirname(resolvedLessFile)],</span><br><span class=\"line\">    filename: resolvedLessFile,</span><br><span class=\"line\">    plugins: [new NpmImportPlugin(&#123; prefix: &#x27;~&#x27; &#125;)],</span><br><span class=\"line\">    javascriptEnabled: true,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return less</span><br><span class=\"line\">    .render(data, lessOpts)</span><br><span class=\"line\">    .then(result =&gt; postcss([autoprefixer]).process(result.css, &#123; from: undefined &#125;))</span><br><span class=\"line\">    .then(r =&gt; &#123;</span><br><span class=\"line\">      return r.css;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>  const &#123; cwd = process.cwd() &#125; = config;</code><br><code>const resolvedLessFile = path.resolve(cwd, lessFile);</code></p>\n<p>获取了less目录</p>\n<p>读取文件流</p>\n<p>然后<code>  data = data.replace(/^\\uFEFF/, &#39;&#39;);</code>删除文件中的\\uFEFF,这是个啥？</p>\n<blockquote>\n<p>文本保存时包含了BOM（Byte Order Mark，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码）,导致出现\\uFEFF</p>\n</blockquote>\n<p>又出现一个BOM= - =</p>\n<p>接下来有句注释 <code>//Do less compile</code></p>\n<p>说明下面就是做less的编译了</p>\n<p><code>lessOpts</code>赋值就不用看了，直接看返回值<code>less.render().then().then()</code></p>\n<p>猜也能猜到是把less编译成css</p>\n<p><strong>可是咋看来看去，还是用的less的API呢，我看这么久是为了啥？</strong></p>\n<p>但中间用了个插件还是可以注意下<code>less-plugin-npm-import</code></p>\n<p>这个插件可以从npm包里面导入less</p>\n<p><em>但从两个匹配的less里面并没有看到从npm中引入的less文件</em></p>\n<p><em>不知道为什么要用这个插件？</em></p>\n<p><em>或者我没找到？</em></p>\n<p><em>做完这些，就是调用<code>gulp.dest()</code>这个写入文件系统的方法了</em></p>\n<p><em>到此链式调用理解完了</em></p>\n<p><em><strong>我真是啰嗦啊</strong></em></p>\n<p><strong>看来看去，就是对less.render的调用</strong></p>\n<p><strong>这一长串就是less的编译打包</strong></p>\n<p>回到<code>compile</code>本身</p>\n<p>接着下面分别是对</p>\n<p><code>components/**/*.@(png|svg)</code></p>\n<p><code>components/**/*.js</code></p>\n<p><code>components/**/*.jsx</code></p>\n<p><code>components/**/*.tsx</code></p>\n<p><code>components/**/*.ts</code></p>\n<p><code>typings/**/*.d.ts</code></p>\n<p><code>!components/*/__tests__/*</code></p>\n<p>的编译整理</p>\n<p>其中ts特殊处理了一下，引入了<code>const ts = require(&#39;gulp-typescript&#39;);</code></p>\n<p>然后调用<code>ts(tsConfig,&#123;&#125;)</code></p>\n<p>对错误情况进行了处理。</p>\n<p>然后进行了babel处理</p>\n<p><code> const tsFilesStream = babelify(tsResult.js, modules);</code></p>\n<p>babel化之后在写入文件</p>\n<p>babel化简单来说把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。</p>\n<p><strong>非常牛逼的工具，解决了前端工作者一大痛点。</strong></p>\n<p>最后一句话</p>\n<p><code> return merge2([less, tsFilesStream, tsd, assets]);</code></p>\n<p>把所有流按队列整合为一个流</p>\n<hr>\n<p>妈的，也不复杂的东西我怎么写了这么多，以后写文得精简了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先看看antd-design-vue根目录中的<a href=\"https://github.com/vueComponent/ant-design-vue/blob/next/package.json\">package.json</a></p>\n<p>从中可以看到antd-tools里面使用的工具有哪些</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;compile&quot;: &quot;node antd-tools/cli/run.js compile&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;generator-webtypes&quot;: &quot;tsc -p antd-tools/generator-types/tsconfig.json &amp;&amp; node antd-tools/generator-types/index.js&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;pub&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js pub&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;pub-with-ci&quot;: &quot;node antd-tools/cli/run.js pub-with-ci&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;prepublish&quot;: &quot;node antd-tools/cli/run.js guard&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;dist&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js dist&quot;,</span><br></pre></td></tr></table></figure>\n\n<p>目前看就是这6个工具</p>\n<p>根据命令语义看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile 编译</span><br><span class=\"line\">generator-webtypes 初始化</span><br><span class=\"line\">pub 发布 </span><br><span class=\"line\">pub-with-ci 在ci下pub（不懂） </span><br><span class=\"line\">prepublish 预发布</span><br><span class=\"line\">dist 打包</span><br></pre></td></tr></table></figure>\n\n<p>一个个看吧</p>\n<h3 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h3><p>在<code>antd-tools\\gulpfile.js</code>里能找到代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;compile&#x27;,</span><br><span class=\"line\">  gulp.series(gulp.parallel(&#x27;compile-with-es&#x27;, &#x27;compile-with-lib&#x27;), done =&gt; &#123;</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><code>gulp.series()</code>和<code>gulp.parallel()</code>是gulp中的组合任务，允许将多个独立的任务组合为一个更大的操作，<code>series()</code> 和 <code>parallel()</code> 可以互相嵌套至任意深度。如果需要让任务（task）按顺序执行，请使用 <code>series()</code> 方法。对于希望以最大并发来运行的任务（tasks），可以使用 <code>parallel()</code> 方法将它们组合起来。</p>\n<p>上面的意思就是创建一个名为<code>compile</code>的任务，这个任务是先执行并发的<code>compile-with-es</code>和<code>compile-with-lib</code>，然后执行回调。(这个回调貌似不是必要的？)</p>\n<p>然后我们再来看看<code>compile-with-es</code>和<code>compile-with-lib</code></p>\n<h5 id=\"compile-with-es\"><a href=\"#compile-with-es\" class=\"headerlink\" title=\"compile-with-es\"></a>compile-with-es</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&#x27;compile-with-es&#x27;, done =&gt; &#123;</span><br><span class=\"line\">  console.log(&#x27;[Parallel] Compile to es...&#x27;);</span><br><span class=\"line\">  compile(false).on(&#x27;finish&#x27;, done);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"compile-with-lib\"><a href=\"#compile-with-lib\" class=\"headerlink\" title=\"compile-with-lib\"></a>compile-with-lib</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&#x27;compile-with-lib&#x27;, done =&gt; &#123;</span><br><span class=\"line\">  console.log(&#x27;[Parallel] Compile to js...&#x27;);</span><br><span class=\"line\">  compile().on(&#x27;finish&#x27;, done);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>看起来都是对<code>compile</code>的执行，然后来看看<code>compile</code>方法，也就是核心代码。</p>\n<h5 id=\"compile-1\"><a href=\"#compile-1\" class=\"headerlink\" title=\"compile\"></a>compile</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compile(modules) &#123;</span><br><span class=\"line\">  rimraf.sync(modules !== false ? libDir : esDir);</span><br><span class=\"line\">  const less = gulp</span><br><span class=\"line\">    .src([&#x27;components/**/*.less&#x27;])</span><br><span class=\"line\">    .pipe(</span><br><span class=\"line\">      through2.obj(function (file, encoding, next) &#123;</span><br><span class=\"line\">        this.push(file.clone());</span><br><span class=\"line\">        if (</span><br><span class=\"line\">          file.path.match(/\\/style\\/index\\.less$/) ||</span><br><span class=\"line\">          file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          transformLess(file.path)</span><br><span class=\"line\">            .then(css =&gt; &#123;</span><br><span class=\"line\">              file.contents = Buffer.from(css);</span><br><span class=\"line\">              file.path = file.path.replace(/\\.less$/, &#x27;.css&#x27;);</span><br><span class=\"line\">              this.push(file);</span><br><span class=\"line\">              next();</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(e =&gt; &#123;</span><br><span class=\"line\">              console.error(e);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class=\"line\">  const assets = gulp</span><br><span class=\"line\">    .src([&#x27;components/**/*.@(png|svg)&#x27;])</span><br><span class=\"line\">    .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class=\"line\">  let error = 0;</span><br><span class=\"line\">  const source = [</span><br><span class=\"line\">    &#x27;components/**/*.js&#x27;,</span><br><span class=\"line\">    &#x27;components/**/*.jsx&#x27;,</span><br><span class=\"line\">    &#x27;components/**/*.tsx&#x27;,</span><br><span class=\"line\">    &#x27;components/**/*.ts&#x27;,</span><br><span class=\"line\">    &#x27;typings/**/*.d.ts&#x27;,</span><br><span class=\"line\">    &#x27;!components/*/__tests__/*&#x27;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  const tsResult = gulp.src(source).pipe(</span><br><span class=\"line\">    ts(tsConfig, &#123;</span><br><span class=\"line\">      error(e) &#123;</span><br><span class=\"line\">        tsDefaultReporter.error(e);</span><br><span class=\"line\">        error = 1;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      finish: tsDefaultReporter.finish,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  function check() &#123;</span><br><span class=\"line\">    if (error &amp;&amp; !argv[&#x27;ignore-error&#x27;]) &#123;</span><br><span class=\"line\">      process.exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tsResult.on(&#x27;finish&#x27;, check);</span><br><span class=\"line\">  tsResult.on(&#x27;end&#x27;, check);</span><br><span class=\"line\">  const tsFilesStream = babelify(tsResult.js, modules);</span><br><span class=\"line\">  const tsd = tsResult.dts.pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class=\"line\">  return merge2([less, tsFilesStream, tsd, assets]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>下班了，明天再来写           2021/7/22 17:22</p>\n<hr>\n<p>继续            2021/7/23/ 10:09</p>\n<hr>\n<p><em>第一句就没看懂</em></p>\n<p><em><code>rimraf.sync(modules !== false ? libDir : esDir);</code></em></p>\n<p><em>rimraf是引入的插件<code>const rimraf = require(&#39;rimraf&#39;);</code></em></p>\n<p><em>名字很奇怪</em></p>\n<p>查了下是对rm -rf的包封装，那就不奇怪了</p>\n<p>那这句话就是对旧包的删除了</p>\n<p>不过编译的话第一步确实应该清理旧包，大意了，竟然没联想到</p>\n<p>less变量是一个较长的链式调用，得拉出来单独看看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const less = gulp</span><br><span class=\"line\">   .src([&#x27;components/**/*.less&#x27;])\t\t\t\t    </span><br><span class=\"line\">   .pipe(\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">     through2.obj(function (file, encoding, next) &#123;</span><br><span class=\"line\">       this.push(file.clone());</span><br><span class=\"line\">       if (</span><br><span class=\"line\">         file.path.match(/\\/style\\/index\\.less$/) ||</span><br><span class=\"line\">         file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)</span><br><span class=\"line\">       ) &#123;</span><br><span class=\"line\">         transformLess(file.path)</span><br><span class=\"line\">           .then(css =&gt; &#123;</span><br><span class=\"line\">             file.contents = Buffer.from(css);</span><br><span class=\"line\">             file.path = file.path.replace(/\\.less$/, &#x27;.css&#x27;);</span><br><span class=\"line\">             this.push(file);</span><br><span class=\"line\">             next();</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">           .catch(e =&gt; &#123;</span><br><span class=\"line\">             console.error(e);</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">         next();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;),</span><br><span class=\"line\">   )</span><br><span class=\"line\">   .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br></pre></td></tr></table></figure>\n\n<p><code>gulp.src()</code>创建流，文件系统中读取文件然后生成一个 Node 流（stream）。</p>\n<p><code>.pipe() </code>方法，用于连接转换流（Transform streams）或可写流（Writable streams），我理解的是文件操作写在这里面。</p>\n<p><code>through2</code> 听说使用gulp会常用到，但我还是第一次见，是对<code>transform stream</code>封装。</p>\n<p>什么是transform stream呢，我也不知道，虽然我大学学习java出生，但看来我的java学的真的不行啊。</p>\n<p>MDN是这么说的</p>\n<blockquote>\n<p>在<code>TransformStream</code>所述的接口 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">流API</a> 表示一组可变形的数据。</p>\n</blockquote>\n<p>看来我得专门去巩固一下node的流了,单独开个文，等会儿回来</p>\n<hr>\n<p>2021/7/23 10:55</p>\n<hr>\n<p>2021/7/23 13:50 大概的巩固了一下stream，回来继续研究antd-tools</p>\n<hr>\n<p>那么<code>through2.obj</code>里面就是对流的处理</p>\n<p>一个<code>if</code>判断，对</p>\n<p><code>file.path.match(/\\/style\\/index\\.less$/)</code> </p>\n<p><code>file.path.match(/\\/style\\/v2-compatible-reset\\.less$/)</code></p>\n<p>这两种匹配或逻辑成立的时候特殊判断</p>\n<p>这两种less有什么特殊的地方吗？</p>\n<p>那就要看看怎么特殊处理的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transformLess(file.path)</span><br><span class=\"line\">    .then(css =&gt; &#123;</span><br><span class=\"line\">        file.contents = Buffer.from(css);</span><br><span class=\"line\">        file.path = file.path.replace(/\\.less$/, &#x27;.css&#x27;);</span><br><span class=\"line\">        this.push(file);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(e =&gt; &#123;</span><br><span class=\"line\">    \tconsole.error(e);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>调用了<code>transformLess</code>方法</p>\n<p><code>transformLess</code>在同目录下,看来不是只有这个地方用了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function transformLess(lessFile, config = &#123;&#125;) &#123;</span><br><span class=\"line\">  const &#123; cwd = process.cwd() &#125; = config;</span><br><span class=\"line\">  const resolvedLessFile = path.resolve(cwd, lessFile);</span><br><span class=\"line\"></span><br><span class=\"line\">  let data = readFileSync(resolvedLessFile, &#x27;utf-8&#x27;);</span><br><span class=\"line\">  data = data.replace(/^\\uFEFF/, &#x27;&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">  // Do less compile</span><br><span class=\"line\">  const lessOpts = &#123;</span><br><span class=\"line\">    paths: [path.dirname(resolvedLessFile)],</span><br><span class=\"line\">    filename: resolvedLessFile,</span><br><span class=\"line\">    plugins: [new NpmImportPlugin(&#123; prefix: &#x27;~&#x27; &#125;)],</span><br><span class=\"line\">    javascriptEnabled: true,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return less</span><br><span class=\"line\">    .render(data, lessOpts)</span><br><span class=\"line\">    .then(result =&gt; postcss([autoprefixer]).process(result.css, &#123; from: undefined &#125;))</span><br><span class=\"line\">    .then(r =&gt; &#123;</span><br><span class=\"line\">      return r.css;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>  const &#123; cwd = process.cwd() &#125; = config;</code><br><code>const resolvedLessFile = path.resolve(cwd, lessFile);</code></p>\n<p>获取了less目录</p>\n<p>读取文件流</p>\n<p>然后<code>  data = data.replace(/^\\uFEFF/, &#39;&#39;);</code>删除文件中的\\uFEFF,这是个啥？</p>\n<blockquote>\n<p>文本保存时包含了BOM（Byte Order Mark，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码）,导致出现\\uFEFF</p>\n</blockquote>\n<p>又出现一个BOM= - =</p>\n<p>接下来有句注释 <code>//Do less compile</code></p>\n<p>说明下面就是做less的编译了</p>\n<p><code>lessOpts</code>赋值就不用看了，直接看返回值<code>less.render().then().then()</code></p>\n<p>猜也能猜到是把less编译成css</p>\n<p><strong>可是咋看来看去，还是用的less的API呢，我看这么久是为了啥？</strong></p>\n<p>但中间用了个插件还是可以注意下<code>less-plugin-npm-import</code></p>\n<p>这个插件可以从npm包里面导入less</p>\n<p><em>但从两个匹配的less里面并没有看到从npm中引入的less文件</em></p>\n<p><em>不知道为什么要用这个插件？</em></p>\n<p><em>或者我没找到？</em></p>\n<p><em>做完这些，就是调用<code>gulp.dest()</code>这个写入文件系统的方法了</em></p>\n<p><em>到此链式调用理解完了</em></p>\n<p><em><strong>我真是啰嗦啊</strong></em></p>\n<p><strong>看来看去，就是对less.render的调用</strong></p>\n<p><strong>这一长串就是less的编译打包</strong></p>\n<p>回到<code>compile</code>本身</p>\n<p>接着下面分别是对</p>\n<p><code>components/**/*.@(png|svg)</code></p>\n<p><code>components/**/*.js</code></p>\n<p><code>components/**/*.jsx</code></p>\n<p><code>components/**/*.tsx</code></p>\n<p><code>components/**/*.ts</code></p>\n<p><code>typings/**/*.d.ts</code></p>\n<p><code>!components/*/__tests__/*</code></p>\n<p>的编译整理</p>\n<p>其中ts特殊处理了一下，引入了<code>const ts = require(&#39;gulp-typescript&#39;);</code></p>\n<p>然后调用<code>ts(tsConfig,&#123;&#125;)</code></p>\n<p>对错误情况进行了处理。</p>\n<p>然后进行了babel处理</p>\n<p><code> const tsFilesStream = babelify(tsResult.js, modules);</code></p>\n<p>babel化之后在写入文件</p>\n<p>babel化简单来说把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。</p>\n<p><strong>非常牛逼的工具，解决了前端工作者一大痛点。</strong></p>\n<p>最后一句话</p>\n<p><code> return merge2([less, tsFilesStream, tsd, assets]);</code></p>\n<p>把所有流按队列整合为一个流</p>\n<hr>\n<p>妈的，也不复杂的东西我怎么写了这么多，以后写文得精简了</p>\n"},{"title":"antd-tools详解（二）","date":"2021-07-23T07:18:11.000Z","_content":"\n### dist\n\n趁热打铁，直接看打包的代码吧\n\n`\"dist\": \"node --max_old_space_size=8192 antd-tools/cli/run.js dist\",`\n\n也就是这个命令\n\n`gulp`执行`dist`任务，在`antd-tools\\gulpfile.js`里面找到`dist`任务\n\n```\ngulp.task(\n  'dist',\n  gulp.series(done => {\n    dist(done);\n  }),\n);\n```\n\n没有做其他事情，就是单纯调用`dist`方法\n\n```\nfunction dist(done) {\n  rimraf.sync(path.join(cwd, 'dist'));\n  process.env.RUN_ENV = 'PRODUCTION';\n  const webpackConfig = require(getProjectPath('webpack.build.conf.js'));\n  webpack(webpackConfig, (err, stats) => {\n    if (err) {\n      console.error(err.stack || err);\n      if (err.details) {\n        console.error(err.details);\n      }\n      return;\n    }\n\n    const info = stats.toJson();\n\n    if (stats.hasErrors()) {\n      console.error(info.errors);\n    }\n\n    if (stats.hasWarnings()) {\n      console.warn(info.warnings);\n    }\n\n    const buildInfo = stats.toString({\n      colors: true,\n      children: true,\n      chunks: false,\n      modules: false,\n      chunkModules: false,\n      hash: false,\n      version: false,\n    });\n    console.log(buildInfo);\n    done(0);\n  });\n}\n```\n\n打包调用的就是`webpack`的方法了\n\n但别以为就是这么一小段\n\n`webpackConfig`Ant-tools可是对其进行了大量的处理\n\n我只把其中需要注意的说一下\n\n##### webpack.build.conf.js\n\n在`webpack.build.conf.js`中\n\n一上来就有个注释\n\n```\n// noParse still leave `require('./locale' + name)` in dist files\n// ignore is better\n// http://stackoverflow.com/q/25384360\n```\n\n我看了下sf，大意是指webpack给moment打包会把所有语言文件打包进去，大大增加包体积。\n\n所以最好用`ignorePlugin`把他忽略了\n\n这个`js`文件exports了两个config\n\n一个是`webpackConfig`另一个是`webpackDarkConfig`\n\n应该是两个主题不同的配置，导出不同的样式文件\n\n看样子以后写主题也要用类似的方法了，写UI库的时候尝试一下。\n\n##### getWebpackConfig.js\n\n*尝试打包了一下，打包好慢，花了四分多钟*\n\n这个文件可就大了，差不多300行，其中大多数是配置和对各种类型文件的处理，其中运用了大量的插件，很多都是打包必须的插件，我不是很感兴趣。\n\n但有个插件我很感兴趣\n\n`WebpackBar`\n\n引入`const WebpackBar = require('webpackbar');`\n\n用法很简单\n\n```\nnew WebpackBar({\n   name: '🚚  Ant Design Vue Tools',//这个图标ant-tools使用时并没有加载出来\n   color: '#2f54eb',\n}),\n```\n\n改成自己的\n\n```\nnew WebpackBar({\n   name: 'Archy',\n   color: '#2570a1',\n}),\n```\n\n![cool](/images/0723_4.jpg)\n\n**没什么卵用，但这样很coolllllllllll！！！**\n\n然后执行打包\n\n```\n// Development\n    const uncompressedConfig = merge({}, config, {\n      entry: {\n        [distFileBaseName]: entry,\n      },\n      mode: 'development',\n      plugins: [\n        new MiniCssExtractPlugin({\n          filename: '[name].css',\n        }),\n      ],\n    });\n\n    // Production\n    const prodConfig = merge({}, config, {\n      entry: {\n        [`${distFileBaseName}.min`]: entry,\n      },\n      mode: 'production',\n      plugins: [\n        new webpack.optimize.ModuleConcatenationPlugin(),\n        new webpack.LoaderOptionsPlugin({\n          minimize: true,\n        }),\n        new MiniCssExtractPlugin({\n          filename: '[name].css',\n        }),\n      ],\n      optimization: {\n        minimize: true,\n        minimizer: [new CssMinimizerPlugin({})],\n      },\n    });\n```\n\n打了两份代码，一份压缩的，一份没有压缩的\n\n最后返回了配置。\n","source":"_posts/antd-tools-2.md","raw":"---\ntitle: antd-tools详解（二）\ndate: 2021-07-23 15:18:11\ntags: [AntDesignVue源码学习,Ant-tools,前端,node]\n---\n\n### dist\n\n趁热打铁，直接看打包的代码吧\n\n`\"dist\": \"node --max_old_space_size=8192 antd-tools/cli/run.js dist\",`\n\n也就是这个命令\n\n`gulp`执行`dist`任务，在`antd-tools\\gulpfile.js`里面找到`dist`任务\n\n```\ngulp.task(\n  'dist',\n  gulp.series(done => {\n    dist(done);\n  }),\n);\n```\n\n没有做其他事情，就是单纯调用`dist`方法\n\n```\nfunction dist(done) {\n  rimraf.sync(path.join(cwd, 'dist'));\n  process.env.RUN_ENV = 'PRODUCTION';\n  const webpackConfig = require(getProjectPath('webpack.build.conf.js'));\n  webpack(webpackConfig, (err, stats) => {\n    if (err) {\n      console.error(err.stack || err);\n      if (err.details) {\n        console.error(err.details);\n      }\n      return;\n    }\n\n    const info = stats.toJson();\n\n    if (stats.hasErrors()) {\n      console.error(info.errors);\n    }\n\n    if (stats.hasWarnings()) {\n      console.warn(info.warnings);\n    }\n\n    const buildInfo = stats.toString({\n      colors: true,\n      children: true,\n      chunks: false,\n      modules: false,\n      chunkModules: false,\n      hash: false,\n      version: false,\n    });\n    console.log(buildInfo);\n    done(0);\n  });\n}\n```\n\n打包调用的就是`webpack`的方法了\n\n但别以为就是这么一小段\n\n`webpackConfig`Ant-tools可是对其进行了大量的处理\n\n我只把其中需要注意的说一下\n\n##### webpack.build.conf.js\n\n在`webpack.build.conf.js`中\n\n一上来就有个注释\n\n```\n// noParse still leave `require('./locale' + name)` in dist files\n// ignore is better\n// http://stackoverflow.com/q/25384360\n```\n\n我看了下sf，大意是指webpack给moment打包会把所有语言文件打包进去，大大增加包体积。\n\n所以最好用`ignorePlugin`把他忽略了\n\n这个`js`文件exports了两个config\n\n一个是`webpackConfig`另一个是`webpackDarkConfig`\n\n应该是两个主题不同的配置，导出不同的样式文件\n\n看样子以后写主题也要用类似的方法了，写UI库的时候尝试一下。\n\n##### getWebpackConfig.js\n\n*尝试打包了一下，打包好慢，花了四分多钟*\n\n这个文件可就大了，差不多300行，其中大多数是配置和对各种类型文件的处理，其中运用了大量的插件，很多都是打包必须的插件，我不是很感兴趣。\n\n但有个插件我很感兴趣\n\n`WebpackBar`\n\n引入`const WebpackBar = require('webpackbar');`\n\n用法很简单\n\n```\nnew WebpackBar({\n   name: '🚚  Ant Design Vue Tools',//这个图标ant-tools使用时并没有加载出来\n   color: '#2f54eb',\n}),\n```\n\n改成自己的\n\n```\nnew WebpackBar({\n   name: 'Archy',\n   color: '#2570a1',\n}),\n```\n\n![cool](/images/0723_4.jpg)\n\n**没什么卵用，但这样很coolllllllllll！！！**\n\n然后执行打包\n\n```\n// Development\n    const uncompressedConfig = merge({}, config, {\n      entry: {\n        [distFileBaseName]: entry,\n      },\n      mode: 'development',\n      plugins: [\n        new MiniCssExtractPlugin({\n          filename: '[name].css',\n        }),\n      ],\n    });\n\n    // Production\n    const prodConfig = merge({}, config, {\n      entry: {\n        [`${distFileBaseName}.min`]: entry,\n      },\n      mode: 'production',\n      plugins: [\n        new webpack.optimize.ModuleConcatenationPlugin(),\n        new webpack.LoaderOptionsPlugin({\n          minimize: true,\n        }),\n        new MiniCssExtractPlugin({\n          filename: '[name].css',\n        }),\n      ],\n      optimization: {\n        minimize: true,\n        minimizer: [new CssMinimizerPlugin({})],\n      },\n    });\n```\n\n打了两份代码，一份压缩的，一份没有压缩的\n\n最后返回了配置。\n","slug":"antd-tools-2","published":1,"updated":"2021-07-23T08:26:37.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrn8zvkd000188v76xvnfkm8","content":"<h3 id=\"dist\"><a href=\"#dist\" class=\"headerlink\" title=\"dist\"></a>dist</h3><p>趁热打铁，直接看打包的代码吧</p>\n<p><code>&quot;dist&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js dist&quot;,</code></p>\n<p>也就是这个命令</p>\n<p><code>gulp</code>执行<code>dist</code>任务，在<code>antd-tools\\gulpfile.js</code>里面找到<code>dist</code>任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;dist&#x27;,</span><br><span class=\"line\">  gulp.series(done =&gt; &#123;</span><br><span class=\"line\">    dist(done);</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>没有做其他事情，就是单纯调用<code>dist</code>方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function dist(done) &#123;</span><br><span class=\"line\">  rimraf.sync(path.join(cwd, &#x27;dist&#x27;));</span><br><span class=\"line\">  process.env.RUN_ENV = &#x27;PRODUCTION&#x27;;</span><br><span class=\"line\">  const webpackConfig = require(getProjectPath(&#x27;webpack.build.conf.js&#x27;));</span><br><span class=\"line\">  webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class=\"line\">    if (err) &#123;</span><br><span class=\"line\">      console.error(err.stack || err);</span><br><span class=\"line\">      if (err.details) &#123;</span><br><span class=\"line\">        console.error(err.details);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const info = stats.toJson();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (stats.hasErrors()) &#123;</span><br><span class=\"line\">      console.error(info.errors);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (stats.hasWarnings()) &#123;</span><br><span class=\"line\">      console.warn(info.warnings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const buildInfo = stats.toString(&#123;</span><br><span class=\"line\">      colors: true,</span><br><span class=\"line\">      children: true,</span><br><span class=\"line\">      chunks: false,</span><br><span class=\"line\">      modules: false,</span><br><span class=\"line\">      chunkModules: false,</span><br><span class=\"line\">      hash: false,</span><br><span class=\"line\">      version: false,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(buildInfo);</span><br><span class=\"line\">    done(0);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打包调用的就是<code>webpack</code>的方法了</p>\n<p>但别以为就是这么一小段</p>\n<p><code>webpackConfig</code>Ant-tools可是对其进行了大量的处理</p>\n<p>我只把其中需要注意的说一下</p>\n<h5 id=\"webpack-build-conf-js\"><a href=\"#webpack-build-conf-js\" class=\"headerlink\" title=\"webpack.build.conf.js\"></a>webpack.build.conf.js</h5><p>在<code>webpack.build.conf.js</code>中</p>\n<p>一上来就有个注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// noParse still leave `require(&#x27;./locale&#x27; + name)` in dist files</span><br><span class=\"line\">// ignore is better</span><br><span class=\"line\">// http://stackoverflow.com/q/25384360</span><br></pre></td></tr></table></figure>\n\n<p>我看了下sf，大意是指webpack给moment打包会把所有语言文件打包进去，大大增加包体积。</p>\n<p>所以最好用<code>ignorePlugin</code>把他忽略了</p>\n<p>这个<code>js</code>文件exports了两个config</p>\n<p>一个是<code>webpackConfig</code>另一个是<code>webpackDarkConfig</code></p>\n<p>应该是两个主题不同的配置，导出不同的样式文件</p>\n<p>看样子以后写主题也要用类似的方法了，写UI库的时候尝试一下。</p>\n<h5 id=\"getWebpackConfig-js\"><a href=\"#getWebpackConfig-js\" class=\"headerlink\" title=\"getWebpackConfig.js\"></a>getWebpackConfig.js</h5><p><em>尝试打包了一下，打包好慢，花了四分多钟</em></p>\n<p>这个文件可就大了，差不多300行，其中大多数是配置和对各种类型文件的处理，其中运用了大量的插件，很多都是打包必须的插件，我不是很感兴趣。</p>\n<p>但有个插件我很感兴趣</p>\n<p><code>WebpackBar</code></p>\n<p>引入<code>const WebpackBar = require(&#39;webpackbar&#39;);</code></p>\n<p>用法很简单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new WebpackBar(&#123;</span><br><span class=\"line\">   name: &#x27;🚚  Ant Design Vue Tools&#x27;,//这个图标ant-tools使用时并没有加载出来</span><br><span class=\"line\">   color: &#x27;#2f54eb&#x27;,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p>改成自己的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new WebpackBar(&#123;</span><br><span class=\"line\">   name: &#x27;Archy&#x27;,</span><br><span class=\"line\">   color: &#x27;#2570a1&#x27;,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0723_4.jpg\" alt=\"cool\"></p>\n<p><strong>没什么卵用，但这样很coolllllllllll！！！</strong></p>\n<p>然后执行打包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Development</span><br><span class=\"line\">    const uncompressedConfig = merge(&#123;&#125;, config, &#123;</span><br><span class=\"line\">      entry: &#123;</span><br><span class=\"line\">        [distFileBaseName]: entry,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mode: &#x27;development&#x27;,</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">          filename: &#x27;[name].css&#x27;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Production</span><br><span class=\"line\">    const prodConfig = merge(&#123;&#125;, config, &#123;</span><br><span class=\"line\">      entry: &#123;</span><br><span class=\"line\">        [`$&#123;distFileBaseName&#125;.min`]: entry,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mode: &#x27;production&#x27;,</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        new webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class=\"line\">        new webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">          minimize: true,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">          filename: &#x27;[name].css&#x27;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      optimization: &#123;</span><br><span class=\"line\">        minimize: true,</span><br><span class=\"line\">        minimizer: [new CssMinimizerPlugin(&#123;&#125;)],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>打了两份代码，一份压缩的，一份没有压缩的</p>\n<p>最后返回了配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"dist\"><a href=\"#dist\" class=\"headerlink\" title=\"dist\"></a>dist</h3><p>趁热打铁，直接看打包的代码吧</p>\n<p><code>&quot;dist&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js dist&quot;,</code></p>\n<p>也就是这个命令</p>\n<p><code>gulp</code>执行<code>dist</code>任务，在<code>antd-tools\\gulpfile.js</code>里面找到<code>dist</code>任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;dist&#x27;,</span><br><span class=\"line\">  gulp.series(done =&gt; &#123;</span><br><span class=\"line\">    dist(done);</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>没有做其他事情，就是单纯调用<code>dist</code>方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function dist(done) &#123;</span><br><span class=\"line\">  rimraf.sync(path.join(cwd, &#x27;dist&#x27;));</span><br><span class=\"line\">  process.env.RUN_ENV = &#x27;PRODUCTION&#x27;;</span><br><span class=\"line\">  const webpackConfig = require(getProjectPath(&#x27;webpack.build.conf.js&#x27;));</span><br><span class=\"line\">  webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class=\"line\">    if (err) &#123;</span><br><span class=\"line\">      console.error(err.stack || err);</span><br><span class=\"line\">      if (err.details) &#123;</span><br><span class=\"line\">        console.error(err.details);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const info = stats.toJson();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (stats.hasErrors()) &#123;</span><br><span class=\"line\">      console.error(info.errors);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (stats.hasWarnings()) &#123;</span><br><span class=\"line\">      console.warn(info.warnings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const buildInfo = stats.toString(&#123;</span><br><span class=\"line\">      colors: true,</span><br><span class=\"line\">      children: true,</span><br><span class=\"line\">      chunks: false,</span><br><span class=\"line\">      modules: false,</span><br><span class=\"line\">      chunkModules: false,</span><br><span class=\"line\">      hash: false,</span><br><span class=\"line\">      version: false,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(buildInfo);</span><br><span class=\"line\">    done(0);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打包调用的就是<code>webpack</code>的方法了</p>\n<p>但别以为就是这么一小段</p>\n<p><code>webpackConfig</code>Ant-tools可是对其进行了大量的处理</p>\n<p>我只把其中需要注意的说一下</p>\n<h5 id=\"webpack-build-conf-js\"><a href=\"#webpack-build-conf-js\" class=\"headerlink\" title=\"webpack.build.conf.js\"></a>webpack.build.conf.js</h5><p>在<code>webpack.build.conf.js</code>中</p>\n<p>一上来就有个注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// noParse still leave `require(&#x27;./locale&#x27; + name)` in dist files</span><br><span class=\"line\">// ignore is better</span><br><span class=\"line\">// http://stackoverflow.com/q/25384360</span><br></pre></td></tr></table></figure>\n\n<p>我看了下sf，大意是指webpack给moment打包会把所有语言文件打包进去，大大增加包体积。</p>\n<p>所以最好用<code>ignorePlugin</code>把他忽略了</p>\n<p>这个<code>js</code>文件exports了两个config</p>\n<p>一个是<code>webpackConfig</code>另一个是<code>webpackDarkConfig</code></p>\n<p>应该是两个主题不同的配置，导出不同的样式文件</p>\n<p>看样子以后写主题也要用类似的方法了，写UI库的时候尝试一下。</p>\n<h5 id=\"getWebpackConfig-js\"><a href=\"#getWebpackConfig-js\" class=\"headerlink\" title=\"getWebpackConfig.js\"></a>getWebpackConfig.js</h5><p><em>尝试打包了一下，打包好慢，花了四分多钟</em></p>\n<p>这个文件可就大了，差不多300行，其中大多数是配置和对各种类型文件的处理，其中运用了大量的插件，很多都是打包必须的插件，我不是很感兴趣。</p>\n<p>但有个插件我很感兴趣</p>\n<p><code>WebpackBar</code></p>\n<p>引入<code>const WebpackBar = require(&#39;webpackbar&#39;);</code></p>\n<p>用法很简单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new WebpackBar(&#123;</span><br><span class=\"line\">   name: &#x27;🚚  Ant Design Vue Tools&#x27;,//这个图标ant-tools使用时并没有加载出来</span><br><span class=\"line\">   color: &#x27;#2f54eb&#x27;,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p>改成自己的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new WebpackBar(&#123;</span><br><span class=\"line\">   name: &#x27;Archy&#x27;,</span><br><span class=\"line\">   color: &#x27;#2570a1&#x27;,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/0723_4.jpg\" alt=\"cool\"></p>\n<p><strong>没什么卵用，但这样很coolllllllllll！！！</strong></p>\n<p>然后执行打包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Development</span><br><span class=\"line\">    const uncompressedConfig = merge(&#123;&#125;, config, &#123;</span><br><span class=\"line\">      entry: &#123;</span><br><span class=\"line\">        [distFileBaseName]: entry,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mode: &#x27;development&#x27;,</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">          filename: &#x27;[name].css&#x27;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Production</span><br><span class=\"line\">    const prodConfig = merge(&#123;&#125;, config, &#123;</span><br><span class=\"line\">      entry: &#123;</span><br><span class=\"line\">        [`$&#123;distFileBaseName&#125;.min`]: entry,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mode: &#x27;production&#x27;,</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        new webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class=\"line\">        new webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">          minimize: true,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">          filename: &#x27;[name].css&#x27;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      optimization: &#123;</span><br><span class=\"line\">        minimize: true,</span><br><span class=\"line\">        minimizer: [new CssMinimizerPlugin(&#123;&#125;)],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>打了两份代码，一份压缩的，一份没有压缩的</p>\n<p>最后返回了配置。</p>\n"},{"title":"开发一个自己的组件库ArchyUi（一）","date":"2021-07-28T02:23:54.000Z","_content":"\n### 前言\n\n毕业在公司上班快一年了，目前也负责了几个项目的前端。\n\n这半年负责的一个新项目底下有十来个系统，所有系统的基础框架是我写的，但当时时间很紧，公司之前也没有好的前端技术沉淀，所以是从零开始写的框架，没有稳定版本，也没有形成依赖包，甚至没有测试过。导致后来开发后，基础框架有修改，需要所有系统手动修改基础框架的内容。现在项目快结束了（真是他妈的一次痛苦的项目经历）。开始沉淀技术，形成稳定版本，并形成本地的npm依赖包。不会开源，因为开源需要申请。但会分享一些开发过程。\n\n### 借鉴\n\n之前也看过了[Ant-Design-Vue](https://github.com/vueComponent/ant-design-vue/blob/next)源码，目前也准备在此基础上进行开发。想完全从零开发，效率低下而且我还没那个水平。\n\n### 规划\n\n1. 建好项目结构\n2. 写好工具\n3. 开发组件\n4. 测试npmLink\n5. 完成\n\n### 项目结构\n\n首先用`vue create archyui`新建`vue3`项目\n\n然后是最轻松的建项目环节，借鉴了一下[Ant-Design-Vue](https://github.com/vueComponent/ant-design-vue/blob/next)，最后是这样的\n\n![目录](/images/0728_1.jpg)\n\n```\nassets-基础资源\ncomponents-组件\ndocs-文档\nexamples-展示组件，开发中用于组件调试，开发完用于组件库展示\nicons-图标\nnode_modules-三方依赖\ntests-测试\ntools-工具\ntypes-ts类型定义\n```\n\n### 工具开发\n\n之前把Ant-design工具的源码拉出来看了，也写了解析，[这里](http://archy.ink/antd-tools-1/)\n\n##### examples\n\n首先是把`examples`用起来\n\n先把`package.json`,`scripts`命令改一下\n\n```\n  \"scripts\": {\n    \"example-serve\": \"vue-cli-service serve\",\n    \"example-build\": \"vue-cli-service build\"\n  },\n```\n\n用作起程序和打包\n\n然后新建个`vue.config.js`\n\n```\nmodule.exports = {\n  pages: {\n    index: {\n      entry: 'examples/index.js',\n      template: 'examples/index.html',\n    },\n  }\n}\n```\n\n改一下`template`路径和`js`路径\n\n至于`examples`文件夹里面有什么，其实暂时就是最基础的运行程序\n\n```\n//examples/index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta\n      http-equiv=\"Cache-Control\"\n      content=\"no-cache, no-store, must-revalidate\"\n    />\n    <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n    <meta http-equiv=\"Expires\" content=\"0\" />\n    <title>Archy UI</title>\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"./favicon.ico\" />\n  </head>\n\n  <body>\n    <noscript>\n      <strong>JS加载失败</strong>\n    </noscript>\n    <div id=\"app\" style=\"padding: 50px\"></div>\n  </body>\n</html>\n```\n\n```\n//examples/App.vue\n<template>\n  <h1>Archy UI</div>\n  <HelloWorld />\n</template>\n\n<script lang=\"ts\">\nimport { Options, Vue } from \"vue-class-component\";\nimport { HelloWorld } from \"../components\";\n\n@Options({\n  components: {\n    HelloWorld,\n  },\n})\nexport default class App extends Vue {\n  data() {\n    return {\n    };\n  }\n}\n</script>\n\n<style lang=\"less\"></style>\n\n```\n\n```\n//examples/index.js\nimport { createApp, version } from 'vue'\nimport App from './App.vue'\n\nconst pkg = require('../package.json')\n\nconsole.log('Vue version:' + version)\nconsole.log('Archy UI version:' + pkg.version);\n\nconst app = createApp(App)\n\napp.mount('#app')\n\n```\n\n最后执行\n\n`yarn example-server`\n\n成功运行\n\n![界面](/images/0728_2.jpg)\n\n##### jest测试\n\n以前没用过单元测试，这次学习一下\n\n但遇到了个问题\n\n`import { shallowMount } from '@vue/test-utils'`\n\n这句话一直报错`找不到模块“@vue/test-utils”或其相应的类型声明`\n\n排查了一下，发现`@vue/test-utils``2.0.0-rc.11`不知道为什么`dist`里面没有类型声明文件了\n\n`package.json`里面固定了一下版本`\"@vue/test-utils\": \"2.0.0-rc.10\"`就可以了\n\n顺便`package.json`里面把命令加了`\"test:unit\": \"vue-cli-service test:unit\"`\n\n然后输入`yarn test:unit example`\n\n![测试成功](/images/0728_3.jpg)\n\n##### 命令行工具开发\n\n先三连\n\n`yarn add colorful --dev`\n\n`yarn add gulp --dev`\n\n`yarn add commander --dev`\n\n三个工具之前都是介绍过的\n\n[colorful](http://archy.ink/colorful/)\n\n[gulp](http://archy.ink/gulp/)\n\n[commander](http://archy.ink/commander/)\n\n顺便再介绍一个[炫酷的东西](https://patorjk.com/software/taag/),生成Banner，像这样\n\n```\n                     .__                .__ \n_____ _______   ____ |  |__ ___.__.__ __|__|\n\\__  \\\\_  __ \\_/ ___\\|  |  <   |  |  |  \\  |\n / __ \\|  | \\/\\  \\___|   Y  \\___  |  |  /  |\n(____  /__|    \\___  >___|  / ____|____/|__|\n     \\/            \\/     \\/\\/              \n```\n\n先来个帮助命令\n\n在`package.json`里面加两个脚本\n\n```\n    \"tools\": \"node tools/cli/index.js\",\n    \"ui-help\": \"node tools/cli/help.js\"\n```\n\n建一个对象`_scripts`用来存储帮助信息\n\n```\n  \"_scripts\": {\n    \"example-serve\": \"run example serve,use for developing debug and show components after finished \",\n    \"example-build\": \"build example for show components page\",\n    \"test:unit\": \"unit test\",\n    \"tools\": \"run tools,the source code path is /tools/\",\n    \"ui-help\": \"run ui help\"\n  },\n```\n\n然后在`tools`下新建`cli/index.js`和`cli/help.js`\n\n没什么好讲的，直接上代码\n\n```\n/*\n * @Author: Archy\n * @Date: 2021-07-28 16:05:16\n * @LastEditors: Archy\n * @LastEditTime: 2021-07-28 16:31:02\n * @FilePath: \\archyui\\tools\\cli\\help.js\n * @description:\n */\n'use strict'\n\nrequire('colorful').colorful()\nrequire('colorful').isatty = true\nconst program = require('commander')\nconst pkg = require('../../package.json')\n\nprogram.version(\n  `\n  version:${pkg.version.to.bold.blue.color}\n  `,\n  '-v, --version',\n  `display current ${'ArchyUI'.to.bold.blue.color} version`\n)\n\nprogram.addHelpText('beforeAll', `\n█████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗\n██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║\n███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║\n██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║\n██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║\n╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝\n\n`.to.bold.blue.color)\nprogram.name('yarn or npm run').usage('[scripts] options')\nprogram.helpOption(false)\n\nObject.entries(pkg._scripts).forEach((item) => {\n  program.option(item[0], item[1])\n})\n\nprogram.parse(process.argv)\n\nconst proc = program.runningCommand\n\nif (proc) {\n  proc.on('close', process.exit.bind(process))\n  proc.on('error', () => {\n    process.exit(1)\n  })\n}\n\nprogram.help()\n\n```\n\n```\n/*\n * @Author: Archy\n * @Date: 2021-07-28 14:32:12\n * @LastEditors: Archy\n * @LastEditTime: 2021-07-28 16:26:44\n * @FilePath: \\archyui\\tools\\cli\\index.js\n * @description: \n */\n'use strict'\n\nrequire('colorful').colorful()\nrequire('colorful').isatty = true\nconst program = require('commander')\nconst pkg = require('../../package.json')\n\nprogram.version(\n  `\n  █████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗\n  ██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║\n  ███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║\n  ██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║\n  ██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║\n  ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝\n\n  \n  version:${pkg.version.to.bold.blue.color}\n  `,\n  '-v, --version',\n  `display current ${'ArchyUi'.to.bold.blue.color} version`\n)\nprogram.option('-h, --help', `display ${'help'.to.bold.blue.color} for command`)\n\nprogram.addHelpText(\n  'beforeAll',\n  '✂  ArchyUI Tools'.to.bold.blue.color,\n)\nprogram.name('<yarn tools|npm run tools>')\nprogram.parse(process.argv)\nconst proc = program.runningCommand\n\nif (proc) {\n  proc.on('close', process.exit.bind(process))\n  proc.on('error', () => {\n    process.exit(1)\n  })\n}\n\nconst subCmd = program.args[0]\nif (!subCmd) {\n  program.help()\n}\n\n```\n\n**注意**\n\n关于`banner`要注意的是\n\n`\\`要用`\\\\`代替，不然无法显示\n\n里面涉及到很多`commander`\t的方法，不懂的话建议去看文档[Commander.js](https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md)写得很清楚\n\n测试一下，在根目录输入`yarn ui-help`\n\n![1](/images/0728_4.jpg)\n\n输入`yarn tools`\n\n![1](/images/0728_5.jpg)\n\n","source":"_posts/archy-ui-01.md","raw":"---\ntitle: 开发一个自己的组件库ArchyUi（一）\ndate: 2021-07-28 10:23:54\ntags: [ArchyUI，前端]\n---\n\n### 前言\n\n毕业在公司上班快一年了，目前也负责了几个项目的前端。\n\n这半年负责的一个新项目底下有十来个系统，所有系统的基础框架是我写的，但当时时间很紧，公司之前也没有好的前端技术沉淀，所以是从零开始写的框架，没有稳定版本，也没有形成依赖包，甚至没有测试过。导致后来开发后，基础框架有修改，需要所有系统手动修改基础框架的内容。现在项目快结束了（真是他妈的一次痛苦的项目经历）。开始沉淀技术，形成稳定版本，并形成本地的npm依赖包。不会开源，因为开源需要申请。但会分享一些开发过程。\n\n### 借鉴\n\n之前也看过了[Ant-Design-Vue](https://github.com/vueComponent/ant-design-vue/blob/next)源码，目前也准备在此基础上进行开发。想完全从零开发，效率低下而且我还没那个水平。\n\n### 规划\n\n1. 建好项目结构\n2. 写好工具\n3. 开发组件\n4. 测试npmLink\n5. 完成\n\n### 项目结构\n\n首先用`vue create archyui`新建`vue3`项目\n\n然后是最轻松的建项目环节，借鉴了一下[Ant-Design-Vue](https://github.com/vueComponent/ant-design-vue/blob/next)，最后是这样的\n\n![目录](/images/0728_1.jpg)\n\n```\nassets-基础资源\ncomponents-组件\ndocs-文档\nexamples-展示组件，开发中用于组件调试，开发完用于组件库展示\nicons-图标\nnode_modules-三方依赖\ntests-测试\ntools-工具\ntypes-ts类型定义\n```\n\n### 工具开发\n\n之前把Ant-design工具的源码拉出来看了，也写了解析，[这里](http://archy.ink/antd-tools-1/)\n\n##### examples\n\n首先是把`examples`用起来\n\n先把`package.json`,`scripts`命令改一下\n\n```\n  \"scripts\": {\n    \"example-serve\": \"vue-cli-service serve\",\n    \"example-build\": \"vue-cli-service build\"\n  },\n```\n\n用作起程序和打包\n\n然后新建个`vue.config.js`\n\n```\nmodule.exports = {\n  pages: {\n    index: {\n      entry: 'examples/index.js',\n      template: 'examples/index.html',\n    },\n  }\n}\n```\n\n改一下`template`路径和`js`路径\n\n至于`examples`文件夹里面有什么，其实暂时就是最基础的运行程序\n\n```\n//examples/index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta\n      http-equiv=\"Cache-Control\"\n      content=\"no-cache, no-store, must-revalidate\"\n    />\n    <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n    <meta http-equiv=\"Expires\" content=\"0\" />\n    <title>Archy UI</title>\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"./favicon.ico\" />\n  </head>\n\n  <body>\n    <noscript>\n      <strong>JS加载失败</strong>\n    </noscript>\n    <div id=\"app\" style=\"padding: 50px\"></div>\n  </body>\n</html>\n```\n\n```\n//examples/App.vue\n<template>\n  <h1>Archy UI</div>\n  <HelloWorld />\n</template>\n\n<script lang=\"ts\">\nimport { Options, Vue } from \"vue-class-component\";\nimport { HelloWorld } from \"../components\";\n\n@Options({\n  components: {\n    HelloWorld,\n  },\n})\nexport default class App extends Vue {\n  data() {\n    return {\n    };\n  }\n}\n</script>\n\n<style lang=\"less\"></style>\n\n```\n\n```\n//examples/index.js\nimport { createApp, version } from 'vue'\nimport App from './App.vue'\n\nconst pkg = require('../package.json')\n\nconsole.log('Vue version:' + version)\nconsole.log('Archy UI version:' + pkg.version);\n\nconst app = createApp(App)\n\napp.mount('#app')\n\n```\n\n最后执行\n\n`yarn example-server`\n\n成功运行\n\n![界面](/images/0728_2.jpg)\n\n##### jest测试\n\n以前没用过单元测试，这次学习一下\n\n但遇到了个问题\n\n`import { shallowMount } from '@vue/test-utils'`\n\n这句话一直报错`找不到模块“@vue/test-utils”或其相应的类型声明`\n\n排查了一下，发现`@vue/test-utils``2.0.0-rc.11`不知道为什么`dist`里面没有类型声明文件了\n\n`package.json`里面固定了一下版本`\"@vue/test-utils\": \"2.0.0-rc.10\"`就可以了\n\n顺便`package.json`里面把命令加了`\"test:unit\": \"vue-cli-service test:unit\"`\n\n然后输入`yarn test:unit example`\n\n![测试成功](/images/0728_3.jpg)\n\n##### 命令行工具开发\n\n先三连\n\n`yarn add colorful --dev`\n\n`yarn add gulp --dev`\n\n`yarn add commander --dev`\n\n三个工具之前都是介绍过的\n\n[colorful](http://archy.ink/colorful/)\n\n[gulp](http://archy.ink/gulp/)\n\n[commander](http://archy.ink/commander/)\n\n顺便再介绍一个[炫酷的东西](https://patorjk.com/software/taag/),生成Banner，像这样\n\n```\n                     .__                .__ \n_____ _______   ____ |  |__ ___.__.__ __|__|\n\\__  \\\\_  __ \\_/ ___\\|  |  <   |  |  |  \\  |\n / __ \\|  | \\/\\  \\___|   Y  \\___  |  |  /  |\n(____  /__|    \\___  >___|  / ____|____/|__|\n     \\/            \\/     \\/\\/              \n```\n\n先来个帮助命令\n\n在`package.json`里面加两个脚本\n\n```\n    \"tools\": \"node tools/cli/index.js\",\n    \"ui-help\": \"node tools/cli/help.js\"\n```\n\n建一个对象`_scripts`用来存储帮助信息\n\n```\n  \"_scripts\": {\n    \"example-serve\": \"run example serve,use for developing debug and show components after finished \",\n    \"example-build\": \"build example for show components page\",\n    \"test:unit\": \"unit test\",\n    \"tools\": \"run tools,the source code path is /tools/\",\n    \"ui-help\": \"run ui help\"\n  },\n```\n\n然后在`tools`下新建`cli/index.js`和`cli/help.js`\n\n没什么好讲的，直接上代码\n\n```\n/*\n * @Author: Archy\n * @Date: 2021-07-28 16:05:16\n * @LastEditors: Archy\n * @LastEditTime: 2021-07-28 16:31:02\n * @FilePath: \\archyui\\tools\\cli\\help.js\n * @description:\n */\n'use strict'\n\nrequire('colorful').colorful()\nrequire('colorful').isatty = true\nconst program = require('commander')\nconst pkg = require('../../package.json')\n\nprogram.version(\n  `\n  version:${pkg.version.to.bold.blue.color}\n  `,\n  '-v, --version',\n  `display current ${'ArchyUI'.to.bold.blue.color} version`\n)\n\nprogram.addHelpText('beforeAll', `\n█████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗\n██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║\n███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║\n██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║\n██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║\n╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝\n\n`.to.bold.blue.color)\nprogram.name('yarn or npm run').usage('[scripts] options')\nprogram.helpOption(false)\n\nObject.entries(pkg._scripts).forEach((item) => {\n  program.option(item[0], item[1])\n})\n\nprogram.parse(process.argv)\n\nconst proc = program.runningCommand\n\nif (proc) {\n  proc.on('close', process.exit.bind(process))\n  proc.on('error', () => {\n    process.exit(1)\n  })\n}\n\nprogram.help()\n\n```\n\n```\n/*\n * @Author: Archy\n * @Date: 2021-07-28 14:32:12\n * @LastEditors: Archy\n * @LastEditTime: 2021-07-28 16:26:44\n * @FilePath: \\archyui\\tools\\cli\\index.js\n * @description: \n */\n'use strict'\n\nrequire('colorful').colorful()\nrequire('colorful').isatty = true\nconst program = require('commander')\nconst pkg = require('../../package.json')\n\nprogram.version(\n  `\n  █████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗\n  ██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║\n  ███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║\n  ██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║\n  ██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║\n  ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝\n\n  \n  version:${pkg.version.to.bold.blue.color}\n  `,\n  '-v, --version',\n  `display current ${'ArchyUi'.to.bold.blue.color} version`\n)\nprogram.option('-h, --help', `display ${'help'.to.bold.blue.color} for command`)\n\nprogram.addHelpText(\n  'beforeAll',\n  '✂  ArchyUI Tools'.to.bold.blue.color,\n)\nprogram.name('<yarn tools|npm run tools>')\nprogram.parse(process.argv)\nconst proc = program.runningCommand\n\nif (proc) {\n  proc.on('close', process.exit.bind(process))\n  proc.on('error', () => {\n    process.exit(1)\n  })\n}\n\nconst subCmd = program.args[0]\nif (!subCmd) {\n  program.help()\n}\n\n```\n\n**注意**\n\n关于`banner`要注意的是\n\n`\\`要用`\\\\`代替，不然无法显示\n\n里面涉及到很多`commander`\t的方法，不懂的话建议去看文档[Commander.js](https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md)写得很清楚\n\n测试一下，在根目录输入`yarn ui-help`\n\n![1](/images/0728_4.jpg)\n\n输入`yarn tools`\n\n![1](/images/0728_5.jpg)\n\n","slug":"archy-ui-01","published":1,"updated":"2021-07-28T08:37:31.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrn8zvki000388v72lfagid5","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>毕业在公司上班快一年了，目前也负责了几个项目的前端。</p>\n<p>这半年负责的一个新项目底下有十来个系统，所有系统的基础框架是我写的，但当时时间很紧，公司之前也没有好的前端技术沉淀，所以是从零开始写的框架，没有稳定版本，也没有形成依赖包，甚至没有测试过。导致后来开发后，基础框架有修改，需要所有系统手动修改基础框架的内容。现在项目快结束了（真是他妈的一次痛苦的项目经历）。开始沉淀技术，形成稳定版本，并形成本地的npm依赖包。不会开源，因为开源需要申请。但会分享一些开发过程。</p>\n<h3 id=\"借鉴\"><a href=\"#借鉴\" class=\"headerlink\" title=\"借鉴\"></a>借鉴</h3><p>之前也看过了<a href=\"https://github.com/vueComponent/ant-design-vue/blob/next\">Ant-Design-Vue</a>源码，目前也准备在此基础上进行开发。想完全从零开发，效率低下而且我还没那个水平。</p>\n<h3 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h3><ol>\n<li>建好项目结构</li>\n<li>写好工具</li>\n<li>开发组件</li>\n<li>测试npmLink</li>\n<li>完成</li>\n</ol>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>首先用<code>vue create archyui</code>新建<code>vue3</code>项目</p>\n<p>然后是最轻松的建项目环节，借鉴了一下<a href=\"https://github.com/vueComponent/ant-design-vue/blob/next\">Ant-Design-Vue</a>，最后是这样的</p>\n<p><img src=\"/images/0728_1.jpg\" alt=\"目录\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assets-基础资源</span><br><span class=\"line\">components-组件</span><br><span class=\"line\">docs-文档</span><br><span class=\"line\">examples-展示组件，开发中用于组件调试，开发完用于组件库展示</span><br><span class=\"line\">icons-图标</span><br><span class=\"line\">node_modules-三方依赖</span><br><span class=\"line\">tests-测试</span><br><span class=\"line\">tools-工具</span><br><span class=\"line\">types-ts类型定义</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具开发\"><a href=\"#工具开发\" class=\"headerlink\" title=\"工具开发\"></a>工具开发</h3><p>之前把Ant-design工具的源码拉出来看了，也写了解析，<a href=\"http://archy.ink/antd-tools-1/\">这里</a></p>\n<h5 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h5><p>首先是把<code>examples</code>用起来</p>\n<p>先把<code>package.json</code>,<code>scripts</code>命令改一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;example-serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class=\"line\">  &quot;example-build&quot;: &quot;vue-cli-service build&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>用作起程序和打包</p>\n<p>然后新建个<code>vue.config.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      entry: &#x27;examples/index.js&#x27;,</span><br><span class=\"line\">      template: &#x27;examples/index.html&#x27;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改一下<code>template</code>路径和<code>js</code>路径</p>\n<p>至于<code>examples</code>文件夹里面有什么，其实暂时就是最基础的运行程序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//examples/index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta</span><br><span class=\"line\">      http-equiv=&quot;Cache-Control&quot;</span><br><span class=\"line\">      content=&quot;no-cache, no-store, must-revalidate&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;Archy UI&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;./favicon.ico&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;noscript&gt;</span><br><span class=\"line\">      &lt;strong&gt;JS加载失败&lt;/strong&gt;</span><br><span class=\"line\">    &lt;/noscript&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot; style=&quot;padding: 50px&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//examples/App.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Archy UI&lt;/div&gt;</span><br><span class=\"line\">  &lt;HelloWorld /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; Options, Vue &#125; from &quot;vue-class-component&quot;;</span><br><span class=\"line\">import &#123; HelloWorld &#125; from &quot;../components&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">@Options(&#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export default class App extends Vue &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//examples/index.js</span><br><span class=\"line\">import &#123; createApp, version &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const pkg = require(&#x27;../package.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;Vue version:&#x27; + version)</span><br><span class=\"line\">console.log(&#x27;Archy UI version:&#x27; + pkg.version);</span><br><span class=\"line\"></span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\"></span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后执行</p>\n<p><code>yarn example-server</code></p>\n<p>成功运行</p>\n<p><img src=\"/images/0728_2.jpg\" alt=\"界面\"></p>\n<h5 id=\"jest测试\"><a href=\"#jest测试\" class=\"headerlink\" title=\"jest测试\"></a>jest测试</h5><p>以前没用过单元测试，这次学习一下</p>\n<p>但遇到了个问题</p>\n<p><code>import &#123; shallowMount &#125; from &#39;@vue/test-utils&#39;</code></p>\n<p>这句话一直报错<code>找不到模块“@vue/test-utils”或其相应的类型声明</code></p>\n<p>排查了一下，发现<code>@vue/test-utils``2.0.0-rc.11</code>不知道为什么<code>dist</code>里面没有类型声明文件了</p>\n<p><code>package.json</code>里面固定了一下版本<code>&quot;@vue/test-utils&quot;: &quot;2.0.0-rc.10&quot;</code>就可以了</p>\n<p>顺便<code>package.json</code>里面把命令加了<code>&quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;</code></p>\n<p>然后输入<code>yarn test:unit example</code></p>\n<p><img src=\"/images/0728_3.jpg\" alt=\"测试成功\"></p>\n<h5 id=\"命令行工具开发\"><a href=\"#命令行工具开发\" class=\"headerlink\" title=\"命令行工具开发\"></a>命令行工具开发</h5><p>先三连</p>\n<p><code>yarn add colorful --dev</code></p>\n<p><code>yarn add gulp --dev</code></p>\n<p><code>yarn add commander --dev</code></p>\n<p>三个工具之前都是介绍过的</p>\n<p><a href=\"http://archy.ink/colorful/\">colorful</a></p>\n<p><a href=\"http://archy.ink/gulp/\">gulp</a></p>\n<p><a href=\"http://archy.ink/commander/\">commander</a></p>\n<p>顺便再介绍一个<a href=\"https://patorjk.com/software/taag/\">炫酷的东西</a>,生成Banner，像这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                     .__                .__ </span><br><span class=\"line\">_____ _______   ____ |  |__ ___.__.__ __|__|</span><br><span class=\"line\">\\__  \\\\_  __ \\_/ ___\\|  |  &lt;   |  |  |  \\  |</span><br><span class=\"line\"> / __ \\|  | \\/\\  \\___|   Y  \\___  |  |  /  |</span><br><span class=\"line\">(____  /__|    \\___  &gt;___|  / ____|____/|__|</span><br><span class=\"line\">     \\/            \\/     \\/\\/              </span><br></pre></td></tr></table></figure>\n\n<p>先来个帮助命令</p>\n<p>在<code>package.json</code>里面加两个脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;tools&quot;: &quot;node tools/cli/index.js&quot;,</span><br><span class=\"line\">&quot;ui-help&quot;: &quot;node tools/cli/help.js&quot;</span><br></pre></td></tr></table></figure>\n\n<p>建一个对象<code>_scripts</code>用来存储帮助信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;_scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;example-serve&quot;: &quot;run example serve,use for developing debug and show components after finished &quot;,</span><br><span class=\"line\">  &quot;example-build&quot;: &quot;build example for show components page&quot;,</span><br><span class=\"line\">  &quot;test:unit&quot;: &quot;unit test&quot;,</span><br><span class=\"line\">  &quot;tools&quot;: &quot;run tools,the source code path is /tools/&quot;,</span><br><span class=\"line\">  &quot;ui-help&quot;: &quot;run ui help&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>tools</code>下新建<code>cli/index.js</code>和<code>cli/help.js</code></p>\n<p>没什么好讲的，直接上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * @Author: Archy</span><br><span class=\"line\"> * @Date: 2021-07-28 16:05:16</span><br><span class=\"line\"> * @LastEditors: Archy</span><br><span class=\"line\"> * @LastEditTime: 2021-07-28 16:31:02</span><br><span class=\"line\"> * @FilePath: \\archyui\\tools\\cli\\help.js</span><br><span class=\"line\"> * @description:</span><br><span class=\"line\"> */</span><br><span class=\"line\">&#x27;use strict&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">require(&#x27;colorful&#x27;).colorful()</span><br><span class=\"line\">require(&#x27;colorful&#x27;).isatty = true</span><br><span class=\"line\">const program = require(&#x27;commander&#x27;)</span><br><span class=\"line\">const pkg = require(&#x27;../../package.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.version(</span><br><span class=\"line\">  `</span><br><span class=\"line\">  version:$&#123;pkg.version.to.bold.blue.color&#125;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">  &#x27;-v, --version&#x27;,</span><br><span class=\"line\">  `display current $&#123;&#x27;ArchyUI&#x27;.to.bold.blue.color&#125; version`</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">program.addHelpText(&#x27;beforeAll&#x27;, `</span><br><span class=\"line\">█████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗</span><br><span class=\"line\">██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║</span><br><span class=\"line\">███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║</span><br><span class=\"line\">██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║</span><br><span class=\"line\">██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║</span><br><span class=\"line\">╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">`.to.bold.blue.color)</span><br><span class=\"line\">program.name(&#x27;yarn or npm run&#x27;).usage(&#x27;[scripts] options&#x27;)</span><br><span class=\"line\">program.helpOption(false)</span><br><span class=\"line\"></span><br><span class=\"line\">Object.entries(pkg._scripts).forEach((item) =&gt; &#123;</span><br><span class=\"line\">  program.option(item[0], item[1])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const proc = program.runningCommand</span><br><span class=\"line\"></span><br><span class=\"line\">if (proc) &#123;</span><br><span class=\"line\">  proc.on(&#x27;close&#x27;, process.exit.bind(process))</span><br><span class=\"line\">  proc.on(&#x27;error&#x27;, () =&gt; &#123;</span><br><span class=\"line\">    process.exit(1)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">program.help()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * @Author: Archy</span><br><span class=\"line\"> * @Date: 2021-07-28 14:32:12</span><br><span class=\"line\"> * @LastEditors: Archy</span><br><span class=\"line\"> * @LastEditTime: 2021-07-28 16:26:44</span><br><span class=\"line\"> * @FilePath: \\archyui\\tools\\cli\\index.js</span><br><span class=\"line\"> * @description: </span><br><span class=\"line\"> */</span><br><span class=\"line\">&#x27;use strict&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">require(&#x27;colorful&#x27;).colorful()</span><br><span class=\"line\">require(&#x27;colorful&#x27;).isatty = true</span><br><span class=\"line\">const program = require(&#x27;commander&#x27;)</span><br><span class=\"line\">const pkg = require(&#x27;../../package.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.version(</span><br><span class=\"line\">  `</span><br><span class=\"line\">  █████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗</span><br><span class=\"line\">  ██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║</span><br><span class=\"line\">  ███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║</span><br><span class=\"line\">  ██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║</span><br><span class=\"line\">  ██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║</span><br><span class=\"line\">  ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  version:$&#123;pkg.version.to.bold.blue.color&#125;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">  &#x27;-v, --version&#x27;,</span><br><span class=\"line\">  `display current $&#123;&#x27;ArchyUi&#x27;.to.bold.blue.color&#125; version`</span><br><span class=\"line\">)</span><br><span class=\"line\">program.option(&#x27;-h, --help&#x27;, `display $&#123;&#x27;help&#x27;.to.bold.blue.color&#125; for command`)</span><br><span class=\"line\"></span><br><span class=\"line\">program.addHelpText(</span><br><span class=\"line\">  &#x27;beforeAll&#x27;,</span><br><span class=\"line\">  &#x27;✂  ArchyUI Tools&#x27;.to.bold.blue.color,</span><br><span class=\"line\">)</span><br><span class=\"line\">program.name(&#x27;&lt;yarn tools|npm run tools&gt;&#x27;)</span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\">const proc = program.runningCommand</span><br><span class=\"line\"></span><br><span class=\"line\">if (proc) &#123;</span><br><span class=\"line\">  proc.on(&#x27;close&#x27;, process.exit.bind(process))</span><br><span class=\"line\">  proc.on(&#x27;error&#x27;, () =&gt; &#123;</span><br><span class=\"line\">    process.exit(1)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const subCmd = program.args[0]</span><br><span class=\"line\">if (!subCmd) &#123;</span><br><span class=\"line\">  program.help()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>关于<code>banner</code>要注意的是</p>\n<p><code>\\</code>要用<code>\\\\</code>代替，不然无法显示</p>\n<p>里面涉及到很多<code>commander</code>    的方法，不懂的话建议去看文档<a href=\"https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md\">Commander.js</a>写得很清楚</p>\n<p>测试一下，在根目录输入<code>yarn ui-help</code></p>\n<p><img src=\"/images/0728_4.jpg\" alt=\"1\"></p>\n<p>输入<code>yarn tools</code></p>\n<p><img src=\"/images/0728_5.jpg\" alt=\"1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>毕业在公司上班快一年了，目前也负责了几个项目的前端。</p>\n<p>这半年负责的一个新项目底下有十来个系统，所有系统的基础框架是我写的，但当时时间很紧，公司之前也没有好的前端技术沉淀，所以是从零开始写的框架，没有稳定版本，也没有形成依赖包，甚至没有测试过。导致后来开发后，基础框架有修改，需要所有系统手动修改基础框架的内容。现在项目快结束了（真是他妈的一次痛苦的项目经历）。开始沉淀技术，形成稳定版本，并形成本地的npm依赖包。不会开源，因为开源需要申请。但会分享一些开发过程。</p>\n<h3 id=\"借鉴\"><a href=\"#借鉴\" class=\"headerlink\" title=\"借鉴\"></a>借鉴</h3><p>之前也看过了<a href=\"https://github.com/vueComponent/ant-design-vue/blob/next\">Ant-Design-Vue</a>源码，目前也准备在此基础上进行开发。想完全从零开发，效率低下而且我还没那个水平。</p>\n<h3 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h3><ol>\n<li>建好项目结构</li>\n<li>写好工具</li>\n<li>开发组件</li>\n<li>测试npmLink</li>\n<li>完成</li>\n</ol>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>首先用<code>vue create archyui</code>新建<code>vue3</code>项目</p>\n<p>然后是最轻松的建项目环节，借鉴了一下<a href=\"https://github.com/vueComponent/ant-design-vue/blob/next\">Ant-Design-Vue</a>，最后是这样的</p>\n<p><img src=\"/images/0728_1.jpg\" alt=\"目录\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assets-基础资源</span><br><span class=\"line\">components-组件</span><br><span class=\"line\">docs-文档</span><br><span class=\"line\">examples-展示组件，开发中用于组件调试，开发完用于组件库展示</span><br><span class=\"line\">icons-图标</span><br><span class=\"line\">node_modules-三方依赖</span><br><span class=\"line\">tests-测试</span><br><span class=\"line\">tools-工具</span><br><span class=\"line\">types-ts类型定义</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具开发\"><a href=\"#工具开发\" class=\"headerlink\" title=\"工具开发\"></a>工具开发</h3><p>之前把Ant-design工具的源码拉出来看了，也写了解析，<a href=\"http://archy.ink/antd-tools-1/\">这里</a></p>\n<h5 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h5><p>首先是把<code>examples</code>用起来</p>\n<p>先把<code>package.json</code>,<code>scripts</code>命令改一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;example-serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class=\"line\">  &quot;example-build&quot;: &quot;vue-cli-service build&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>用作起程序和打包</p>\n<p>然后新建个<code>vue.config.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      entry: &#x27;examples/index.js&#x27;,</span><br><span class=\"line\">      template: &#x27;examples/index.html&#x27;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改一下<code>template</code>路径和<code>js</code>路径</p>\n<p>至于<code>examples</code>文件夹里面有什么，其实暂时就是最基础的运行程序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//examples/index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta</span><br><span class=\"line\">      http-equiv=&quot;Cache-Control&quot;</span><br><span class=\"line\">      content=&quot;no-cache, no-store, must-revalidate&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;Archy UI&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;./favicon.ico&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;noscript&gt;</span><br><span class=\"line\">      &lt;strong&gt;JS加载失败&lt;/strong&gt;</span><br><span class=\"line\">    &lt;/noscript&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot; style=&quot;padding: 50px&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//examples/App.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Archy UI&lt;/div&gt;</span><br><span class=\"line\">  &lt;HelloWorld /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; Options, Vue &#125; from &quot;vue-class-component&quot;;</span><br><span class=\"line\">import &#123; HelloWorld &#125; from &quot;../components&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">@Options(&#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export default class App extends Vue &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//examples/index.js</span><br><span class=\"line\">import &#123; createApp, version &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const pkg = require(&#x27;../package.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;Vue version:&#x27; + version)</span><br><span class=\"line\">console.log(&#x27;Archy UI version:&#x27; + pkg.version);</span><br><span class=\"line\"></span><br><span class=\"line\">const app = createApp(App)</span><br><span class=\"line\"></span><br><span class=\"line\">app.mount(&#x27;#app&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后执行</p>\n<p><code>yarn example-server</code></p>\n<p>成功运行</p>\n<p><img src=\"/images/0728_2.jpg\" alt=\"界面\"></p>\n<h5 id=\"jest测试\"><a href=\"#jest测试\" class=\"headerlink\" title=\"jest测试\"></a>jest测试</h5><p>以前没用过单元测试，这次学习一下</p>\n<p>但遇到了个问题</p>\n<p><code>import &#123; shallowMount &#125; from &#39;@vue/test-utils&#39;</code></p>\n<p>这句话一直报错<code>找不到模块“@vue/test-utils”或其相应的类型声明</code></p>\n<p>排查了一下，发现<code>@vue/test-utils``2.0.0-rc.11</code>不知道为什么<code>dist</code>里面没有类型声明文件了</p>\n<p><code>package.json</code>里面固定了一下版本<code>&quot;@vue/test-utils&quot;: &quot;2.0.0-rc.10&quot;</code>就可以了</p>\n<p>顺便<code>package.json</code>里面把命令加了<code>&quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;</code></p>\n<p>然后输入<code>yarn test:unit example</code></p>\n<p><img src=\"/images/0728_3.jpg\" alt=\"测试成功\"></p>\n<h5 id=\"命令行工具开发\"><a href=\"#命令行工具开发\" class=\"headerlink\" title=\"命令行工具开发\"></a>命令行工具开发</h5><p>先三连</p>\n<p><code>yarn add colorful --dev</code></p>\n<p><code>yarn add gulp --dev</code></p>\n<p><code>yarn add commander --dev</code></p>\n<p>三个工具之前都是介绍过的</p>\n<p><a href=\"http://archy.ink/colorful/\">colorful</a></p>\n<p><a href=\"http://archy.ink/gulp/\">gulp</a></p>\n<p><a href=\"http://archy.ink/commander/\">commander</a></p>\n<p>顺便再介绍一个<a href=\"https://patorjk.com/software/taag/\">炫酷的东西</a>,生成Banner，像这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                     .__                .__ </span><br><span class=\"line\">_____ _______   ____ |  |__ ___.__.__ __|__|</span><br><span class=\"line\">\\__  \\\\_  __ \\_/ ___\\|  |  &lt;   |  |  |  \\  |</span><br><span class=\"line\"> / __ \\|  | \\/\\  \\___|   Y  \\___  |  |  /  |</span><br><span class=\"line\">(____  /__|    \\___  &gt;___|  / ____|____/|__|</span><br><span class=\"line\">     \\/            \\/     \\/\\/              </span><br></pre></td></tr></table></figure>\n\n<p>先来个帮助命令</p>\n<p>在<code>package.json</code>里面加两个脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;tools&quot;: &quot;node tools/cli/index.js&quot;,</span><br><span class=\"line\">&quot;ui-help&quot;: &quot;node tools/cli/help.js&quot;</span><br></pre></td></tr></table></figure>\n\n<p>建一个对象<code>_scripts</code>用来存储帮助信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;_scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;example-serve&quot;: &quot;run example serve,use for developing debug and show components after finished &quot;,</span><br><span class=\"line\">  &quot;example-build&quot;: &quot;build example for show components page&quot;,</span><br><span class=\"line\">  &quot;test:unit&quot;: &quot;unit test&quot;,</span><br><span class=\"line\">  &quot;tools&quot;: &quot;run tools,the source code path is /tools/&quot;,</span><br><span class=\"line\">  &quot;ui-help&quot;: &quot;run ui help&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>tools</code>下新建<code>cli/index.js</code>和<code>cli/help.js</code></p>\n<p>没什么好讲的，直接上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * @Author: Archy</span><br><span class=\"line\"> * @Date: 2021-07-28 16:05:16</span><br><span class=\"line\"> * @LastEditors: Archy</span><br><span class=\"line\"> * @LastEditTime: 2021-07-28 16:31:02</span><br><span class=\"line\"> * @FilePath: \\archyui\\tools\\cli\\help.js</span><br><span class=\"line\"> * @description:</span><br><span class=\"line\"> */</span><br><span class=\"line\">&#x27;use strict&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">require(&#x27;colorful&#x27;).colorful()</span><br><span class=\"line\">require(&#x27;colorful&#x27;).isatty = true</span><br><span class=\"line\">const program = require(&#x27;commander&#x27;)</span><br><span class=\"line\">const pkg = require(&#x27;../../package.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.version(</span><br><span class=\"line\">  `</span><br><span class=\"line\">  version:$&#123;pkg.version.to.bold.blue.color&#125;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">  &#x27;-v, --version&#x27;,</span><br><span class=\"line\">  `display current $&#123;&#x27;ArchyUI&#x27;.to.bold.blue.color&#125; version`</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">program.addHelpText(&#x27;beforeAll&#x27;, `</span><br><span class=\"line\">█████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗</span><br><span class=\"line\">██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║</span><br><span class=\"line\">███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║</span><br><span class=\"line\">██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║</span><br><span class=\"line\">██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║</span><br><span class=\"line\">╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">`.to.bold.blue.color)</span><br><span class=\"line\">program.name(&#x27;yarn or npm run&#x27;).usage(&#x27;[scripts] options&#x27;)</span><br><span class=\"line\">program.helpOption(false)</span><br><span class=\"line\"></span><br><span class=\"line\">Object.entries(pkg._scripts).forEach((item) =&gt; &#123;</span><br><span class=\"line\">  program.option(item[0], item[1])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">const proc = program.runningCommand</span><br><span class=\"line\"></span><br><span class=\"line\">if (proc) &#123;</span><br><span class=\"line\">  proc.on(&#x27;close&#x27;, process.exit.bind(process))</span><br><span class=\"line\">  proc.on(&#x27;error&#x27;, () =&gt; &#123;</span><br><span class=\"line\">    process.exit(1)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">program.help()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * @Author: Archy</span><br><span class=\"line\"> * @Date: 2021-07-28 14:32:12</span><br><span class=\"line\"> * @LastEditors: Archy</span><br><span class=\"line\"> * @LastEditTime: 2021-07-28 16:26:44</span><br><span class=\"line\"> * @FilePath: \\archyui\\tools\\cli\\index.js</span><br><span class=\"line\"> * @description: </span><br><span class=\"line\"> */</span><br><span class=\"line\">&#x27;use strict&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">require(&#x27;colorful&#x27;).colorful()</span><br><span class=\"line\">require(&#x27;colorful&#x27;).isatty = true</span><br><span class=\"line\">const program = require(&#x27;commander&#x27;)</span><br><span class=\"line\">const pkg = require(&#x27;../../package.json&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">program.version(</span><br><span class=\"line\">  `</span><br><span class=\"line\">  █████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗</span><br><span class=\"line\">  ██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║</span><br><span class=\"line\">  ███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║</span><br><span class=\"line\">  ██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║</span><br><span class=\"line\">  ██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║</span><br><span class=\"line\">  ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  version:$&#123;pkg.version.to.bold.blue.color&#125;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">  &#x27;-v, --version&#x27;,</span><br><span class=\"line\">  `display current $&#123;&#x27;ArchyUi&#x27;.to.bold.blue.color&#125; version`</span><br><span class=\"line\">)</span><br><span class=\"line\">program.option(&#x27;-h, --help&#x27;, `display $&#123;&#x27;help&#x27;.to.bold.blue.color&#125; for command`)</span><br><span class=\"line\"></span><br><span class=\"line\">program.addHelpText(</span><br><span class=\"line\">  &#x27;beforeAll&#x27;,</span><br><span class=\"line\">  &#x27;✂  ArchyUI Tools&#x27;.to.bold.blue.color,</span><br><span class=\"line\">)</span><br><span class=\"line\">program.name(&#x27;&lt;yarn tools|npm run tools&gt;&#x27;)</span><br><span class=\"line\">program.parse(process.argv)</span><br><span class=\"line\">const proc = program.runningCommand</span><br><span class=\"line\"></span><br><span class=\"line\">if (proc) &#123;</span><br><span class=\"line\">  proc.on(&#x27;close&#x27;, process.exit.bind(process))</span><br><span class=\"line\">  proc.on(&#x27;error&#x27;, () =&gt; &#123;</span><br><span class=\"line\">    process.exit(1)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const subCmd = program.args[0]</span><br><span class=\"line\">if (!subCmd) &#123;</span><br><span class=\"line\">  program.help()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>关于<code>banner</code>要注意的是</p>\n<p><code>\\</code>要用<code>\\\\</code>代替，不然无法显示</p>\n<p>里面涉及到很多<code>commander</code>    的方法，不懂的话建议去看文档<a href=\"https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md\">Commander.js</a>写得很清楚</p>\n<p>测试一下，在根目录输入<code>yarn ui-help</code></p>\n<p><img src=\"/images/0728_4.jpg\" alt=\"1\"></p>\n<p>输入<code>yarn tools</code></p>\n<p><img src=\"/images/0728_5.jpg\" alt=\"1\"></p>\n"},{"title":"antd-tools详解（四）","date":"2021-07-26T05:52:04.000Z","_content":"\n上午调休半天。\n\n---\n\n直接来看` \"pub\": \"node --max_old_space_size=8192 antd-tools/cli/run.js pub\"`这句命令的代码\n\n```\ngulp.task(\n  'pub',\n  gulp.series('check-git', 'compile', 'dist', done => {\n    // if (!process.env.GITHUB_TOKEN) {\n    //   console.log('no GitHub token found, skip');\n    // } else {\n    //   pub(done);\n    // }\n    pub(done);\n  }),\n);\n```\n\n按顺序执行`check-git`,`compile`和`dist`三个任务\n\n`compile`和`dist`已经看过了\n\n直接看`check-git`看语义应该是`git`验证相关\n\n```\ngulp.task(\n  'check-git',\n  gulp.series(done => {\n    runCmd('git', ['status', '--porcelain'], (code, result) => {\n      if (/^\\?\\?/m.test(result)) {\n        return done(`There are untracked files in the working tree.\\n${result}\n      `);\n      }\n      if (/^([ADRM]| [ADRM])/m.test(result)) {\n        return done(`There are uncommitted changes in the working tree.\\n${result}\n      `);\n      }\n      return done();\n    });\n  }),\n);\n```\n\n执行了`runCmd`方法，看起来像是执行命令行命令的方法\n\n```\nfunction runCmd(cmd, _args, fn) {\n  const args = _args || [];\n  const runner = require('child_process').spawn(cmd, args, {\n    // keep color\n    stdio: 'inherit',\n    env: getRunCmdEnv(),\n  });\n\n  runner.on('close', code => {\n    if (fn) {\n      fn(code);\n    }\n  });\n}\n```\n\n有些知识盲区，查一下\n\n> `child_process.spawn(command[, args][, options])`\n>\n> **command：** 将要运行的命令\n>\n> **args：** Array 字符串参数数组\n>\n> **options Object**\n>\n> - `cwd` `String` 子进程的当前工作目录\n> - `env` `Object` 环境变量键值对\n> - `stdio` `Array|String` 子进程的 `stdio` 配置\n> - `detached` `Boolean` 这个子进程将会变成进程组的领导\n> - `uid` `Number` 设置用户进程的 ID\n> - `gid` `Number` 设置进程组的 ID\n\n`options`里面`stdio`传入了`inherit`,相当于子进程将使用父进程的标准输入输出。\n\n其他参数还有\n\n>`options.stdio` 选项用于配置在父进程和子进程之间建立的管道。 默认情况下，子进程的标准输入、标准输出和标准错误被重定向到 `ChildProcess`对象上相应的 `subprocess.stdin`、`subprocess.stdout` 和 `subprocess.stderr`流。 这相当于将 `options.stdio` 设置为等于 `['pipe', 'pipe', 'pipe']`。\n>\n>为方便起见，`options.stdio` 可能是以下字符串之一：\n>\n>- `'pipe'`: 相当于 `['pipe', 'pipe', 'pipe']`（默认）\n>- `'overlapped'`: 相当于 `['overlapped', 'overlapped', 'overlapped']`\n>- `'ignore'`: 相当于 `['ignore', 'ignore', 'ignore']`\n>- `'inherit'`: 相当于 `['inherit', 'inherit', 'inherit']` 或 `[0, 1, 2]`\n\n[参考](http://nodejs.cn/api/child_process.html#child_process_event_spawn)\n\n`env`传入了`getRunCmdEnv()`\n\n研究一下\n\n```\n\nmodule.exports = function getRunCmdEnv() {\n  const env = {};\n  Object.keys(process.env).forEach(key => {\n    env[key] = process.env[key];\n  });\n  // make sure `antd-tools/node_modules/.bin` in the PATH env\n  const nodeModulesBinDir = path.join(__dirname, '../../node_modules/.bin');\n\n  Object.entries(env)\n    .filter(\n      v =>\n        v\n          .slice(0, 1)\n          .pop()\n          .toLowerCase() === 'path',\n    )\n    .forEach(v => {\n      const key = v.slice(0, 1).pop();\n      env[key] = env[key] ? `${nodeModulesBinDir}:${env[key]}` : nodeModulesBinDir;\n    });\n  return env;\n};\n```\n\n对`env`进行了修改，确保`antd-tools/node_modules/.bin`在环境变量中，但只在这个进程里有用。\n\n没啥好看的，具体实现就是一堆高阶函数。\n\n回到`check-git`，实质就是执行了`git status --porcelain`命令，就是展示改动状态。\n\n但是`pub`命令实质就是编译并打包，最后执行`pub`方法。\n\n```\nfunction pub(done) {\n  const notOk = !packageJson.version.match(/^\\d+\\.\\d+\\.\\d+$/);\n  let tagString;\n  if (argv['npm-tag']) {\n    tagString = argv['npm-tag'];\n  }\n  if (!tagString && notOk) {\n    tagString = 'next';\n  }\n  if (packageJson.scripts['pre-publish']) {\n    runCmd('npm', ['run', 'pre-publish'], code2 => {\n      if (code2) {\n        done(code2);\n        return;\n      }\n      publish(tagString, done);\n    });\n  } else {\n    publish(tagString, done);\n  }\n}\n```\n\n调用了`guard`任务，其实是一个错误警报\n\n然后调用`publish`真正的发布方法，其中又调用了`tag`方法，发布配置，包括邮箱地址等等和执行`gitpush`命令，还有`githubRelease`方法，应该是开源信息，不是很懂，非常的详尽。\n\n**但我应该不会用。**\n\n---\n\n到此为止，`antd-tools`源码就看完了，具体可能会用到的其实就是`compile`和`dist`，其他的`publish`要用也会改简单一点，毕竟我只是一个人，并不需要大公司那种团队协作必需的详尽流程。\n\n`generator-webtypes`是个比较方便的功能，可能会写一个`vscode`版本的。\n\n\n\n主要是学习了写命令行工具的方法，学习了很多知识，收益颇丰(*^▽^*)\n\n`Ant-Tools`完结，接下来看下`ant-design`的结构。\n","source":"_posts/antd-tools-4.md","raw":"---\ntitle: antd-tools详解（四）\ndate: 2021-07-26 13:52:04\ntags: [AntDesignVue源码学习,Ant-tools,前端,node]\n---\n\n上午调休半天。\n\n---\n\n直接来看` \"pub\": \"node --max_old_space_size=8192 antd-tools/cli/run.js pub\"`这句命令的代码\n\n```\ngulp.task(\n  'pub',\n  gulp.series('check-git', 'compile', 'dist', done => {\n    // if (!process.env.GITHUB_TOKEN) {\n    //   console.log('no GitHub token found, skip');\n    // } else {\n    //   pub(done);\n    // }\n    pub(done);\n  }),\n);\n```\n\n按顺序执行`check-git`,`compile`和`dist`三个任务\n\n`compile`和`dist`已经看过了\n\n直接看`check-git`看语义应该是`git`验证相关\n\n```\ngulp.task(\n  'check-git',\n  gulp.series(done => {\n    runCmd('git', ['status', '--porcelain'], (code, result) => {\n      if (/^\\?\\?/m.test(result)) {\n        return done(`There are untracked files in the working tree.\\n${result}\n      `);\n      }\n      if (/^([ADRM]| [ADRM])/m.test(result)) {\n        return done(`There are uncommitted changes in the working tree.\\n${result}\n      `);\n      }\n      return done();\n    });\n  }),\n);\n```\n\n执行了`runCmd`方法，看起来像是执行命令行命令的方法\n\n```\nfunction runCmd(cmd, _args, fn) {\n  const args = _args || [];\n  const runner = require('child_process').spawn(cmd, args, {\n    // keep color\n    stdio: 'inherit',\n    env: getRunCmdEnv(),\n  });\n\n  runner.on('close', code => {\n    if (fn) {\n      fn(code);\n    }\n  });\n}\n```\n\n有些知识盲区，查一下\n\n> `child_process.spawn(command[, args][, options])`\n>\n> **command：** 将要运行的命令\n>\n> **args：** Array 字符串参数数组\n>\n> **options Object**\n>\n> - `cwd` `String` 子进程的当前工作目录\n> - `env` `Object` 环境变量键值对\n> - `stdio` `Array|String` 子进程的 `stdio` 配置\n> - `detached` `Boolean` 这个子进程将会变成进程组的领导\n> - `uid` `Number` 设置用户进程的 ID\n> - `gid` `Number` 设置进程组的 ID\n\n`options`里面`stdio`传入了`inherit`,相当于子进程将使用父进程的标准输入输出。\n\n其他参数还有\n\n>`options.stdio` 选项用于配置在父进程和子进程之间建立的管道。 默认情况下，子进程的标准输入、标准输出和标准错误被重定向到 `ChildProcess`对象上相应的 `subprocess.stdin`、`subprocess.stdout` 和 `subprocess.stderr`流。 这相当于将 `options.stdio` 设置为等于 `['pipe', 'pipe', 'pipe']`。\n>\n>为方便起见，`options.stdio` 可能是以下字符串之一：\n>\n>- `'pipe'`: 相当于 `['pipe', 'pipe', 'pipe']`（默认）\n>- `'overlapped'`: 相当于 `['overlapped', 'overlapped', 'overlapped']`\n>- `'ignore'`: 相当于 `['ignore', 'ignore', 'ignore']`\n>- `'inherit'`: 相当于 `['inherit', 'inherit', 'inherit']` 或 `[0, 1, 2]`\n\n[参考](http://nodejs.cn/api/child_process.html#child_process_event_spawn)\n\n`env`传入了`getRunCmdEnv()`\n\n研究一下\n\n```\n\nmodule.exports = function getRunCmdEnv() {\n  const env = {};\n  Object.keys(process.env).forEach(key => {\n    env[key] = process.env[key];\n  });\n  // make sure `antd-tools/node_modules/.bin` in the PATH env\n  const nodeModulesBinDir = path.join(__dirname, '../../node_modules/.bin');\n\n  Object.entries(env)\n    .filter(\n      v =>\n        v\n          .slice(0, 1)\n          .pop()\n          .toLowerCase() === 'path',\n    )\n    .forEach(v => {\n      const key = v.slice(0, 1).pop();\n      env[key] = env[key] ? `${nodeModulesBinDir}:${env[key]}` : nodeModulesBinDir;\n    });\n  return env;\n};\n```\n\n对`env`进行了修改，确保`antd-tools/node_modules/.bin`在环境变量中，但只在这个进程里有用。\n\n没啥好看的，具体实现就是一堆高阶函数。\n\n回到`check-git`，实质就是执行了`git status --porcelain`命令，就是展示改动状态。\n\n但是`pub`命令实质就是编译并打包，最后执行`pub`方法。\n\n```\nfunction pub(done) {\n  const notOk = !packageJson.version.match(/^\\d+\\.\\d+\\.\\d+$/);\n  let tagString;\n  if (argv['npm-tag']) {\n    tagString = argv['npm-tag'];\n  }\n  if (!tagString && notOk) {\n    tagString = 'next';\n  }\n  if (packageJson.scripts['pre-publish']) {\n    runCmd('npm', ['run', 'pre-publish'], code2 => {\n      if (code2) {\n        done(code2);\n        return;\n      }\n      publish(tagString, done);\n    });\n  } else {\n    publish(tagString, done);\n  }\n}\n```\n\n调用了`guard`任务，其实是一个错误警报\n\n然后调用`publish`真正的发布方法，其中又调用了`tag`方法，发布配置，包括邮箱地址等等和执行`gitpush`命令，还有`githubRelease`方法，应该是开源信息，不是很懂，非常的详尽。\n\n**但我应该不会用。**\n\n---\n\n到此为止，`antd-tools`源码就看完了，具体可能会用到的其实就是`compile`和`dist`，其他的`publish`要用也会改简单一点，毕竟我只是一个人，并不需要大公司那种团队协作必需的详尽流程。\n\n`generator-webtypes`是个比较方便的功能，可能会写一个`vscode`版本的。\n\n\n\n主要是学习了写命令行工具的方法，学习了很多知识，收益颇丰(*^▽^*)\n\n`Ant-Tools`完结，接下来看下`ant-design`的结构。\n","slug":"antd-tools-4","published":1,"updated":"2021-07-26T07:14:08.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrn8zvkj000488v718k21q25","content":"<p>上午调休半天。</p>\n<hr>\n<p>直接来看<code> &quot;pub&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js pub&quot;</code>这句命令的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;pub&#x27;,</span><br><span class=\"line\">  gulp.series(&#x27;check-git&#x27;, &#x27;compile&#x27;, &#x27;dist&#x27;, done =&gt; &#123;</span><br><span class=\"line\">    // if (!process.env.GITHUB_TOKEN) &#123;</span><br><span class=\"line\">    //   console.log(&#x27;no GitHub token found, skip&#x27;);</span><br><span class=\"line\">    // &#125; else &#123;</span><br><span class=\"line\">    //   pub(done);</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    pub(done);</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>按顺序执行<code>check-git</code>,<code>compile</code>和<code>dist</code>三个任务</p>\n<p><code>compile</code>和<code>dist</code>已经看过了</p>\n<p>直接看<code>check-git</code>看语义应该是<code>git</code>验证相关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;check-git&#x27;,</span><br><span class=\"line\">  gulp.series(done =&gt; &#123;</span><br><span class=\"line\">    runCmd(&#x27;git&#x27;, [&#x27;status&#x27;, &#x27;--porcelain&#x27;], (code, result) =&gt; &#123;</span><br><span class=\"line\">      if (/^\\?\\?/m.test(result)) &#123;</span><br><span class=\"line\">        return done(`There are untracked files in the working tree.\\n$&#123;result&#125;</span><br><span class=\"line\">      `);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (/^([ADRM]| [ADRM])/m.test(result)) &#123;</span><br><span class=\"line\">        return done(`There are uncommitted changes in the working tree.\\n$&#123;result&#125;</span><br><span class=\"line\">      `);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>执行了<code>runCmd</code>方法，看起来像是执行命令行命令的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function runCmd(cmd, _args, fn) &#123;</span><br><span class=\"line\">  const args = _args || [];</span><br><span class=\"line\">  const runner = require(&#x27;child_process&#x27;).spawn(cmd, args, &#123;</span><br><span class=\"line\">    // keep color</span><br><span class=\"line\">    stdio: &#x27;inherit&#x27;,</span><br><span class=\"line\">    env: getRunCmdEnv(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  runner.on(&#x27;close&#x27;, code =&gt; &#123;</span><br><span class=\"line\">    if (fn) &#123;</span><br><span class=\"line\">      fn(code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有些知识盲区，查一下</p>\n<blockquote>\n<p><code>child_process.spawn(command[, args][, options])</code></p>\n<p><strong>command：</strong> 将要运行的命令</p>\n<p><strong>args：</strong> Array 字符串参数数组</p>\n<p><strong>options Object</strong></p>\n<ul>\n<li><code>cwd</code> <code>String</code> 子进程的当前工作目录</li>\n<li><code>env</code> <code>Object</code> 环境变量键值对</li>\n<li><code>stdio</code> <code>Array|String</code> 子进程的 <code>stdio</code> 配置</li>\n<li><code>detached</code> <code>Boolean</code> 这个子进程将会变成进程组的领导</li>\n<li><code>uid</code> <code>Number</code> 设置用户进程的 ID</li>\n<li><code>gid</code> <code>Number</code> 设置进程组的 ID</li>\n</ul>\n</blockquote>\n<p><code>options</code>里面<code>stdio</code>传入了<code>inherit</code>,相当于子进程将使用父进程的标准输入输出。</p>\n<p>其他参数还有</p>\n<blockquote>\n<p><code>options.stdio</code> 选项用于配置在父进程和子进程之间建立的管道。 默认情况下，子进程的标准输入、标准输出和标准错误被重定向到 <code>ChildProcess</code>对象上相应的 <code>subprocess.stdin</code>、<code>subprocess.stdout</code> 和 <code>subprocess.stderr</code>流。 这相当于将 <code>options.stdio</code> 设置为等于 <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>。</p>\n<p>为方便起见，<code>options.stdio</code> 可能是以下字符串之一：</p>\n<ul>\n<li><code>&#39;pipe&#39;</code>: 相当于 <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>（默认）</li>\n<li><code>&#39;overlapped&#39;</code>: 相当于 <code>[&#39;overlapped&#39;, &#39;overlapped&#39;, &#39;overlapped&#39;]</code></li>\n<li><code>&#39;ignore&#39;</code>: 相当于 <code>[&#39;ignore&#39;, &#39;ignore&#39;, &#39;ignore&#39;]</code></li>\n<li><code>&#39;inherit&#39;</code>: 相当于 <code>[&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]</code> 或 <code>[0, 1, 2]</code></li>\n</ul>\n</blockquote>\n<p><a href=\"http://nodejs.cn/api/child_process.html#child_process_event_spawn\">参考</a></p>\n<p><code>env</code>传入了<code>getRunCmdEnv()</code></p>\n<p>研究一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">module.exports = function getRunCmdEnv() &#123;</span><br><span class=\"line\">  const env = &#123;&#125;;</span><br><span class=\"line\">  Object.keys(process.env).forEach(key =&gt; &#123;</span><br><span class=\"line\">    env[key] = process.env[key];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  // make sure `antd-tools/node_modules/.bin` in the PATH env</span><br><span class=\"line\">  const nodeModulesBinDir = path.join(__dirname, &#x27;../../node_modules/.bin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Object.entries(env)</span><br><span class=\"line\">    .filter(</span><br><span class=\"line\">      v =&gt;</span><br><span class=\"line\">        v</span><br><span class=\"line\">          .slice(0, 1)</span><br><span class=\"line\">          .pop()</span><br><span class=\"line\">          .toLowerCase() === &#x27;path&#x27;,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .forEach(v =&gt; &#123;</span><br><span class=\"line\">      const key = v.slice(0, 1).pop();</span><br><span class=\"line\">      env[key] = env[key] ? `$&#123;nodeModulesBinDir&#125;:$&#123;env[key]&#125;` : nodeModulesBinDir;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  return env;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对<code>env</code>进行了修改，确保<code>antd-tools/node_modules/.bin</code>在环境变量中，但只在这个进程里有用。</p>\n<p>没啥好看的，具体实现就是一堆高阶函数。</p>\n<p>回到<code>check-git</code>，实质就是执行了<code>git status --porcelain</code>命令，就是展示改动状态。</p>\n<p>但是<code>pub</code>命令实质就是编译并打包，最后执行<code>pub</code>方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pub(done) &#123;</span><br><span class=\"line\">  const notOk = !packageJson.version.match(/^\\d+\\.\\d+\\.\\d+$/);</span><br><span class=\"line\">  let tagString;</span><br><span class=\"line\">  if (argv[&#x27;npm-tag&#x27;]) &#123;</span><br><span class=\"line\">    tagString = argv[&#x27;npm-tag&#x27;];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!tagString &amp;&amp; notOk) &#123;</span><br><span class=\"line\">    tagString = &#x27;next&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (packageJson.scripts[&#x27;pre-publish&#x27;]) &#123;</span><br><span class=\"line\">    runCmd(&#x27;npm&#x27;, [&#x27;run&#x27;, &#x27;pre-publish&#x27;], code2 =&gt; &#123;</span><br><span class=\"line\">      if (code2) &#123;</span><br><span class=\"line\">        done(code2);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      publish(tagString, done);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    publish(tagString, done);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用了<code>guard</code>任务，其实是一个错误警报</p>\n<p>然后调用<code>publish</code>真正的发布方法，其中又调用了<code>tag</code>方法，发布配置，包括邮箱地址等等和执行<code>gitpush</code>命令，还有<code>githubRelease</code>方法，应该是开源信息，不是很懂，非常的详尽。</p>\n<p><strong>但我应该不会用。</strong></p>\n<hr>\n<p>到此为止，<code>antd-tools</code>源码就看完了，具体可能会用到的其实就是<code>compile</code>和<code>dist</code>，其他的<code>publish</code>要用也会改简单一点，毕竟我只是一个人，并不需要大公司那种团队协作必需的详尽流程。</p>\n<p><code>generator-webtypes</code>是个比较方便的功能，可能会写一个<code>vscode</code>版本的。</p>\n<p>主要是学习了写命令行工具的方法，学习了很多知识，收益颇丰(<em>^▽^</em>)</p>\n<p><code>Ant-Tools</code>完结，接下来看下<code>ant-design</code>的结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上午调休半天。</p>\n<hr>\n<p>直接来看<code> &quot;pub&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js pub&quot;</code>这句命令的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;pub&#x27;,</span><br><span class=\"line\">  gulp.series(&#x27;check-git&#x27;, &#x27;compile&#x27;, &#x27;dist&#x27;, done =&gt; &#123;</span><br><span class=\"line\">    // if (!process.env.GITHUB_TOKEN) &#123;</span><br><span class=\"line\">    //   console.log(&#x27;no GitHub token found, skip&#x27;);</span><br><span class=\"line\">    // &#125; else &#123;</span><br><span class=\"line\">    //   pub(done);</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    pub(done);</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>按顺序执行<code>check-git</code>,<code>compile</code>和<code>dist</code>三个任务</p>\n<p><code>compile</code>和<code>dist</code>已经看过了</p>\n<p>直接看<code>check-git</code>看语义应该是<code>git</code>验证相关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(</span><br><span class=\"line\">  &#x27;check-git&#x27;,</span><br><span class=\"line\">  gulp.series(done =&gt; &#123;</span><br><span class=\"line\">    runCmd(&#x27;git&#x27;, [&#x27;status&#x27;, &#x27;--porcelain&#x27;], (code, result) =&gt; &#123;</span><br><span class=\"line\">      if (/^\\?\\?/m.test(result)) &#123;</span><br><span class=\"line\">        return done(`There are untracked files in the working tree.\\n$&#123;result&#125;</span><br><span class=\"line\">      `);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (/^([ADRM]| [ADRM])/m.test(result)) &#123;</span><br><span class=\"line\">        return done(`There are uncommitted changes in the working tree.\\n$&#123;result&#125;</span><br><span class=\"line\">      `);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>执行了<code>runCmd</code>方法，看起来像是执行命令行命令的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function runCmd(cmd, _args, fn) &#123;</span><br><span class=\"line\">  const args = _args || [];</span><br><span class=\"line\">  const runner = require(&#x27;child_process&#x27;).spawn(cmd, args, &#123;</span><br><span class=\"line\">    // keep color</span><br><span class=\"line\">    stdio: &#x27;inherit&#x27;,</span><br><span class=\"line\">    env: getRunCmdEnv(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  runner.on(&#x27;close&#x27;, code =&gt; &#123;</span><br><span class=\"line\">    if (fn) &#123;</span><br><span class=\"line\">      fn(code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有些知识盲区，查一下</p>\n<blockquote>\n<p><code>child_process.spawn(command[, args][, options])</code></p>\n<p><strong>command：</strong> 将要运行的命令</p>\n<p><strong>args：</strong> Array 字符串参数数组</p>\n<p><strong>options Object</strong></p>\n<ul>\n<li><code>cwd</code> <code>String</code> 子进程的当前工作目录</li>\n<li><code>env</code> <code>Object</code> 环境变量键值对</li>\n<li><code>stdio</code> <code>Array|String</code> 子进程的 <code>stdio</code> 配置</li>\n<li><code>detached</code> <code>Boolean</code> 这个子进程将会变成进程组的领导</li>\n<li><code>uid</code> <code>Number</code> 设置用户进程的 ID</li>\n<li><code>gid</code> <code>Number</code> 设置进程组的 ID</li>\n</ul>\n</blockquote>\n<p><code>options</code>里面<code>stdio</code>传入了<code>inherit</code>,相当于子进程将使用父进程的标准输入输出。</p>\n<p>其他参数还有</p>\n<blockquote>\n<p><code>options.stdio</code> 选项用于配置在父进程和子进程之间建立的管道。 默认情况下，子进程的标准输入、标准输出和标准错误被重定向到 <code>ChildProcess</code>对象上相应的 <code>subprocess.stdin</code>、<code>subprocess.stdout</code> 和 <code>subprocess.stderr</code>流。 这相当于将 <code>options.stdio</code> 设置为等于 <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>。</p>\n<p>为方便起见，<code>options.stdio</code> 可能是以下字符串之一：</p>\n<ul>\n<li><code>&#39;pipe&#39;</code>: 相当于 <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>（默认）</li>\n<li><code>&#39;overlapped&#39;</code>: 相当于 <code>[&#39;overlapped&#39;, &#39;overlapped&#39;, &#39;overlapped&#39;]</code></li>\n<li><code>&#39;ignore&#39;</code>: 相当于 <code>[&#39;ignore&#39;, &#39;ignore&#39;, &#39;ignore&#39;]</code></li>\n<li><code>&#39;inherit&#39;</code>: 相当于 <code>[&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]</code> 或 <code>[0, 1, 2]</code></li>\n</ul>\n</blockquote>\n<p><a href=\"http://nodejs.cn/api/child_process.html#child_process_event_spawn\">参考</a></p>\n<p><code>env</code>传入了<code>getRunCmdEnv()</code></p>\n<p>研究一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">module.exports = function getRunCmdEnv() &#123;</span><br><span class=\"line\">  const env = &#123;&#125;;</span><br><span class=\"line\">  Object.keys(process.env).forEach(key =&gt; &#123;</span><br><span class=\"line\">    env[key] = process.env[key];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  // make sure `antd-tools/node_modules/.bin` in the PATH env</span><br><span class=\"line\">  const nodeModulesBinDir = path.join(__dirname, &#x27;../../node_modules/.bin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Object.entries(env)</span><br><span class=\"line\">    .filter(</span><br><span class=\"line\">      v =&gt;</span><br><span class=\"line\">        v</span><br><span class=\"line\">          .slice(0, 1)</span><br><span class=\"line\">          .pop()</span><br><span class=\"line\">          .toLowerCase() === &#x27;path&#x27;,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .forEach(v =&gt; &#123;</span><br><span class=\"line\">      const key = v.slice(0, 1).pop();</span><br><span class=\"line\">      env[key] = env[key] ? `$&#123;nodeModulesBinDir&#125;:$&#123;env[key]&#125;` : nodeModulesBinDir;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  return env;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对<code>env</code>进行了修改，确保<code>antd-tools/node_modules/.bin</code>在环境变量中，但只在这个进程里有用。</p>\n<p>没啥好看的，具体实现就是一堆高阶函数。</p>\n<p>回到<code>check-git</code>，实质就是执行了<code>git status --porcelain</code>命令，就是展示改动状态。</p>\n<p>但是<code>pub</code>命令实质就是编译并打包，最后执行<code>pub</code>方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pub(done) &#123;</span><br><span class=\"line\">  const notOk = !packageJson.version.match(/^\\d+\\.\\d+\\.\\d+$/);</span><br><span class=\"line\">  let tagString;</span><br><span class=\"line\">  if (argv[&#x27;npm-tag&#x27;]) &#123;</span><br><span class=\"line\">    tagString = argv[&#x27;npm-tag&#x27;];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!tagString &amp;&amp; notOk) &#123;</span><br><span class=\"line\">    tagString = &#x27;next&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (packageJson.scripts[&#x27;pre-publish&#x27;]) &#123;</span><br><span class=\"line\">    runCmd(&#x27;npm&#x27;, [&#x27;run&#x27;, &#x27;pre-publish&#x27;], code2 =&gt; &#123;</span><br><span class=\"line\">      if (code2) &#123;</span><br><span class=\"line\">        done(code2);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      publish(tagString, done);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    publish(tagString, done);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用了<code>guard</code>任务，其实是一个错误警报</p>\n<p>然后调用<code>publish</code>真正的发布方法，其中又调用了<code>tag</code>方法，发布配置，包括邮箱地址等等和执行<code>gitpush</code>命令，还有<code>githubRelease</code>方法，应该是开源信息，不是很懂，非常的详尽。</p>\n<p><strong>但我应该不会用。</strong></p>\n<hr>\n<p>到此为止，<code>antd-tools</code>源码就看完了，具体可能会用到的其实就是<code>compile</code>和<code>dist</code>，其他的<code>publish</code>要用也会改简单一点，毕竟我只是一个人，并不需要大公司那种团队协作必需的详尽流程。</p>\n<p><code>generator-webtypes</code>是个比较方便的功能，可能会写一个<code>vscode</code>版本的。</p>\n<p>主要是学习了写命令行工具的方法，学习了很多知识，收益颇丰(<em>^▽^</em>)</p>\n<p><code>Ant-Tools</code>完结，接下来看下<code>ant-design</code>的结构。</p>\n"},{"title":"antd-tools详解（三）","date":"2021-07-23T08:26:06.000Z","_content":"\n我突然发现\n\n`\"generator-webtypes\": \"tsc -p antd-tools/generator-types/tsconfig.json && node antd-tools/generator-types/index.js\"`\n\n这个工具并不是使用的`gulp`进行的任务，先看一下\n\n### generator-webtypes \n\n看了下竟然是根据文档生成JetBrains代码提示的\n\n用法还挺复杂，还没找到文档，只有自己看了\n\n```\n  parseAndWrite({\n    version: pkg.version,\n    name: 'types',\n    path: path.resolve(rootPath, './v2-doc/src/docs'),\n    // default match lang\n    test: /index\\.md/,\n    outputDir: path.resolve(rootPath, './vetur'), \n    tagPrefix: 'a-',\n  });\n```\n\n调用是这么调用的，`test`匹配规则我改成了`index.md`，原来是`es-US.md`\n\n`async function readMarkdown(options: Options)`\n\n先读取markdown文档\n\n上面的调用的方法的话，那就得在`./v2-doc/src/docs`里面放文档\n\n然后formatter一下\n\nformatter方法里面做了一下几件事\n\n1. 并且根据文件名生成组件名，他会直接把短横线删除并且把驼峰式转为前缀加短横线模式\n2. 检索文件中的table，根据table名称来决定放在那个数组里\n3. 如果table名称是API，并且里面包含了插槽（slot等)字段，会把这一行信息放进，slots[]\n4. 如果table名称是API，但没有包含slot，则放进attributes[]\n5. 如果table名称是events，会把事件放进，events[]\n6. 如果table名称里面包含了组件名称，并且不是events，则说明是额外的子组件，则执行上面的所有流程\n\n挺复杂的，但意外的觉得好用，如果我不是个vscode忠实用户的话。\n\n\n\n想给vscode写一个了。\n\n就这么愉快地决定了。\n\n\n\n---\n\n周末啦，下班啦 2021/7/23 17:37\n\n---\n\n2021/7/26 13:45\n\n---\n\n研究了一下，vscode根据md生成提示代码的实现并不难，vscode有当前项目提示代码的配置文件。\n\n.vscode -> XXX-g.code-snippets。\n\n根据md生成相应语法的这个文件就行了。把组件库写完了再来弄这个。\n","source":"_posts/antd-tools-3.md","raw":"---\ntitle: antd-tools详解（三）\ndate: 2021-07-23 16:26:06\ntags: [AntDesignVue源码学习,Ant-tools,前端,node]\n---\n\n我突然发现\n\n`\"generator-webtypes\": \"tsc -p antd-tools/generator-types/tsconfig.json && node antd-tools/generator-types/index.js\"`\n\n这个工具并不是使用的`gulp`进行的任务，先看一下\n\n### generator-webtypes \n\n看了下竟然是根据文档生成JetBrains代码提示的\n\n用法还挺复杂，还没找到文档，只有自己看了\n\n```\n  parseAndWrite({\n    version: pkg.version,\n    name: 'types',\n    path: path.resolve(rootPath, './v2-doc/src/docs'),\n    // default match lang\n    test: /index\\.md/,\n    outputDir: path.resolve(rootPath, './vetur'), \n    tagPrefix: 'a-',\n  });\n```\n\n调用是这么调用的，`test`匹配规则我改成了`index.md`，原来是`es-US.md`\n\n`async function readMarkdown(options: Options)`\n\n先读取markdown文档\n\n上面的调用的方法的话，那就得在`./v2-doc/src/docs`里面放文档\n\n然后formatter一下\n\nformatter方法里面做了一下几件事\n\n1. 并且根据文件名生成组件名，他会直接把短横线删除并且把驼峰式转为前缀加短横线模式\n2. 检索文件中的table，根据table名称来决定放在那个数组里\n3. 如果table名称是API，并且里面包含了插槽（slot等)字段，会把这一行信息放进，slots[]\n4. 如果table名称是API，但没有包含slot，则放进attributes[]\n5. 如果table名称是events，会把事件放进，events[]\n6. 如果table名称里面包含了组件名称，并且不是events，则说明是额外的子组件，则执行上面的所有流程\n\n挺复杂的，但意外的觉得好用，如果我不是个vscode忠实用户的话。\n\n\n\n想给vscode写一个了。\n\n就这么愉快地决定了。\n\n\n\n---\n\n周末啦，下班啦 2021/7/23 17:37\n\n---\n\n2021/7/26 13:45\n\n---\n\n研究了一下，vscode根据md生成提示代码的实现并不难，vscode有当前项目提示代码的配置文件。\n\n.vscode -> XXX-g.code-snippets。\n\n根据md生成相应语法的这个文件就行了。把组件库写完了再来弄这个。\n","slug":"antd-tools-3","published":1,"updated":"2021-07-26T05:48:16.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrn8zvkp000k88v78y1x5idd","content":"<p>我突然发现</p>\n<p><code>&quot;generator-webtypes&quot;: &quot;tsc -p antd-tools/generator-types/tsconfig.json &amp;&amp; node antd-tools/generator-types/index.js&quot;</code></p>\n<p>这个工具并不是使用的<code>gulp</code>进行的任务，先看一下</p>\n<h3 id=\"generator-webtypes\"><a href=\"#generator-webtypes\" class=\"headerlink\" title=\"generator-webtypes\"></a>generator-webtypes</h3><p>看了下竟然是根据文档生成JetBrains代码提示的</p>\n<p>用法还挺复杂，还没找到文档，只有自己看了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseAndWrite(&#123;</span><br><span class=\"line\">  version: pkg.version,</span><br><span class=\"line\">  name: &#x27;types&#x27;,</span><br><span class=\"line\">  path: path.resolve(rootPath, &#x27;./v2-doc/src/docs&#x27;),</span><br><span class=\"line\">  // default match lang</span><br><span class=\"line\">  test: /index\\.md/,</span><br><span class=\"line\">  outputDir: path.resolve(rootPath, &#x27;./vetur&#x27;), </span><br><span class=\"line\">  tagPrefix: &#x27;a-&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>调用是这么调用的，<code>test</code>匹配规则我改成了<code>index.md</code>，原来是<code>es-US.md</code></p>\n<p><code>async function readMarkdown(options: Options)</code></p>\n<p>先读取markdown文档</p>\n<p>上面的调用的方法的话，那就得在<code>./v2-doc/src/docs</code>里面放文档</p>\n<p>然后formatter一下</p>\n<p>formatter方法里面做了一下几件事</p>\n<ol>\n<li>并且根据文件名生成组件名，他会直接把短横线删除并且把驼峰式转为前缀加短横线模式</li>\n<li>检索文件中的table，根据table名称来决定放在那个数组里</li>\n<li>如果table名称是API，并且里面包含了插槽（slot等)字段，会把这一行信息放进，slots[]</li>\n<li>如果table名称是API，但没有包含slot，则放进attributes[]</li>\n<li>如果table名称是events，会把事件放进，events[]</li>\n<li>如果table名称里面包含了组件名称，并且不是events，则说明是额外的子组件，则执行上面的所有流程</li>\n</ol>\n<p>挺复杂的，但意外的觉得好用，如果我不是个vscode忠实用户的话。</p>\n<p>想给vscode写一个了。</p>\n<p>就这么愉快地决定了。</p>\n<hr>\n<p>周末啦，下班啦 2021/7/23 17:37</p>\n<hr>\n<p>2021/7/26 13:45</p>\n<hr>\n<p>研究了一下，vscode根据md生成提示代码的实现并不难，vscode有当前项目提示代码的配置文件。</p>\n<p>.vscode -&gt; XXX-g.code-snippets。</p>\n<p>根据md生成相应语法的这个文件就行了。把组件库写完了再来弄这个。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我突然发现</p>\n<p><code>&quot;generator-webtypes&quot;: &quot;tsc -p antd-tools/generator-types/tsconfig.json &amp;&amp; node antd-tools/generator-types/index.js&quot;</code></p>\n<p>这个工具并不是使用的<code>gulp</code>进行的任务，先看一下</p>\n<h3 id=\"generator-webtypes\"><a href=\"#generator-webtypes\" class=\"headerlink\" title=\"generator-webtypes\"></a>generator-webtypes</h3><p>看了下竟然是根据文档生成JetBrains代码提示的</p>\n<p>用法还挺复杂，还没找到文档，只有自己看了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseAndWrite(&#123;</span><br><span class=\"line\">  version: pkg.version,</span><br><span class=\"line\">  name: &#x27;types&#x27;,</span><br><span class=\"line\">  path: path.resolve(rootPath, &#x27;./v2-doc/src/docs&#x27;),</span><br><span class=\"line\">  // default match lang</span><br><span class=\"line\">  test: /index\\.md/,</span><br><span class=\"line\">  outputDir: path.resolve(rootPath, &#x27;./vetur&#x27;), </span><br><span class=\"line\">  tagPrefix: &#x27;a-&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>调用是这么调用的，<code>test</code>匹配规则我改成了<code>index.md</code>，原来是<code>es-US.md</code></p>\n<p><code>async function readMarkdown(options: Options)</code></p>\n<p>先读取markdown文档</p>\n<p>上面的调用的方法的话，那就得在<code>./v2-doc/src/docs</code>里面放文档</p>\n<p>然后formatter一下</p>\n<p>formatter方法里面做了一下几件事</p>\n<ol>\n<li>并且根据文件名生成组件名，他会直接把短横线删除并且把驼峰式转为前缀加短横线模式</li>\n<li>检索文件中的table，根据table名称来决定放在那个数组里</li>\n<li>如果table名称是API，并且里面包含了插槽（slot等)字段，会把这一行信息放进，slots[]</li>\n<li>如果table名称是API，但没有包含slot，则放进attributes[]</li>\n<li>如果table名称是events，会把事件放进，events[]</li>\n<li>如果table名称里面包含了组件名称，并且不是events，则说明是额外的子组件，则执行上面的所有流程</li>\n</ol>\n<p>挺复杂的，但意外的觉得好用，如果我不是个vscode忠实用户的话。</p>\n<p>想给vscode写一个了。</p>\n<p>就这么愉快地决定了。</p>\n<hr>\n<p>周末啦，下班啦 2021/7/23 17:37</p>\n<hr>\n<p>2021/7/26 13:45</p>\n<hr>\n<p>研究了一下，vscode根据md生成提示代码的实现并不难，vscode有当前项目提示代码的配置文件。</p>\n<p>.vscode -&gt; XXX-g.code-snippets。</p>\n<p>根据md生成相应语法的这个文件就行了。把组件库写完了再来弄这个。</p>\n"},{"title":"nodejs-stream流","date":"2021-07-23T02:38:18.000Z","_content":"\n看antd-tools源码，发现自己对node流还是不是很理解，再巩固一下\n\n参考[知乎-破晓](https://zhuanlan.zhihu.com/p/36728655)\n\n觉得写得挺清楚，可以直接去看\n\n### 什么是流\n\n> 流是数据的集合 - 就像数组或者字符串。\n>\n> 他们之间的区别是流可能不是一次性获取到的，它们不需要匹配内存。\n>\n> 这让流在处理大容量数据，或者从一个额外的源每次获取一块数据的时候变得非常强大。\n\n#### 先来创建文件\n\n这个文件在[参考文章](https://zhuanlan.zhihu.com/p/36728655)里面说有大概400MB，但我创建出来只有56.2MB左右，应该是原作者算错了，57个字节乘100万行，应该就是56M左右。\n\n```\nconst fs = require('fs');\nconst file = fs.createWriteStream('./big.file');\nfor(let  i = 0;i<=1e6;i++) {\n    file.write('Lorem ipsum dolor sit amet, consectetur adipisicing elit. \\n');\n}\nfile.end();\n```\n\n#### 再来读取文件\n\n然后新建一个stream-server.js用node服务器读取big.file\n\n```\nconst fs = require('fs');\nconst server = require('http').createServer();\nserver.on('request', (req, res) => {\n    fs.readFile('./big.file', (err, data) => {\n        if(err) throw err;\n        res.end(data);\n    })\n});\nserver.listen(8000);\n```\n\n然后 `node strea,-server.js`启动，到`localhost:8000`\n\n会看到一大串字符出现的同时，右边滚动条在不断上划，说明数据在不断变多\n\n打开控制台Network,会看到\n\n![f12](/images/0723_1.jpg)\n\n就像水流一样不断地注入浏览器\n\n\n\n可能这就是(stream)流名字的由来\n\n\n\n但是我们在谷歌浏览器标题栏右键打开任务管理器后发现，这个网页内存占用非常的大，达到了170wK(这里的K是不是Kb？)\n\n![任务管理器](/images/0723_2.jpg)\n\n为什么呢？\n\n我们之前的方式就像把水倒到水缸里，但是我们只需要一点点用水，水缸里的水就浪费了水缸的空间。\n\n所以现在我们需要换种方式。\n\n```\nconst fs = require('fs');\nconst server = require('http').createServer();\n\nserver.on('request', (req, res) => {\n  const src = fs.createReadStream('./big.file');\n  src.pipe(res);\n});\n\nserver.listen(8000);\n```\n\n`pipe`就是管道的意思，这种方式就是相当于我们不用水缸了，直接用水龙头，用多少接多少，不用浪费水缸的地方了，毕竟房价挺贵的，一个水缸放现在一两万了。\n\n然后我们再运行，看内存占用\n\n![任务管理器](/images/0723_3.jpg)\n\n我擦，怎么没变\n\n翻车了-、-\n\n咋回事儿呢，扎回事儿呢，歪！？\n\n\n\n换成cmd `curl localhost:8000 `也是没看到内存有区别， 都是一样的卡，难道osx和windows堆内存的管理不同？还是我对pipe的理解有误。\n\n希望有人看到可以帮我解答一下\n\n***所以以上文字可能都是错的！***\n\n#### 四种基本流\n\n> 在 Node.js 中有四种基本的流类型：Readable（可读流），Writable（可写流），Duplex（双向流），Transform（转换流）。\n>\n> - 可读流是数据可以被消费的源的抽象。一个例子就是 fs.createReadStream 方法。\n> - 可读流是数据可以被写入目标的抽象。一个例子就是 fs.createWriteStream 方法。\n> - 双向流即是可读的也是可写的。一个例子是 TCP socket。\n> - 转换流是基于双向流的，可以在读或者写的时候被用来更改或者转换数据。一个例子是 zlib.createGzip 使用 gzip 算法压缩数据。你可以将转换流想象成一个函数，它的输入是可写流，输出是可读流。你或许也听过将转换流成为“通过流（through streams）”。\n\n#### pipe 方法\n\n> 通常建议使用 pipe 方法或者事件来消费流，但是不要混合使用它们。通常当你使用 pipe 方法时，不需要使用事件，但是如果你学要用更多自定义的方式使用流，那么就需要使用事件的方式。\n\n#### Stream事件\n\n以下建议去看原文，因为再写我应该也是照搬了，都是api里的东西。\n\n[知乎-破晓](https://zhuanlan.zhihu.com/p/36728655)\n","source":"_posts/nodejs-stream.md","raw":"---\ntitle: nodejs-stream流\ndate: 2021-07-23 10:38:18\ntags: [node,stream]\n---\n\n看antd-tools源码，发现自己对node流还是不是很理解，再巩固一下\n\n参考[知乎-破晓](https://zhuanlan.zhihu.com/p/36728655)\n\n觉得写得挺清楚，可以直接去看\n\n### 什么是流\n\n> 流是数据的集合 - 就像数组或者字符串。\n>\n> 他们之间的区别是流可能不是一次性获取到的，它们不需要匹配内存。\n>\n> 这让流在处理大容量数据，或者从一个额外的源每次获取一块数据的时候变得非常强大。\n\n#### 先来创建文件\n\n这个文件在[参考文章](https://zhuanlan.zhihu.com/p/36728655)里面说有大概400MB，但我创建出来只有56.2MB左右，应该是原作者算错了，57个字节乘100万行，应该就是56M左右。\n\n```\nconst fs = require('fs');\nconst file = fs.createWriteStream('./big.file');\nfor(let  i = 0;i<=1e6;i++) {\n    file.write('Lorem ipsum dolor sit amet, consectetur adipisicing elit. \\n');\n}\nfile.end();\n```\n\n#### 再来读取文件\n\n然后新建一个stream-server.js用node服务器读取big.file\n\n```\nconst fs = require('fs');\nconst server = require('http').createServer();\nserver.on('request', (req, res) => {\n    fs.readFile('./big.file', (err, data) => {\n        if(err) throw err;\n        res.end(data);\n    })\n});\nserver.listen(8000);\n```\n\n然后 `node strea,-server.js`启动，到`localhost:8000`\n\n会看到一大串字符出现的同时，右边滚动条在不断上划，说明数据在不断变多\n\n打开控制台Network,会看到\n\n![f12](/images/0723_1.jpg)\n\n就像水流一样不断地注入浏览器\n\n\n\n可能这就是(stream)流名字的由来\n\n\n\n但是我们在谷歌浏览器标题栏右键打开任务管理器后发现，这个网页内存占用非常的大，达到了170wK(这里的K是不是Kb？)\n\n![任务管理器](/images/0723_2.jpg)\n\n为什么呢？\n\n我们之前的方式就像把水倒到水缸里，但是我们只需要一点点用水，水缸里的水就浪费了水缸的空间。\n\n所以现在我们需要换种方式。\n\n```\nconst fs = require('fs');\nconst server = require('http').createServer();\n\nserver.on('request', (req, res) => {\n  const src = fs.createReadStream('./big.file');\n  src.pipe(res);\n});\n\nserver.listen(8000);\n```\n\n`pipe`就是管道的意思，这种方式就是相当于我们不用水缸了，直接用水龙头，用多少接多少，不用浪费水缸的地方了，毕竟房价挺贵的，一个水缸放现在一两万了。\n\n然后我们再运行，看内存占用\n\n![任务管理器](/images/0723_3.jpg)\n\n我擦，怎么没变\n\n翻车了-、-\n\n咋回事儿呢，扎回事儿呢，歪！？\n\n\n\n换成cmd `curl localhost:8000 `也是没看到内存有区别， 都是一样的卡，难道osx和windows堆内存的管理不同？还是我对pipe的理解有误。\n\n希望有人看到可以帮我解答一下\n\n***所以以上文字可能都是错的！***\n\n#### 四种基本流\n\n> 在 Node.js 中有四种基本的流类型：Readable（可读流），Writable（可写流），Duplex（双向流），Transform（转换流）。\n>\n> - 可读流是数据可以被消费的源的抽象。一个例子就是 fs.createReadStream 方法。\n> - 可读流是数据可以被写入目标的抽象。一个例子就是 fs.createWriteStream 方法。\n> - 双向流即是可读的也是可写的。一个例子是 TCP socket。\n> - 转换流是基于双向流的，可以在读或者写的时候被用来更改或者转换数据。一个例子是 zlib.createGzip 使用 gzip 算法压缩数据。你可以将转换流想象成一个函数，它的输入是可写流，输出是可读流。你或许也听过将转换流成为“通过流（through streams）”。\n\n#### pipe 方法\n\n> 通常建议使用 pipe 方法或者事件来消费流，但是不要混合使用它们。通常当你使用 pipe 方法时，不需要使用事件，但是如果你学要用更多自定义的方式使用流，那么就需要使用事件的方式。\n\n#### Stream事件\n\n以下建议去看原文，因为再写我应该也是照搬了，都是api里的东西。\n\n[知乎-破晓](https://zhuanlan.zhihu.com/p/36728655)\n","slug":"nodejs-stream","published":1,"updated":"2021-07-23T05:45:35.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrn8zvkq000l88v7ad180au7","content":"<p>看antd-tools源码，发现自己对node流还是不是很理解，再巩固一下</p>\n<p>参考<a href=\"https://zhuanlan.zhihu.com/p/36728655\">知乎-破晓</a></p>\n<p>觉得写得挺清楚，可以直接去看</p>\n<h3 id=\"什么是流\"><a href=\"#什么是流\" class=\"headerlink\" title=\"什么是流\"></a>什么是流</h3><blockquote>\n<p>流是数据的集合 - 就像数组或者字符串。</p>\n<p>他们之间的区别是流可能不是一次性获取到的，它们不需要匹配内存。</p>\n<p>这让流在处理大容量数据，或者从一个额外的源每次获取一块数据的时候变得非常强大。</p>\n</blockquote>\n<h4 id=\"先来创建文件\"><a href=\"#先来创建文件\" class=\"headerlink\" title=\"先来创建文件\"></a>先来创建文件</h4><p>这个文件在<a href=\"https://zhuanlan.zhihu.com/p/36728655\">参考文章</a>里面说有大概400MB，但我创建出来只有56.2MB左右，应该是原作者算错了，57个字节乘100万行，应该就是56M左右。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const file = fs.createWriteStream(&#x27;./big.file&#x27;);</span><br><span class=\"line\">for(let  i = 0;i&lt;=1e6;i++) &#123;</span><br><span class=\"line\">    file.write(&#x27;Lorem ipsum dolor sit amet, consectetur adipisicing elit. \\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file.end();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再来读取文件\"><a href=\"#再来读取文件\" class=\"headerlink\" title=\"再来读取文件\"></a>再来读取文件</h4><p>然后新建一个stream-server.js用node服务器读取big.file</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const server = require(&#x27;http&#x27;).createServer();</span><br><span class=\"line\">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(&#x27;./big.file&#x27;, (err, data) =&gt; &#123;</span><br><span class=\"line\">        if(err) throw err;</span><br><span class=\"line\">        res.end(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8000);</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>node strea,-server.js</code>启动，到<code>localhost:8000</code></p>\n<p>会看到一大串字符出现的同时，右边滚动条在不断上划，说明数据在不断变多</p>\n<p>打开控制台Network,会看到</p>\n<p><img src=\"/images/0723_1.jpg\" alt=\"f12\"></p>\n<p>就像水流一样不断地注入浏览器</p>\n<p>可能这就是(stream)流名字的由来</p>\n<p>但是我们在谷歌浏览器标题栏右键打开任务管理器后发现，这个网页内存占用非常的大，达到了170wK(这里的K是不是Kb？)</p>\n<p><img src=\"/images/0723_2.jpg\" alt=\"任务管理器\"></p>\n<p>为什么呢？</p>\n<p>我们之前的方式就像把水倒到水缸里，但是我们只需要一点点用水，水缸里的水就浪费了水缸的空间。</p>\n<p>所以现在我们需要换种方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const server = require(&#x27;http&#x27;).createServer();</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  const src = fs.createReadStream(&#x27;./big.file&#x27;);</span><br><span class=\"line\">  src.pipe(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000);</span><br></pre></td></tr></table></figure>\n\n<p><code>pipe</code>就是管道的意思，这种方式就是相当于我们不用水缸了，直接用水龙头，用多少接多少，不用浪费水缸的地方了，毕竟房价挺贵的，一个水缸放现在一两万了。</p>\n<p>然后我们再运行，看内存占用</p>\n<p><img src=\"/images/0723_3.jpg\" alt=\"任务管理器\"></p>\n<p>我擦，怎么没变</p>\n<p>翻车了-、-</p>\n<p>咋回事儿呢，扎回事儿呢，歪！？</p>\n<p>换成cmd <code>curl localhost:8000 </code>也是没看到内存有区别， 都是一样的卡，难道osx和windows堆内存的管理不同？还是我对pipe的理解有误。</p>\n<p>希望有人看到可以帮我解答一下</p>\n<p><em><strong>所以以上文字可能都是错的！</strong></em></p>\n<h4 id=\"四种基本流\"><a href=\"#四种基本流\" class=\"headerlink\" title=\"四种基本流\"></a>四种基本流</h4><blockquote>\n<p>在 Node.js 中有四种基本的流类型：Readable（可读流），Writable（可写流），Duplex（双向流），Transform（转换流）。</p>\n<ul>\n<li>可读流是数据可以被消费的源的抽象。一个例子就是 fs.createReadStream 方法。</li>\n<li>可读流是数据可以被写入目标的抽象。一个例子就是 fs.createWriteStream 方法。</li>\n<li>双向流即是可读的也是可写的。一个例子是 TCP socket。</li>\n<li>转换流是基于双向流的，可以在读或者写的时候被用来更改或者转换数据。一个例子是 zlib.createGzip 使用 gzip 算法压缩数据。你可以将转换流想象成一个函数，它的输入是可写流，输出是可读流。你或许也听过将转换流成为“通过流（through streams）”。</li>\n</ul>\n</blockquote>\n<h4 id=\"pipe-方法\"><a href=\"#pipe-方法\" class=\"headerlink\" title=\"pipe 方法\"></a>pipe 方法</h4><blockquote>\n<p>通常建议使用 pipe 方法或者事件来消费流，但是不要混合使用它们。通常当你使用 pipe 方法时，不需要使用事件，但是如果你学要用更多自定义的方式使用流，那么就需要使用事件的方式。</p>\n</blockquote>\n<h4 id=\"Stream事件\"><a href=\"#Stream事件\" class=\"headerlink\" title=\"Stream事件\"></a>Stream事件</h4><p>以下建议去看原文，因为再写我应该也是照搬了，都是api里的东西。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/36728655\">知乎-破晓</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>看antd-tools源码，发现自己对node流还是不是很理解，再巩固一下</p>\n<p>参考<a href=\"https://zhuanlan.zhihu.com/p/36728655\">知乎-破晓</a></p>\n<p>觉得写得挺清楚，可以直接去看</p>\n<h3 id=\"什么是流\"><a href=\"#什么是流\" class=\"headerlink\" title=\"什么是流\"></a>什么是流</h3><blockquote>\n<p>流是数据的集合 - 就像数组或者字符串。</p>\n<p>他们之间的区别是流可能不是一次性获取到的，它们不需要匹配内存。</p>\n<p>这让流在处理大容量数据，或者从一个额外的源每次获取一块数据的时候变得非常强大。</p>\n</blockquote>\n<h4 id=\"先来创建文件\"><a href=\"#先来创建文件\" class=\"headerlink\" title=\"先来创建文件\"></a>先来创建文件</h4><p>这个文件在<a href=\"https://zhuanlan.zhihu.com/p/36728655\">参考文章</a>里面说有大概400MB，但我创建出来只有56.2MB左右，应该是原作者算错了，57个字节乘100万行，应该就是56M左右。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const file = fs.createWriteStream(&#x27;./big.file&#x27;);</span><br><span class=\"line\">for(let  i = 0;i&lt;=1e6;i++) &#123;</span><br><span class=\"line\">    file.write(&#x27;Lorem ipsum dolor sit amet, consectetur adipisicing elit. \\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file.end();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再来读取文件\"><a href=\"#再来读取文件\" class=\"headerlink\" title=\"再来读取文件\"></a>再来读取文件</h4><p>然后新建一个stream-server.js用node服务器读取big.file</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const server = require(&#x27;http&#x27;).createServer();</span><br><span class=\"line\">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(&#x27;./big.file&#x27;, (err, data) =&gt; &#123;</span><br><span class=\"line\">        if(err) throw err;</span><br><span class=\"line\">        res.end(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8000);</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>node strea,-server.js</code>启动，到<code>localhost:8000</code></p>\n<p>会看到一大串字符出现的同时，右边滚动条在不断上划，说明数据在不断变多</p>\n<p>打开控制台Network,会看到</p>\n<p><img src=\"/images/0723_1.jpg\" alt=\"f12\"></p>\n<p>就像水流一样不断地注入浏览器</p>\n<p>可能这就是(stream)流名字的由来</p>\n<p>但是我们在谷歌浏览器标题栏右键打开任务管理器后发现，这个网页内存占用非常的大，达到了170wK(这里的K是不是Kb？)</p>\n<p><img src=\"/images/0723_2.jpg\" alt=\"任务管理器\"></p>\n<p>为什么呢？</p>\n<p>我们之前的方式就像把水倒到水缸里，但是我们只需要一点点用水，水缸里的水就浪费了水缸的空间。</p>\n<p>所以现在我们需要换种方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const server = require(&#x27;http&#x27;).createServer();</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  const src = fs.createReadStream(&#x27;./big.file&#x27;);</span><br><span class=\"line\">  src.pipe(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000);</span><br></pre></td></tr></table></figure>\n\n<p><code>pipe</code>就是管道的意思，这种方式就是相当于我们不用水缸了，直接用水龙头，用多少接多少，不用浪费水缸的地方了，毕竟房价挺贵的，一个水缸放现在一两万了。</p>\n<p>然后我们再运行，看内存占用</p>\n<p><img src=\"/images/0723_3.jpg\" alt=\"任务管理器\"></p>\n<p>我擦，怎么没变</p>\n<p>翻车了-、-</p>\n<p>咋回事儿呢，扎回事儿呢，歪！？</p>\n<p>换成cmd <code>curl localhost:8000 </code>也是没看到内存有区别， 都是一样的卡，难道osx和windows堆内存的管理不同？还是我对pipe的理解有误。</p>\n<p>希望有人看到可以帮我解答一下</p>\n<p><em><strong>所以以上文字可能都是错的！</strong></em></p>\n<h4 id=\"四种基本流\"><a href=\"#四种基本流\" class=\"headerlink\" title=\"四种基本流\"></a>四种基本流</h4><blockquote>\n<p>在 Node.js 中有四种基本的流类型：Readable（可读流），Writable（可写流），Duplex（双向流），Transform（转换流）。</p>\n<ul>\n<li>可读流是数据可以被消费的源的抽象。一个例子就是 fs.createReadStream 方法。</li>\n<li>可读流是数据可以被写入目标的抽象。一个例子就是 fs.createWriteStream 方法。</li>\n<li>双向流即是可读的也是可写的。一个例子是 TCP socket。</li>\n<li>转换流是基于双向流的，可以在读或者写的时候被用来更改或者转换数据。一个例子是 zlib.createGzip 使用 gzip 算法压缩数据。你可以将转换流想象成一个函数，它的输入是可写流，输出是可读流。你或许也听过将转换流成为“通过流（through streams）”。</li>\n</ul>\n</blockquote>\n<h4 id=\"pipe-方法\"><a href=\"#pipe-方法\" class=\"headerlink\" title=\"pipe 方法\"></a>pipe 方法</h4><blockquote>\n<p>通常建议使用 pipe 方法或者事件来消费流，但是不要混合使用它们。通常当你使用 pipe 方法时，不需要使用事件，但是如果你学要用更多自定义的方式使用流，那么就需要使用事件的方式。</p>\n</blockquote>\n<h4 id=\"Stream事件\"><a href=\"#Stream事件\" class=\"headerlink\" title=\"Stream事件\"></a>Stream事件</h4><p>以下建议去看原文，因为再写我应该也是照搬了，都是api里的东西。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/36728655\">知乎-破晓</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckrd88uxt0001hf677d399iij","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrd8cug6000bhf672fwgaq9a"},{"post_id":"ckrd88uxt0001hf677d399iij","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrd8cug6000chf675gab65ys"},{"post_id":"ckrd88uxr0000hf673xu3hgyk","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrd8cug6000dhf67f1d9ekke"},{"post_id":"ckrd88uxr0000hf673xu3hgyk","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrd8cug6000ehf671juffz0a"},{"post_id":"ckred61r10003iu67buva19bf","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrenm75l0001d4v78c7i5cyc"},{"post_id":"ckred61r10003iu67buva19bf","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrenm75l0002d4v707shgfnl"},{"post_id":"ckred61r10003iu67buva19bf","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrenm75l0003d4v7gwq8cleo"},{"post_id":"ckrealjgl0000iu67dd6j2cmv","tag_id":"ckrenm75t0004d4v7bhe3awjh","_id":"ckrenm75u0006d4v7230tb5vs"},{"post_id":"ckrealjgl0000iu67dd6j2cmv","tag_id":"ckrenm75u0005d4v7ayxv70bk","_id":"ckrenm75u0007d4v76uy35x7w"},{"post_id":"ckrenn7vb000078v79hji3hcz","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrenn7vf000178v76vlp7m9k"},{"post_id":"ckrenn7vb000078v79hji3hcz","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrenn7vf000278v7c50bf9ut"},{"post_id":"ckrenn7vb000078v79hji3hcz","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrenn7vf000378v7eqc5ejqm"},{"post_id":"ckrn8zvkj000488v718k21q25","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrn8zvkm000688v7dcvehv1f"},{"post_id":"ckrn8zvkj000488v718k21q25","tag_id":"ckrn8zvke000288v7cy3m7mip","_id":"ckrn8zvkm000788v748uz8b8y"},{"post_id":"ckrn8zvkj000488v718k21q25","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrn8zvkn000988v72zrl10fw"},{"post_id":"ckrn8zvkj000488v718k21q25","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrn8zvkn000a88v7fdzx2846"},{"post_id":"ckrn8zvk8000088v7heqj2r5r","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrn8zvkn000b88v7ch5s0v5z"},{"post_id":"ckrn8zvk8000088v7heqj2r5r","tag_id":"ckrn8zvke000288v7cy3m7mip","_id":"ckrn8zvkn000c88v746fm0sx3"},{"post_id":"ckrn8zvk8000088v7heqj2r5r","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrn8zvkn000d88v70aej4wm3"},{"post_id":"ckrn8zvk8000088v7heqj2r5r","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrn8zvkn000e88v77shzf9o3"},{"post_id":"ckrn8zvkd000188v76xvnfkm8","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrn8zvkn000f88v77idde6u0"},{"post_id":"ckrn8zvkd000188v76xvnfkm8","tag_id":"ckrn8zvke000288v7cy3m7mip","_id":"ckrn8zvko000g88v7c3g7gv5d"},{"post_id":"ckrn8zvkd000188v76xvnfkm8","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrn8zvko000h88v79zvx1d61"},{"post_id":"ckrn8zvkd000188v76xvnfkm8","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrn8zvko000i88v74m9dhux4"},{"post_id":"ckrn8zvki000388v72lfagid5","tag_id":"ckrn8zvkm000888v76gz09sje","_id":"ckrn8zvko000j88v7hykg2gnf"},{"post_id":"ckrn8zvkp000k88v78y1x5idd","tag_id":"ckrd78pel0000ec67bxeyawkt","_id":"ckrn8zvkr000m88v7al4cd2pi"},{"post_id":"ckrn8zvkp000k88v78y1x5idd","tag_id":"ckrn8zvke000288v7cy3m7mip","_id":"ckrn8zvks000o88v71vcs9xm0"},{"post_id":"ckrn8zvkp000k88v78y1x5idd","tag_id":"ckrd8cug40009hf67cyw56dbz","_id":"ckrn8zvks000p88v771451s7b"},{"post_id":"ckrn8zvkp000k88v78y1x5idd","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrn8zvks000q88v7akdqe3gx"},{"post_id":"ckrn8zvkq000l88v7ad180au7","tag_id":"ckrenm75j0000d4v79yzgdij4","_id":"ckrn8zvks000r88v768yb20b2"},{"post_id":"ckrn8zvkq000l88v7ad180au7","tag_id":"ckrn8zvkr000n88v7gun1cbvy","_id":"ckrn8zvks000s88v7b6d18lzq"}],"Tag":[{"name":"AntDesignVue源码学习","_id":"ckrd78pel0000ec67bxeyawkt"},{"name":"AntDesignVue源码学习,前端","_id":"ckrd88uxu0002hf67f6nxgefh"},{"name":"AntDesignVue源码学习 前端","_id":"ckrd8bj6p0005hf6729vj05d3"},{"name":"前端","_id":"ckrd8cug40009hf67cyw56dbz"},{"name":"服务器，记事","_id":"ckrealjgn0001iu67fesv4uz1"},{"name":"AntDesignVue源码学习，前端，node","_id":"ckred61r20004iu67guyp47qw"},{"name":"node","_id":"ckrenm75j0000d4v79yzgdij4"},{"name":"服务器","_id":"ckrenm75t0004d4v7bhe3awjh"},{"name":"记事","_id":"ckrenm75u0005d4v7ayxv70bk"},{"name":"Ant-tools","_id":"ckrn8zvke000288v7cy3m7mip"},{"name":"ArchyUI，前端","_id":"ckrn8zvkm000888v76gz09sje"},{"name":"stream","_id":"ckrn8zvkr000n88v7gun1cbvy"}]}}