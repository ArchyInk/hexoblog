<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发一个自己的组件库ArchyUi（一）</title>
      <link href="/archy-ui-01/"/>
      <url>/archy-ui-01/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>毕业在公司上班快一年了，目前也负责了几个项目的前端。</p><p>这半年负责的一个新项目底下有十来个系统，所有系统的基础框架是我写的，但当时时间很紧，公司之前也没有好的前端技术沉淀，所以是从零开始写的框架，没有稳定版本，也没有形成依赖包，甚至没有测试过。导致后来开发后，基础框架有修改，需要所有系统手动修改基础框架的内容。现在项目快结束了（真是他妈的一次痛苦的项目经历）。开始沉淀技术，形成稳定版本，并形成本地的npm依赖包。不会开源，因为开源需要申请。但会分享一些开发过程。</p><h3 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h3><p>之前也看过了<a href="https://github.com/vueComponent/ant-design-vue/blob/next">Ant-Design-Vue</a>源码，目前也准备在此基础上进行开发。想完全从零开发，效率低下而且我还没那个水平。</p><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><ol><li>建好项目结构</li><li>写好工具</li><li>开发组件</li><li>测试npmLink</li><li>完成</li></ol><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>首先用<code>vue create archyui</code>新建<code>vue3</code>项目</p><p>然后是最轻松的建项目环节，借鉴了一下<a href="https://github.com/vueComponent/ant-design-vue/blob/next">Ant-Design-Vue</a>，最后是这样的</p><p><img src="/images/0728_1.jpg" alt="目录"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">assets-基础资源</span><br><span class="line">components-组件</span><br><span class="line">docs-文档</span><br><span class="line">examples-展示组件，开发中用于组件调试，开发完用于组件库展示</span><br><span class="line">icons-图标</span><br><span class="line">node_modules-三方依赖</span><br><span class="line">tests-测试</span><br><span class="line">tools-工具</span><br><span class="line">types-ts类型定义</span><br></pre></td></tr></table></figure><h3 id="工具开发"><a href="#工具开发" class="headerlink" title="工具开发"></a>工具开发</h3><p>之前把Ant-design工具的源码拉出来看了，也写了解析，<a href="http://archy.ink/antd-tools-1/">这里</a></p><h5 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h5><p>首先是把<code>examples</code>用起来</p><p>先把<code>package.json</code>,<code>scripts</code>命令改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;example-serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">  &quot;example-build&quot;: &quot;vue-cli-service build&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>用作起程序和打包</p><p>然后新建个<code>vue.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      entry: &#x27;examples/index.js&#x27;,</span><br><span class="line">      template: &#x27;examples/index.html&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改一下<code>template</code>路径和<code>js</code>路径</p><p>至于<code>examples</code>文件夹里面有什么，其实暂时就是最基础的运行程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//examples/index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=&quot;Cache-Control&quot;</span><br><span class="line">      content=&quot;no-cache, no-store, must-revalidate&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Archy UI&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;./favicon.ico&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;noscript&gt;</span><br><span class="line">      &lt;strong&gt;JS加载失败&lt;/strong&gt;</span><br><span class="line">    &lt;/noscript&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot; style=&quot;padding: 50px&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//examples/App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Archy UI&lt;/div&gt;</span><br><span class="line">  &lt;HelloWorld /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Options, Vue &#125; from &quot;vue-class-component&quot;;</span><br><span class="line">import &#123; HelloWorld &#125; from &quot;../components&quot;;</span><br><span class="line"></span><br><span class="line">@Options(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">export default class App extends Vue &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//examples/index.js</span><br><span class="line">import &#123; createApp, version &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">const pkg = require(&#x27;../package.json&#x27;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Vue version:&#x27; + version)</span><br><span class="line">console.log(&#x27;Archy UI version:&#x27; + pkg.version);</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line"></span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后执行</p><p><code>yarn example-server</code></p><p>成功运行</p><p><img src="/images/0728_2.jpg" alt="界面"></p><h5 id="jest测试"><a href="#jest测试" class="headerlink" title="jest测试"></a>jest测试</h5><p>以前没用过单元测试，这次学习一下</p><p>但遇到了个问题</p><p><code>import &#123; shallowMount &#125; from &#39;@vue/test-utils&#39;</code></p><p>这句话一直报错<code>找不到模块“@vue/test-utils”或其相应的类型声明</code></p><p>排查了一下，发现<code>@vue/test-utils``2.0.0-rc.11</code>不知道为什么<code>dist</code>里面没有类型声明文件了</p><p><code>package.json</code>里面固定了一下版本<code>&quot;@vue/test-utils&quot;: &quot;2.0.0-rc.10&quot;</code>就可以了</p><p>顺便<code>package.json</code>里面把命令加了<code>&quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;</code></p><p>然后输入<code>yarn test:unit example</code></p><p><img src="/images/0728_3.jpg" alt="测试成功"></p><h5 id="命令行工具开发"><a href="#命令行工具开发" class="headerlink" title="命令行工具开发"></a>命令行工具开发</h5><p>先三连</p><p><code>yarn add colorful --dev</code></p><p><code>yarn add gulp --dev</code></p><p><code>yarn add commander --dev</code></p><p>三个工具之前都是介绍过的</p><p><a href="http://archy.ink/colorful/">colorful</a></p><p><a href="http://archy.ink/gulp/">gulp</a></p><p><a href="http://archy.ink/commander/">commander</a></p><p>顺便再介绍一个<a href="https://patorjk.com/software/taag/">炫酷的东西</a>,生成Banner，像这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                     .__                .__ </span><br><span class="line">_____ _______   ____ |  |__ ___.__.__ __|__|</span><br><span class="line">\__  \\_  __ \_/ ___\|  |  &lt;   |  |  |  \  |</span><br><span class="line"> / __ \|  | \/\  \___|   Y  \___  |  |  /  |</span><br><span class="line">(____  /__|    \___  &gt;___|  / ____|____/|__|</span><br><span class="line">     \/            \/     \/\/              </span><br></pre></td></tr></table></figure><p>先来个帮助命令</p><p>在<code>package.json</code>里面加两个脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;tools&quot;: &quot;node tools/cli/index.js&quot;,</span><br><span class="line">&quot;ui-help&quot;: &quot;node tools/cli/help.js&quot;</span><br></pre></td></tr></table></figure><p>建一个对象<code>_scripts</code>用来存储帮助信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;_scripts&quot;: &#123;</span><br><span class="line">  &quot;example-serve&quot;: &quot;run example serve,use for developing debug and show components after finished &quot;,</span><br><span class="line">  &quot;example-build&quot;: &quot;build example for show components page&quot;,</span><br><span class="line">  &quot;test:unit&quot;: &quot;unit test&quot;,</span><br><span class="line">  &quot;tools&quot;: &quot;run tools,the source code path is /tools/&quot;,</span><br><span class="line">  &quot;ui-help&quot;: &quot;run ui help&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后在<code>tools</code>下新建<code>cli/index.js</code>和<code>cli/help.js</code></p><p>没什么好讲的，直接上代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @Author: Archy</span><br><span class="line"> * @Date: 2021-07-28 16:05:16</span><br><span class="line"> * @LastEditors: Archy</span><br><span class="line"> * @LastEditTime: 2021-07-28 16:31:02</span><br><span class="line"> * @FilePath: \archyui\tools\cli\help.js</span><br><span class="line"> * @description:</span><br><span class="line"> */</span><br><span class="line">&#x27;use strict&#x27;</span><br><span class="line"></span><br><span class="line">require(&#x27;colorful&#x27;).colorful()</span><br><span class="line">require(&#x27;colorful&#x27;).isatty = true</span><br><span class="line">const program = require(&#x27;commander&#x27;)</span><br><span class="line">const pkg = require(&#x27;../../package.json&#x27;)</span><br><span class="line"></span><br><span class="line">program.version(</span><br><span class="line">  `</span><br><span class="line">  version:$&#123;pkg.version.to.bold.blue.color&#125;</span><br><span class="line">  `,</span><br><span class="line">  &#x27;-v, --version&#x27;,</span><br><span class="line">  `display current $&#123;&#x27;ArchyUI&#x27;.to.bold.blue.color&#125; version`</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">program.addHelpText(&#x27;beforeAll&#x27;, `</span><br><span class="line">█████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗</span><br><span class="line">██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║</span><br><span class="line">███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║</span><br><span class="line">██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║</span><br><span class="line">██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║</span><br><span class="line">╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝</span><br><span class="line"></span><br><span class="line">`.to.bold.blue.color)</span><br><span class="line">program.name(&#x27;yarn or npm run&#x27;).usage(&#x27;[scripts] options&#x27;)</span><br><span class="line">program.helpOption(false)</span><br><span class="line"></span><br><span class="line">Object.entries(pkg._scripts).forEach((item) =&gt; &#123;</span><br><span class="line">  program.option(item[0], item[1])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line">const proc = program.runningCommand</span><br><span class="line"></span><br><span class="line">if (proc) &#123;</span><br><span class="line">  proc.on(&#x27;close&#x27;, process.exit.bind(process))</span><br><span class="line">  proc.on(&#x27;error&#x27;, () =&gt; &#123;</span><br><span class="line">    process.exit(1)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">program.help()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @Author: Archy</span><br><span class="line"> * @Date: 2021-07-28 14:32:12</span><br><span class="line"> * @LastEditors: Archy</span><br><span class="line"> * @LastEditTime: 2021-07-28 16:26:44</span><br><span class="line"> * @FilePath: \archyui\tools\cli\index.js</span><br><span class="line"> * @description: </span><br><span class="line"> */</span><br><span class="line">&#x27;use strict&#x27;</span><br><span class="line"></span><br><span class="line">require(&#x27;colorful&#x27;).colorful()</span><br><span class="line">require(&#x27;colorful&#x27;).isatty = true</span><br><span class="line">const program = require(&#x27;commander&#x27;)</span><br><span class="line">const pkg = require(&#x27;../../package.json&#x27;)</span><br><span class="line"></span><br><span class="line">program.version(</span><br><span class="line">  `</span><br><span class="line">  █████╗  ██████╗  ██████╗██╗  ██╗██╗   ██╗██╗   ██╗██╗</span><br><span class="line">  ██╔══██╗██╔══██╗██╔════╝██║  ██║╚██╗ ██╔╝██║   ██║██║</span><br><span class="line">  ███████║██████╔╝██║     ███████║ ╚████╔╝ ██║   ██║██║</span><br><span class="line">  ██╔══██║██╔══██╗██║     ██╔══██║  ╚██╔╝  ██║   ██║██║</span><br><span class="line">  ██║  ██║██║  ██║╚██████╗██║  ██║   ██║   ╚██████╔╝██║</span><br><span class="line">  ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  version:$&#123;pkg.version.to.bold.blue.color&#125;</span><br><span class="line">  `,</span><br><span class="line">  &#x27;-v, --version&#x27;,</span><br><span class="line">  `display current $&#123;&#x27;ArchyUi&#x27;.to.bold.blue.color&#125; version`</span><br><span class="line">)</span><br><span class="line">program.option(&#x27;-h, --help&#x27;, `display $&#123;&#x27;help&#x27;.to.bold.blue.color&#125; for command`)</span><br><span class="line"></span><br><span class="line">program.addHelpText(</span><br><span class="line">  &#x27;beforeAll&#x27;,</span><br><span class="line">  &#x27;✂  ArchyUI Tools&#x27;.to.bold.blue.color,</span><br><span class="line">)</span><br><span class="line">program.name(&#x27;&lt;yarn tools|npm run tools&gt;&#x27;)</span><br><span class="line">program.parse(process.argv)</span><br><span class="line">const proc = program.runningCommand</span><br><span class="line"></span><br><span class="line">if (proc) &#123;</span><br><span class="line">  proc.on(&#x27;close&#x27;, process.exit.bind(process))</span><br><span class="line">  proc.on(&#x27;error&#x27;, () =&gt; &#123;</span><br><span class="line">    process.exit(1)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const subCmd = program.args[0]</span><br><span class="line">if (!subCmd) &#123;</span><br><span class="line">  program.help()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>关于<code>banner</code>要注意的是</p><p><code>\</code>要用<code>\\</code>代替，不然无法显示</p><p>里面涉及到很多<code>commander</code>    的方法，不懂的话建议去看文档<a href="https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md">Commander.js</a>写得很清楚</p><p>测试一下，在根目录输入<code>yarn ui-help</code></p><p><img src="/images/0728_4.jpg" alt="1"></p><p>输入<code>yarn tools</code></p><p><img src="/images/0728_5.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ArchyUI，前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd-tools详解（四）</title>
      <link href="/antd-tools-4/"/>
      <url>/antd-tools-4/</url>
      
        <content type="html"><![CDATA[<p>上午调休半天。</p><hr><p>直接来看<code> &quot;pub&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js pub&quot;</code>这句命令的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(</span><br><span class="line">  &#x27;pub&#x27;,</span><br><span class="line">  gulp.series(&#x27;check-git&#x27;, &#x27;compile&#x27;, &#x27;dist&#x27;, done =&gt; &#123;</span><br><span class="line">    // if (!process.env.GITHUB_TOKEN) &#123;</span><br><span class="line">    //   console.log(&#x27;no GitHub token found, skip&#x27;);</span><br><span class="line">    // &#125; else &#123;</span><br><span class="line">    //   pub(done);</span><br><span class="line">    // &#125;</span><br><span class="line">    pub(done);</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>按顺序执行<code>check-git</code>,<code>compile</code>和<code>dist</code>三个任务</p><p><code>compile</code>和<code>dist</code>已经看过了</p><p>直接看<code>check-git</code>看语义应该是<code>git</code>验证相关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(</span><br><span class="line">  &#x27;check-git&#x27;,</span><br><span class="line">  gulp.series(done =&gt; &#123;</span><br><span class="line">    runCmd(&#x27;git&#x27;, [&#x27;status&#x27;, &#x27;--porcelain&#x27;], (code, result) =&gt; &#123;</span><br><span class="line">      if (/^\?\?/m.test(result)) &#123;</span><br><span class="line">        return done(`There are untracked files in the working tree.\n$&#123;result&#125;</span><br><span class="line">      `);</span><br><span class="line">      &#125;</span><br><span class="line">      if (/^([ADRM]| [ADRM])/m.test(result)) &#123;</span><br><span class="line">        return done(`There are uncommitted changes in the working tree.\n$&#123;result&#125;</span><br><span class="line">      `);</span><br><span class="line">      &#125;</span><br><span class="line">      return done();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>执行了<code>runCmd</code>方法，看起来像是执行命令行命令的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function runCmd(cmd, _args, fn) &#123;</span><br><span class="line">  const args = _args || [];</span><br><span class="line">  const runner = require(&#x27;child_process&#x27;).spawn(cmd, args, &#123;</span><br><span class="line">    // keep color</span><br><span class="line">    stdio: &#x27;inherit&#x27;,</span><br><span class="line">    env: getRunCmdEnv(),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  runner.on(&#x27;close&#x27;, code =&gt; &#123;</span><br><span class="line">    if (fn) &#123;</span><br><span class="line">      fn(code);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些知识盲区，查一下</p><blockquote><p><code>child_process.spawn(command[, args][, options])</code></p><p><strong>command：</strong> 将要运行的命令</p><p><strong>args：</strong> Array 字符串参数数组</p><p><strong>options Object</strong></p><ul><li><code>cwd</code> <code>String</code> 子进程的当前工作目录</li><li><code>env</code> <code>Object</code> 环境变量键值对</li><li><code>stdio</code> <code>Array|String</code> 子进程的 <code>stdio</code> 配置</li><li><code>detached</code> <code>Boolean</code> 这个子进程将会变成进程组的领导</li><li><code>uid</code> <code>Number</code> 设置用户进程的 ID</li><li><code>gid</code> <code>Number</code> 设置进程组的 ID</li></ul></blockquote><p><code>options</code>里面<code>stdio</code>传入了<code>inherit</code>,相当于子进程将使用父进程的标准输入输出。</p><p>其他参数还有</p><blockquote><p><code>options.stdio</code> 选项用于配置在父进程和子进程之间建立的管道。 默认情况下，子进程的标准输入、标准输出和标准错误被重定向到 <code>ChildProcess</code>对象上相应的 <code>subprocess.stdin</code>、<code>subprocess.stdout</code> 和 <code>subprocess.stderr</code>流。 这相当于将 <code>options.stdio</code> 设置为等于 <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>。</p><p>为方便起见，<code>options.stdio</code> 可能是以下字符串之一：</p><ul><li><code>&#39;pipe&#39;</code>: 相当于 <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>（默认）</li><li><code>&#39;overlapped&#39;</code>: 相当于 <code>[&#39;overlapped&#39;, &#39;overlapped&#39;, &#39;overlapped&#39;]</code></li><li><code>&#39;ignore&#39;</code>: 相当于 <code>[&#39;ignore&#39;, &#39;ignore&#39;, &#39;ignore&#39;]</code></li><li><code>&#39;inherit&#39;</code>: 相当于 <code>[&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]</code> 或 <code>[0, 1, 2]</code></li></ul></blockquote><p><a href="http://nodejs.cn/api/child_process.html#child_process_event_spawn">参考</a></p><p><code>env</code>传入了<code>getRunCmdEnv()</code></p><p>研究一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = function getRunCmdEnv() &#123;</span><br><span class="line">  const env = &#123;&#125;;</span><br><span class="line">  Object.keys(process.env).forEach(key =&gt; &#123;</span><br><span class="line">    env[key] = process.env[key];</span><br><span class="line">  &#125;);</span><br><span class="line">  // make sure `antd-tools/node_modules/.bin` in the PATH env</span><br><span class="line">  const nodeModulesBinDir = path.join(__dirname, &#x27;../../node_modules/.bin&#x27;);</span><br><span class="line"></span><br><span class="line">  Object.entries(env)</span><br><span class="line">    .filter(</span><br><span class="line">      v =&gt;</span><br><span class="line">        v</span><br><span class="line">          .slice(0, 1)</span><br><span class="line">          .pop()</span><br><span class="line">          .toLowerCase() === &#x27;path&#x27;,</span><br><span class="line">    )</span><br><span class="line">    .forEach(v =&gt; &#123;</span><br><span class="line">      const key = v.slice(0, 1).pop();</span><br><span class="line">      env[key] = env[key] ? `$&#123;nodeModulesBinDir&#125;:$&#123;env[key]&#125;` : nodeModulesBinDir;</span><br><span class="line">    &#125;);</span><br><span class="line">  return env;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对<code>env</code>进行了修改，确保<code>antd-tools/node_modules/.bin</code>在环境变量中，但只在这个进程里有用。</p><p>没啥好看的，具体实现就是一堆高阶函数。</p><p>回到<code>check-git</code>，实质就是执行了<code>git status --porcelain</code>命令，就是展示改动状态。</p><p>但是<code>pub</code>命令实质就是编译并打包，最后执行<code>pub</code>方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function pub(done) &#123;</span><br><span class="line">  const notOk = !packageJson.version.match(/^\d+\.\d+\.\d+$/);</span><br><span class="line">  let tagString;</span><br><span class="line">  if (argv[&#x27;npm-tag&#x27;]) &#123;</span><br><span class="line">    tagString = argv[&#x27;npm-tag&#x27;];</span><br><span class="line">  &#125;</span><br><span class="line">  if (!tagString &amp;&amp; notOk) &#123;</span><br><span class="line">    tagString = &#x27;next&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  if (packageJson.scripts[&#x27;pre-publish&#x27;]) &#123;</span><br><span class="line">    runCmd(&#x27;npm&#x27;, [&#x27;run&#x27;, &#x27;pre-publish&#x27;], code2 =&gt; &#123;</span><br><span class="line">      if (code2) &#123;</span><br><span class="line">        done(code2);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      publish(tagString, done);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    publish(tagString, done);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了<code>guard</code>任务，其实是一个错误警报</p><p>然后调用<code>publish</code>真正的发布方法，其中又调用了<code>tag</code>方法，发布配置，包括邮箱地址等等和执行<code>gitpush</code>命令，还有<code>githubRelease</code>方法，应该是开源信息，不是很懂，非常的详尽。</p><p><strong>但我应该不会用。</strong></p><hr><p>到此为止，<code>antd-tools</code>源码就看完了，具体可能会用到的其实就是<code>compile</code>和<code>dist</code>，其他的<code>publish</code>要用也会改简单一点，毕竟我只是一个人，并不需要大公司那种团队协作必需的详尽流程。</p><p><code>generator-webtypes</code>是个比较方便的功能，可能会写一个<code>vscode</code>版本的。</p><p>主要是学习了写命令行工具的方法，学习了很多知识，收益颇丰(<em>^▽^</em>)</p><p><code>Ant-Tools</code>完结，接下来看下<code>ant-design</code>的结构。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
            <tag> Ant-tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd-tools详解（三）</title>
      <link href="/antd-tools-3/"/>
      <url>/antd-tools-3/</url>
      
        <content type="html"><![CDATA[<p>我突然发现</p><p><code>&quot;generator-webtypes&quot;: &quot;tsc -p antd-tools/generator-types/tsconfig.json &amp;&amp; node antd-tools/generator-types/index.js&quot;</code></p><p>这个工具并不是使用的<code>gulp</code>进行的任务，先看一下</p><h3 id="generator-webtypes"><a href="#generator-webtypes" class="headerlink" title="generator-webtypes"></a>generator-webtypes</h3><p>看了下竟然是根据文档生成JetBrains代码提示的</p><p>用法还挺复杂，还没找到文档，只有自己看了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">parseAndWrite(&#123;</span><br><span class="line">  version: pkg.version,</span><br><span class="line">  name: &#x27;types&#x27;,</span><br><span class="line">  path: path.resolve(rootPath, &#x27;./v2-doc/src/docs&#x27;),</span><br><span class="line">  // default match lang</span><br><span class="line">  test: /index\.md/,</span><br><span class="line">  outputDir: path.resolve(rootPath, &#x27;./vetur&#x27;), </span><br><span class="line">  tagPrefix: &#x27;a-&#x27;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用是这么调用的，<code>test</code>匹配规则我改成了<code>index.md</code>，原来是<code>es-US.md</code></p><p><code>async function readMarkdown(options: Options)</code></p><p>先读取markdown文档</p><p>上面的调用的方法的话，那就得在<code>./v2-doc/src/docs</code>里面放文档</p><p>然后formatter一下</p><p>formatter方法里面做了一下几件事</p><ol><li>并且根据文件名生成组件名，他会直接把短横线删除并且把驼峰式转为前缀加短横线模式</li><li>检索文件中的table，根据table名称来决定放在那个数组里</li><li>如果table名称是API，并且里面包含了插槽（slot等)字段，会把这一行信息放进，slots[]</li><li>如果table名称是API，但没有包含slot，则放进attributes[]</li><li>如果table名称是events，会把事件放进，events[]</li><li>如果table名称里面包含了组件名称，并且不是events，则说明是额外的子组件，则执行上面的所有流程</li></ol><p>挺复杂的，但意外的觉得好用，如果我不是个vscode忠实用户的话。</p><p>想给vscode写一个了。</p><p>就这么愉快地决定了。</p><hr><p>周末啦，下班啦 2021/7/23 17:37</p><hr><p>2021/7/26 13:45</p><hr><p>研究了一下，vscode根据md生成提示代码的实现并不难，vscode有当前项目提示代码的配置文件。</p><p>.vscode -&gt; XXX-g.code-snippets。</p><p>根据md生成相应语法的这个文件就行了。把组件库写完了再来弄这个。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
            <tag> Ant-tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd-tools详解（二）</title>
      <link href="/antd-tools-2/"/>
      <url>/antd-tools-2/</url>
      
        <content type="html"><![CDATA[<h3 id="dist"><a href="#dist" class="headerlink" title="dist"></a>dist</h3><p>趁热打铁，直接看打包的代码吧</p><p><code>&quot;dist&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js dist&quot;,</code></p><p>也就是这个命令</p><p><code>gulp</code>执行<code>dist</code>任务，在<code>antd-tools\gulpfile.js</code>里面找到<code>dist</code>任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(</span><br><span class="line">  &#x27;dist&#x27;,</span><br><span class="line">  gulp.series(done =&gt; &#123;</span><br><span class="line">    dist(done);</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>没有做其他事情，就是单纯调用<code>dist</code>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function dist(done) &#123;</span><br><span class="line">  rimraf.sync(path.join(cwd, &#x27;dist&#x27;));</span><br><span class="line">  process.env.RUN_ENV = &#x27;PRODUCTION&#x27;;</span><br><span class="line">  const webpackConfig = require(getProjectPath(&#x27;webpack.build.conf.js&#x27;));</span><br><span class="line">  webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.error(err.stack || err);</span><br><span class="line">      if (err.details) &#123;</span><br><span class="line">        console.error(err.details);</span><br><span class="line">      &#125;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const info = stats.toJson();</span><br><span class="line"></span><br><span class="line">    if (stats.hasErrors()) &#123;</span><br><span class="line">      console.error(info.errors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (stats.hasWarnings()) &#123;</span><br><span class="line">      console.warn(info.warnings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const buildInfo = stats.toString(&#123;</span><br><span class="line">      colors: true,</span><br><span class="line">      children: true,</span><br><span class="line">      chunks: false,</span><br><span class="line">      modules: false,</span><br><span class="line">      chunkModules: false,</span><br><span class="line">      hash: false,</span><br><span class="line">      version: false,</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(buildInfo);</span><br><span class="line">    done(0);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包调用的就是<code>webpack</code>的方法了</p><p>但别以为就是这么一小段</p><p><code>webpackConfig</code>Ant-tools可是对其进行了大量的处理</p><p>我只把其中需要注意的说一下</p><h5 id="webpack-build-conf-js"><a href="#webpack-build-conf-js" class="headerlink" title="webpack.build.conf.js"></a>webpack.build.conf.js</h5><p>在<code>webpack.build.conf.js</code>中</p><p>一上来就有个注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// noParse still leave `require(&#x27;./locale&#x27; + name)` in dist files</span><br><span class="line">// ignore is better</span><br><span class="line">// http://stackoverflow.com/q/25384360</span><br></pre></td></tr></table></figure><p>我看了下sf，大意是指webpack给moment打包会把所有语言文件打包进去，大大增加包体积。</p><p>所以最好用<code>ignorePlugin</code>把他忽略了</p><p>这个<code>js</code>文件exports了两个config</p><p>一个是<code>webpackConfig</code>另一个是<code>webpackDarkConfig</code></p><p>应该是两个主题不同的配置，导出不同的样式文件</p><p>看样子以后写主题也要用类似的方法了，写UI库的时候尝试一下。</p><h5 id="getWebpackConfig-js"><a href="#getWebpackConfig-js" class="headerlink" title="getWebpackConfig.js"></a>getWebpackConfig.js</h5><p><em>尝试打包了一下，打包好慢，花了四分多钟</em></p><p>这个文件可就大了，差不多300行，其中大多数是配置和对各种类型文件的处理，其中运用了大量的插件，很多都是打包必须的插件，我不是很感兴趣。</p><p>但有个插件我很感兴趣</p><p><code>WebpackBar</code></p><p>引入<code>const WebpackBar = require(&#39;webpackbar&#39;);</code></p><p>用法很简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new WebpackBar(&#123;</span><br><span class="line">   name: &#x27;🚚  Ant Design Vue Tools&#x27;,//这个图标ant-tools使用时并没有加载出来</span><br><span class="line">   color: &#x27;#2f54eb&#x27;,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>改成自己的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new WebpackBar(&#123;</span><br><span class="line">   name: &#x27;Archy&#x27;,</span><br><span class="line">   color: &#x27;#2570a1&#x27;,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p><img src="/images/0723_4.jpg" alt="cool"></p><p><strong>没什么卵用，但这样很coolllllllllll！！！</strong></p><p>然后执行打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// Development</span><br><span class="line">    const uncompressedConfig = merge(&#123;&#125;, config, &#123;</span><br><span class="line">      entry: &#123;</span><br><span class="line">        [distFileBaseName]: entry,</span><br><span class="line">      &#125;,</span><br><span class="line">      mode: &#x27;development&#x27;,</span><br><span class="line">      plugins: [</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">          filename: &#x27;[name].css&#x27;,</span><br><span class="line">        &#125;),</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Production</span><br><span class="line">    const prodConfig = merge(&#123;&#125;, config, &#123;</span><br><span class="line">      entry: &#123;</span><br><span class="line">        [`$&#123;distFileBaseName&#125;.min`]: entry,</span><br><span class="line">      &#125;,</span><br><span class="line">      mode: &#x27;production&#x27;,</span><br><span class="line">      plugins: [</span><br><span class="line">        new webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">        new webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">          minimize: true,</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">          filename: &#x27;[name].css&#x27;,</span><br><span class="line">        &#125;),</span><br><span class="line">      ],</span><br><span class="line">      optimization: &#123;</span><br><span class="line">        minimize: true,</span><br><span class="line">        minimizer: [new CssMinimizerPlugin(&#123;&#125;)],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>打了两份代码，一份压缩的，一份没有压缩的</p><p>最后返回了配置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
            <tag> Ant-tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs-stream流</title>
      <link href="/nodejs-stream/"/>
      <url>/nodejs-stream/</url>
      
        <content type="html"><![CDATA[<p>看antd-tools源码，发现自己对node流还是不是很理解，再巩固一下</p><p>参考<a href="https://zhuanlan.zhihu.com/p/36728655">知乎-破晓</a></p><p>觉得写得挺清楚，可以直接去看</p><h3 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h3><blockquote><p>流是数据的集合 - 就像数组或者字符串。</p><p>他们之间的区别是流可能不是一次性获取到的，它们不需要匹配内存。</p><p>这让流在处理大容量数据，或者从一个额外的源每次获取一块数据的时候变得非常强大。</p></blockquote><h4 id="先来创建文件"><a href="#先来创建文件" class="headerlink" title="先来创建文件"></a>先来创建文件</h4><p>这个文件在<a href="https://zhuanlan.zhihu.com/p/36728655">参考文章</a>里面说有大概400MB，但我创建出来只有56.2MB左右，应该是原作者算错了，57个字节乘100万行，应该就是56M左右。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const file = fs.createWriteStream(&#x27;./big.file&#x27;);</span><br><span class="line">for(let  i = 0;i&lt;=1e6;i++) &#123;</span><br><span class="line">    file.write(&#x27;Lorem ipsum dolor sit amet, consectetur adipisicing elit. \n&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">file.end();</span><br></pre></td></tr></table></figure><h4 id="再来读取文件"><a href="#再来读取文件" class="headerlink" title="再来读取文件"></a>再来读取文件</h4><p>然后新建一个stream-server.js用node服务器读取big.file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const server = require(&#x27;http&#x27;).createServer();</span><br><span class="line">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    fs.readFile(&#x27;./big.file&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">        if(err) throw err;</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(8000);</span><br></pre></td></tr></table></figure><p>然后 <code>node strea,-server.js</code>启动，到<code>localhost:8000</code></p><p>会看到一大串字符出现的同时，右边滚动条在不断上划，说明数据在不断变多</p><p>打开控制台Network,会看到</p><p><img src="/images/0723_1.jpg" alt="f12"></p><p>就像水流一样不断地注入浏览器</p><p>可能这就是(stream)流名字的由来</p><p>但是我们在谷歌浏览器标题栏右键打开任务管理器后发现，这个网页内存占用非常的大，达到了170wK(这里的K是不是Kb？)</p><p><img src="/images/0723_2.jpg" alt="任务管理器"></p><p>为什么呢？</p><p>我们之前的方式就像把水倒到水缸里，但是我们只需要一点点用水，水缸里的水就浪费了水缸的空间。</p><p>所以现在我们需要换种方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const server = require(&#x27;http&#x27;).createServer();</span><br><span class="line"></span><br><span class="line">server.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  const src = fs.createReadStream(&#x27;./big.file&#x27;);</span><br><span class="line">  src.pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8000);</span><br></pre></td></tr></table></figure><p><code>pipe</code>就是管道的意思，这种方式就是相当于我们不用水缸了，直接用水龙头，用多少接多少，不用浪费水缸的地方了，毕竟房价挺贵的，一个水缸放现在一两万了。</p><p>然后我们再运行，看内存占用</p><p><img src="/images/0723_3.jpg" alt="任务管理器"></p><p>我擦，怎么没变</p><p>翻车了-、-</p><p>咋回事儿呢，扎回事儿呢，歪！？</p><p>换成cmd <code>curl localhost:8000 </code>也是没看到内存有区别， 都是一样的卡，难道osx和windows堆内存的管理不同？还是我对pipe的理解有误。</p><p>希望有人看到可以帮我解答一下</p><p><em><strong>所以以上文字可能都是错的！</strong></em></p><h4 id="四种基本流"><a href="#四种基本流" class="headerlink" title="四种基本流"></a>四种基本流</h4><blockquote><p>在 Node.js 中有四种基本的流类型：Readable（可读流），Writable（可写流），Duplex（双向流），Transform（转换流）。</p><ul><li>可读流是数据可以被消费的源的抽象。一个例子就是 fs.createReadStream 方法。</li><li>可读流是数据可以被写入目标的抽象。一个例子就是 fs.createWriteStream 方法。</li><li>双向流即是可读的也是可写的。一个例子是 TCP socket。</li><li>转换流是基于双向流的，可以在读或者写的时候被用来更改或者转换数据。一个例子是 zlib.createGzip 使用 gzip 算法压缩数据。你可以将转换流想象成一个函数，它的输入是可写流，输出是可读流。你或许也听过将转换流成为“通过流（through streams）”。</li></ul></blockquote><h4 id="pipe-方法"><a href="#pipe-方法" class="headerlink" title="pipe 方法"></a>pipe 方法</h4><blockquote><p>通常建议使用 pipe 方法或者事件来消费流，但是不要混合使用它们。通常当你使用 pipe 方法时，不需要使用事件，但是如果你学要用更多自定义的方式使用流，那么就需要使用事件的方式。</p></blockquote><h4 id="Stream事件"><a href="#Stream事件" class="headerlink" title="Stream事件"></a>Stream事件</h4><p>以下建议去看原文，因为再写我应该也是照搬了，都是api里的东西。</p><p><a href="https://zhuanlan.zhihu.com/p/36728655">知乎-破晓</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd-tools详解（一）</title>
      <link href="/antd-tools-1/"/>
      <url>/antd-tools-1/</url>
      
        <content type="html"><![CDATA[<p>首先看看antd-design-vue根目录中的<a href="https://github.com/vueComponent/ant-design-vue/blob/next/package.json">package.json</a></p><p>从中可以看到antd-tools里面使用的工具有哪些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;compile&quot;: &quot;node antd-tools/cli/run.js compile&quot;,</span><br><span class="line"></span><br><span class="line">&quot;generator-webtypes&quot;: &quot;tsc -p antd-tools/generator-types/tsconfig.json &amp;&amp; node antd-tools/generator-types/index.js&quot;,</span><br><span class="line"></span><br><span class="line">&quot;pub&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js pub&quot;,</span><br><span class="line"></span><br><span class="line">&quot;pub-with-ci&quot;: &quot;node antd-tools/cli/run.js pub-with-ci&quot;,</span><br><span class="line"></span><br><span class="line">&quot;prepublish&quot;: &quot;node antd-tools/cli/run.js guard&quot;,</span><br><span class="line"></span><br><span class="line">&quot;dist&quot;: &quot;node --max_old_space_size=8192 antd-tools/cli/run.js dist&quot;,</span><br></pre></td></tr></table></figure><p>目前看就是这6个工具</p><p>根据命令语义看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compile 编译</span><br><span class="line">generator-webtypes 初始化</span><br><span class="line">pub 发布 </span><br><span class="line">pub-with-ci 在ci下pub（不懂） </span><br><span class="line">prepublish 预发布</span><br><span class="line">dist 打包</span><br></pre></td></tr></table></figure><p>一个个看吧</p><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>在<code>antd-tools\gulpfile.js</code>里能找到代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(</span><br><span class="line">  &#x27;compile&#x27;,</span><br><span class="line">  gulp.series(gulp.parallel(&#x27;compile-with-es&#x27;, &#x27;compile-with-lib&#x27;), done =&gt; &#123;</span><br><span class="line">    done();</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>gulp.series()</code>和<code>gulp.parallel()</code>是gulp中的组合任务，允许将多个独立的任务组合为一个更大的操作，<code>series()</code> 和 <code>parallel()</code> 可以互相嵌套至任意深度。如果需要让任务（task）按顺序执行，请使用 <code>series()</code> 方法。对于希望以最大并发来运行的任务（tasks），可以使用 <code>parallel()</code> 方法将它们组合起来。</p><p>上面的意思就是创建一个名为<code>compile</code>的任务，这个任务是先执行并发的<code>compile-with-es</code>和<code>compile-with-lib</code>，然后执行回调。(这个回调貌似不是必要的？)</p><p>然后我们再来看看<code>compile-with-es</code>和<code>compile-with-lib</code></p><h5 id="compile-with-es"><a href="#compile-with-es" class="headerlink" title="compile-with-es"></a>compile-with-es</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&#x27;compile-with-es&#x27;, done =&gt; &#123;</span><br><span class="line">  console.log(&#x27;[Parallel] Compile to es...&#x27;);</span><br><span class="line">  compile(false).on(&#x27;finish&#x27;, done);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="compile-with-lib"><a href="#compile-with-lib" class="headerlink" title="compile-with-lib"></a>compile-with-lib</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&#x27;compile-with-lib&#x27;, done =&gt; &#123;</span><br><span class="line">  console.log(&#x27;[Parallel] Compile to js...&#x27;);</span><br><span class="line">  compile().on(&#x27;finish&#x27;, done);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看起来都是对<code>compile</code>的执行，然后来看看<code>compile</code>方法，也就是核心代码。</p><h5 id="compile-1"><a href="#compile-1" class="headerlink" title="compile"></a>compile</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">function compile(modules) &#123;</span><br><span class="line">  rimraf.sync(modules !== false ? libDir : esDir);</span><br><span class="line">  const less = gulp</span><br><span class="line">    .src([&#x27;components/**/*.less&#x27;])</span><br><span class="line">    .pipe(</span><br><span class="line">      through2.obj(function (file, encoding, next) &#123;</span><br><span class="line">        this.push(file.clone());</span><br><span class="line">        if (</span><br><span class="line">          file.path.match(/\/style\/index\.less$/) ||</span><br><span class="line">          file.path.match(/\/style\/v2-compatible-reset\.less$/)</span><br><span class="line">        ) &#123;</span><br><span class="line">          transformLess(file.path)</span><br><span class="line">            .then(css =&gt; &#123;</span><br><span class="line">              file.contents = Buffer.from(css);</span><br><span class="line">              file.path = file.path.replace(/\.less$/, &#x27;.css&#x27;);</span><br><span class="line">              this.push(file);</span><br><span class="line">              next();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(e =&gt; &#123;</span><br><span class="line">              console.error(e);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          next();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class="line">  const assets = gulp</span><br><span class="line">    .src([&#x27;components/**/*.@(png|svg)&#x27;])</span><br><span class="line">    .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class="line">  let error = 0;</span><br><span class="line">  const source = [</span><br><span class="line">    &#x27;components/**/*.js&#x27;,</span><br><span class="line">    &#x27;components/**/*.jsx&#x27;,</span><br><span class="line">    &#x27;components/**/*.tsx&#x27;,</span><br><span class="line">    &#x27;components/**/*.ts&#x27;,</span><br><span class="line">    &#x27;typings/**/*.d.ts&#x27;,</span><br><span class="line">    &#x27;!components/*/__tests__/*&#x27;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  const tsResult = gulp.src(source).pipe(</span><br><span class="line">    ts(tsConfig, &#123;</span><br><span class="line">      error(e) &#123;</span><br><span class="line">        tsDefaultReporter.error(e);</span><br><span class="line">        error = 1;</span><br><span class="line">      &#125;,</span><br><span class="line">      finish: tsDefaultReporter.finish,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  function check() &#123;</span><br><span class="line">    if (error &amp;&amp; !argv[&#x27;ignore-error&#x27;]) &#123;</span><br><span class="line">      process.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tsResult.on(&#x27;finish&#x27;, check);</span><br><span class="line">  tsResult.on(&#x27;end&#x27;, check);</span><br><span class="line">  const tsFilesStream = babelify(tsResult.js, modules);</span><br><span class="line">  const tsd = tsResult.dts.pipe(gulp.dest(modules === false ? esDir : libDir));</span><br><span class="line">  return merge2([less, tsFilesStream, tsd, assets]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>下班了，明天再来写           2021/7/22 17:22</p><hr><p>继续            2021/7/23/ 10:09</p><hr><p><em>第一句就没看懂</em></p><p><em><code>rimraf.sync(modules !== false ? libDir : esDir);</code></em></p><p><em>rimraf是引入的插件<code>const rimraf = require(&#39;rimraf&#39;);</code></em></p><p><em>名字很奇怪</em></p><p>查了下是对rm -rf的包封装，那就不奇怪了</p><p>那这句话就是对旧包的删除了</p><p>不过编译的话第一步确实应该清理旧包，大意了，竟然没联想到</p><p>less变量是一个较长的链式调用，得拉出来单独看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const less = gulp</span><br><span class="line">   .src([&#x27;components/**/*.less&#x27;])    </span><br><span class="line">   .pipe(</span><br><span class="line">     through2.obj(function (file, encoding, next) &#123;</span><br><span class="line">       this.push(file.clone());</span><br><span class="line">       if (</span><br><span class="line">         file.path.match(/\/style\/index\.less$/) ||</span><br><span class="line">         file.path.match(/\/style\/v2-compatible-reset\.less$/)</span><br><span class="line">       ) &#123;</span><br><span class="line">         transformLess(file.path)</span><br><span class="line">           .then(css =&gt; &#123;</span><br><span class="line">             file.contents = Buffer.from(css);</span><br><span class="line">             file.path = file.path.replace(/\.less$/, &#x27;.css&#x27;);</span><br><span class="line">             this.push(file);</span><br><span class="line">             next();</span><br><span class="line">           &#125;)</span><br><span class="line">           .catch(e =&gt; &#123;</span><br><span class="line">             console.error(e);</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">         next();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;),</span><br><span class="line">   )</span><br><span class="line">   .pipe(gulp.dest(modules === false ? esDir : libDir));</span><br></pre></td></tr></table></figure><p><code>gulp.src()</code>创建流，文件系统中读取文件然后生成一个 Node 流（stream）。</p><p><code>.pipe() </code>方法，用于连接转换流（Transform streams）或可写流（Writable streams），我理解的是文件操作写在这里面。</p><p><code>through2</code> 听说使用gulp会常用到，但我还是第一次见，是对<code>transform stream</code>封装。</p><p>什么是transform stream呢，我也不知道，虽然我大学学习java出生，但看来我的java学的真的不行啊。</p><p>MDN是这么说的</p><blockquote><p>在<code>TransformStream</code>所述的接口 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">流API</a> 表示一组可变形的数据。</p></blockquote><p>看来我得专门去巩固一下node的流了,单独开个文，等会儿回来</p><hr><p>2021/7/23 10:55</p><hr><p>2021/7/23 13:50 大概的巩固了一下stream，回来继续研究antd-tools</p><hr><p>那么<code>through2.obj</code>里面就是对流的处理</p><p>一个<code>if</code>判断，对</p><p><code>file.path.match(/\/style\/index\.less$/)</code> </p><p><code>file.path.match(/\/style\/v2-compatible-reset\.less$/)</code></p><p>这两种匹配或逻辑成立的时候特殊判断</p><p>这两种less有什么特殊的地方吗？</p><p>那就要看看怎么特殊处理的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">transformLess(file.path)</span><br><span class="line">    .then(css =&gt; &#123;</span><br><span class="line">        file.contents = Buffer.from(css);</span><br><span class="line">        file.path = file.path.replace(/\.less$/, &#x27;.css&#x27;);</span><br><span class="line">        this.push(file);</span><br><span class="line">        next();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(e =&gt; &#123;</span><br><span class="line">    console.error(e);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>调用了<code>transformLess</code>方法</p><p><code>transformLess</code>在同目录下,看来不是只有这个地方用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function transformLess(lessFile, config = &#123;&#125;) &#123;</span><br><span class="line">  const &#123; cwd = process.cwd() &#125; = config;</span><br><span class="line">  const resolvedLessFile = path.resolve(cwd, lessFile);</span><br><span class="line"></span><br><span class="line">  let data = readFileSync(resolvedLessFile, &#x27;utf-8&#x27;);</span><br><span class="line">  data = data.replace(/^\uFEFF/, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">  // Do less compile</span><br><span class="line">  const lessOpts = &#123;</span><br><span class="line">    paths: [path.dirname(resolvedLessFile)],</span><br><span class="line">    filename: resolvedLessFile,</span><br><span class="line">    plugins: [new NpmImportPlugin(&#123; prefix: &#x27;~&#x27; &#125;)],</span><br><span class="line">    javascriptEnabled: true,</span><br><span class="line">  &#125;;</span><br><span class="line">  return less</span><br><span class="line">    .render(data, lessOpts)</span><br><span class="line">    .then(result =&gt; postcss([autoprefixer]).process(result.css, &#123; from: undefined &#125;))</span><br><span class="line">    .then(r =&gt; &#123;</span><br><span class="line">      return r.css;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>  const &#123; cwd = process.cwd() &#125; = config;</code><br><code>const resolvedLessFile = path.resolve(cwd, lessFile);</code></p><p>获取了less目录</p><p>读取文件流</p><p>然后<code>  data = data.replace(/^\uFEFF/, &#39;&#39;);</code>删除文件中的\uFEFF,这是个啥？</p><blockquote><p>文本保存时包含了BOM（Byte Order Mark，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码）,导致出现\uFEFF</p></blockquote><p>又出现一个BOM= - =</p><p>接下来有句注释 <code>//Do less compile</code></p><p>说明下面就是做less的编译了</p><p><code>lessOpts</code>赋值就不用看了，直接看返回值<code>less.render().then().then()</code></p><p>猜也能猜到是把less编译成css</p><p><strong>可是咋看来看去，还是用的less的API呢，我看这么久是为了啥？</strong></p><p>但中间用了个插件还是可以注意下<code>less-plugin-npm-import</code></p><p>这个插件可以从npm包里面导入less</p><p><em>但从两个匹配的less里面并没有看到从npm中引入的less文件</em></p><p><em>不知道为什么要用这个插件？</em></p><p><em>或者我没找到？</em></p><p><em>做完这些，就是调用<code>gulp.dest()</code>这个写入文件系统的方法了</em></p><p><em>到此链式调用理解完了</em></p><p><em><strong>我真是啰嗦啊</strong></em></p><p><strong>看来看去，就是对less.render的调用</strong></p><p><strong>这一长串就是less的编译打包</strong></p><p>回到<code>compile</code>本身</p><p>接着下面分别是对</p><p><code>components/**/*.@(png|svg)</code></p><p><code>components/**/*.js</code></p><p><code>components/**/*.jsx</code></p><p><code>components/**/*.tsx</code></p><p><code>components/**/*.ts</code></p><p><code>typings/**/*.d.ts</code></p><p><code>!components/*/__tests__/*</code></p><p>的编译整理</p><p>其中ts特殊处理了一下，引入了<code>const ts = require(&#39;gulp-typescript&#39;);</code></p><p>然后调用<code>ts(tsConfig,&#123;&#125;)</code></p><p>对错误情况进行了处理。</p><p>然后进行了babel处理</p><p><code> const tsFilesStream = babelify(tsResult.js, modules);</code></p><p>babel化之后在写入文件</p><p>babel化简单来说把 JavaScript 中 es2015/2016/2017/2046 的新语法转化为 es5，让低端运行环境(如浏览器和 node )能够认识并执行。</p><p><strong>非常牛逼的工具，解决了前端工作者一大痛点。</strong></p><p>最后一句话</p><p><code> return merge2([less, tsFilesStream, tsd, assets]);</code></p><p>把所有流按队列整合为一个流</p><hr><p>妈的，也不复杂的东西我怎么写了这么多，以后写文得精简了</p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
            <tag> Ant-tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd-tools中的gulp</title>
      <link href="/gulp/"/>
      <url>/gulp/</url>
      
        <content type="html"><![CDATA[<p>首先三连</p><p><code>npm install --global gulp-cli</code></p><p><code>npm install --save-dev gulp</code></p><p><code>gulp --version</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;gulp --version</span><br><span class="line">CLI version: 2.3.0</span><br><span class="line">Local version: 4.0.2</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>创建gulpfile.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function defaultTask(cb) &#123;</span><br><span class="line">  // place code for your default task here</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = defaultTask</span><br></pre></td></tr></table></figure><p>在该目录下</p><p><code>&gt;gulp</code></p><p>如需运行多个任务（task），可以执行 <code>gulp &lt;task&gt; &lt;othertask&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;gulp</span><br><span class="line">[14:31:47] Using gulpfile D:\sgd_cd_pro\test\node\gulpfile.js</span><br><span class="line">[14:31:47] Starting &#x27;default&#x27;...</span><br><span class="line">[14:31:47] Finished &#x27;default&#x27; after 1.69 ms</span><br></pre></td></tr></table></figure><p><strong>gulp和webpack的区别</strong></p><p>gulp注重前端开发流程，将我们重复繁琐的工作自动化执行和打包。</p><p>webpack注重模块化开发，把所有的文件模块化。</p><p>懂这个区别，也就大概能看懂AntDesignVue源码中使用gulp的意义了</p><p><strong>runTask</strong></p><p>Ant Design Vue里面有这样一个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function runTask(toRun) &#123;</span><br><span class="line">  const metadata = &#123; task: toRun &#125;;</span><br><span class="line">  // Gulp &gt;= 4.0.0 (doesn&#x27;t support events)</span><br><span class="line">  const taskInstance = gulp.task(toRun);</span><br><span class="line">  if (taskInstance === undefined) &#123;</span><br><span class="line">    gulp.emit(&#x27;task_not_found&#x27;, metadata);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  const start = process.hrtime();</span><br><span class="line">  gulp.emit(&#x27;task_start&#x27;, metadata);</span><br><span class="line">  try &#123;</span><br><span class="line">    taskInstance.apply(gulp);</span><br><span class="line">    metadata.hrDuration = process.hrtime(start);</span><br><span class="line">    gulp.emit(&#x27;task_stop&#x27;, metadata);</span><br><span class="line">    gulp.emit(&#x27;stop&#x27;);</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    err.hrDuration = process.hrtime(start);</span><br><span class="line">    err.task = metadata.task;</span><br><span class="line">    gulp.emit(&#x27;task_err&#x27;, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数名语义是执行任务，这个方法就是将命令行参数转换为gulp中的task即任务执行</p><p>所以后面我们来一个一个理解antd-tools这里面的工具有什么作用</p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发cli必备的commander工具</title>
      <link href="/commander/"/>
      <url>/commander/</url>
      
        <content type="html"><![CDATA[<p>开发cli必备</p><p>文档，竟然有中文，对我这种四级都没过得辣鸡太友好了</p><p><a href="https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md">Commander.js</a></p><p>首先</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander</span><br></pre></td></tr></table></figure><h2 id="Declaring"><a href="#Declaring" class="headerlink" title="Declaring"></a>Declaring</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; program &#125; = require(&#x27;commander&#x27;);</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">program.version(&#x27;0.0.1&#x27;).parse(process.argv);</span><br><span class="line">//console </span><br><span class="line">//node commander.js -V</span><br><span class="line">0.0.1</span><br><span class="line">program.version(&#x27;0.0.1&#x27;,&#x27;-v,--version&#x27;).parse(process.argv);</span><br><span class="line">//console </span><br><span class="line">//node commander.js -v or --version</span><br><span class="line">0.0.1</span><br></pre></td></tr></table></figure><h3 id="option"><a href="#option" class="headerlink" title="option"></a>option</h3><p>Commander 使用<code>.option()</code> 方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（–后面接一个或多个单词），使用逗号、空格或<code>|</code>分隔。</p><p>选项可以通过在<code>Command</code>对象上调用<code>.opts()</code>方法来获取。对于多个单词的长选项，使用驼峰法获取，例如<code>--template-engine</code>选项通过<code>program.opts().templateEngine</code>获取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class="line">  .option(&#x27;-d, --debug&#x27;, &#x27;debug&#x27;)</span><br><span class="line">  .option(&#x27;-s, --small&#x27;, &#x27;small&#x27;)</span><br><span class="line">  .option(&#x27;-p, --type &lt;type&gt;&#x27;, &#x27;type&#x27;)</span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line">const options = program.opts()</span><br><span class="line">if (options.debug) console.log(options)</span><br><span class="line">console.log(&#x27;details:&#x27;)</span><br><span class="line">if (options.small) console.log(&#x27;- small&#x27;)</span><br><span class="line">if (options.type) console.log(`- $&#123;options.type&#125;`)</span><br><span class="line"></span><br><span class="line">//node commander.js -h</span><br><span class="line">Usage: commander [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version      output the version number</span><br><span class="line">  -d, --debug        debug</span><br><span class="line">  -s, --small        small</span><br><span class="line">  -p, --type &lt;type&gt;  type</span><br><span class="line">  -h, --help         display help for command</span><br><span class="line"></span><br><span class="line">//node commander -d</span><br><span class="line">&#123;debug:true&#125;</span><br><span class="line">details:</span><br><span class="line"></span><br><span class="line">//node comander -d -s </span><br><span class="line">&#123;debug:true,small:true&#125;</span><br><span class="line">details:</span><br><span class="line">- smaill </span><br><span class="line"></span><br><span class="line">//node comander -d -s -t chinese</span><br><span class="line">&#123;debug:true,small:true,type:chinese&#125;</span><br><span class="line">details:</span><br><span class="line">- smaill </span><br><span class="line">- chinese</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选项可以设置默认值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//选项可以设置一个默认值。</span><br><span class="line">program</span><br><span class="line">  .option(&#x27;-c, --cheese &lt;type&gt;&#x27;, &#x27;add the specified type of cheese&#x27;, &#x27;blue&#x27;);</span><br><span class="line">program.parse();</span><br><span class="line"></span><br><span class="line">console.log(`cheese: $&#123;program.opts().cheese&#125;`);</span><br></pre></td></tr></table></figure><h4 id="其他的选项类型"><a href="#其他的选项类型" class="headerlink" title="其他的选项类型"></a>其他的选项类型</h4><p><strong>取反选项</strong><br>可以定义一个以<code>no-</code>开头的<code>boolean</code>型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带<code>no-</code>的选项，未定义对应不带<code>no-</code>的选项时，该选项的默认值会被置为true。</p><p>如果已经定义了<code>--foo</code>，那么再定义<code>--no-foo</code>并不会改变它本来的默认值。可以为一个<code>boolean</code>类型的选项指定一个默认的布尔值，在命令行里可以重写它的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  .version(&#x27;0.0.1&#x27;, &#x27;-v, --version&#x27;)</span><br><span class="line">  .option(&#x27;-o, --option&#x27;,&#x27;show options&#x27;)</span><br><span class="line">  .option(&#x27;--no-gf&#x27;, &#x27;no object&#x27;)</span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line">const options = program.opts()</span><br><span class="line">if (options.option) console.log(options)</span><br><span class="line">//node commander -o</span><br><span class="line">&#123; gf: true, option: true &#125;</span><br><span class="line">//node commander -o --no-gf</span><br><span class="line">&#123; gf: false, option: true &#125;</span><br></pre></td></tr></table></figure><p><strong>选项的参数使用方括号声明表示参数是可选参数（如 <code>--optional [value]</code>）。</strong></p><p>该选项在不带参数时可用作boolean选项，在带有参数时则从参数中得到值。</p><p><strong>选项的参数使用尖括号声明表示参数是必填参数（如 <code>--optional &lt;value&gt;</code>）。</strong></p><p>必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与<code>.option</code>一致。</p><p><strong>选项的参数使用…前缀表示参数是变长参数（如<code>--optional &lt;...value&gt;</code>)。</strong></p><p>在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或–开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过<code>--</code>标记当前命令的结束。</p><p><strong>其他选项配置</strong></p><p>大多数情况下，选项均可通过<code>.option()</code>方法添加。但对某些不常见的用例，也可以直接构造<code>Option</code>对象，对选项进行更详尽的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const &#123; program, Option &#125; = require(&#x27;commander&#x27;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .addOption(new Option(&#x27;-s, --secret&#x27;).hideHelp())</span><br><span class="line">  .addOption(</span><br><span class="line">    new Option(&#x27;-t, --timeout &lt;delay&gt;&#x27;, &#x27;timeout in seconds&#x27;).default(</span><br><span class="line">      60,</span><br><span class="line">      &#x27;one minute&#x27;</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  .addOption(</span><br><span class="line">    new Option(&#x27;-d, --drink &lt;size&gt;&#x27;, &#x27;drink size&#x27;).choices([</span><br><span class="line">      &#x27;small&#x27;,</span><br><span class="line">      &#x27;medium&#x27;,</span><br><span class="line">      &#x27;large&#x27;,</span><br><span class="line">    ])</span><br><span class="line">  )</span><br><span class="line">program.parse()</span><br><span class="line">console.log(&#x27;Options: &#x27;, program.opts());</span><br><span class="line"></span><br><span class="line">//node commander --help</span><br><span class="line">Usage: commander [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --timeout &lt;delay&gt;  timeout in seconds (default: one minute)</span><br><span class="line">  -d, --drink &lt;size&gt;     drink size (choices: &quot;small&quot;, &quot;medium&quot;, &quot;large&quot;)</span><br><span class="line">  -h, --help             display help for command</span><br><span class="line">  </span><br><span class="line">//node commander -s</span><br><span class="line">Options:  &#123; timeout: 60, secret: true &#125;</span><br><span class="line"></span><br><span class="line">//node commander -d big</span><br><span class="line">error: option &#x27;-d, --drink &lt;size&gt;&#x27; argument &#x27;big&#x27; is invalid. Allowed choices are small, medium, large.</span><br></pre></td></tr></table></figure><p><strong>自定义选项处理</strong></p><p>选项的参数可以通过自定义函数来处理，该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。</p><p>自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。</p><p><strong>有点多，时间原因不每一个都看完了</strong></p><p><strong>把常用的看了理解了</strong></p><p><strong>总不能一次性把所有知识全学完吧</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xmrig挖矿病毒</title>
      <link href="/xmrig/"/>
      <url>/xmrig/</url>
      
        <content type="html"><![CDATA[<p>昨天博客搭完突然连不上服务器了，开始以为是网的问题，后来查看阿里控制台，发现内存占用达到100%</p><p><img src="/images/0722_1.jpg" alt="阿里云控制台图片"></p><p>心想可能中病毒了，好不容易连接上服务器，输入</p><p><code>[root@archyInk]# top</code> </p><p><img src="/images/0722_2.jpg" alt="大战过后，只有到网上找图了"><br>发现一个叫xmrig的进程占用了100%，查了一下是挖矿病毒。</p><p>气死了，矿佬连我2g小水管都不放过。</p><p>kill进程发现没啥用，会自动重启</p><p>查了下网上同样的情况，一般都是在docker容器中运行的，但是我没有用过docker，所以推测是直接植入的程序，于是输入<code>ll /proc/14454/exe</code>中间是pid找到进程的程序，是一个叫skypool的文件夹，搜了一个是一个叫天池的矿池。</p><p>于是我直接把这个文件夹<code>rm -rf</code>了，然后直接重启服务器</p><p>果然病毒没有重启了</p><p>花了我不少时间，气死我了，不让我买电脑就算了，还搞这档事，矿佬都给我去SPA。</p><p>最后把skypool的自启动删除了，具体的我也是查的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 记事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>colorful工具</title>
      <link href="/colorful/"/>
      <url>/colorful/</url>
      
        <content type="html"><![CDATA[<h3 id="colorful"><a href="#colorful" class="headerlink" title="colorful"></a>colorful</h3><p>antd-tools/cli/index.js里面有<code>require(&#39;colorful&#39;).colorful()</code></p><p>npm里有介绍，是在终端里显示颜色的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;colorful&#x27;</span>).colorful()</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;colorful&#x27;</span>).isatty = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>.to.red.color);</span><br></pre></td></tr></table></figure><p>终端显示就是红色的hello，具体用法暂时不去了解，但是很cool</p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/start/"/>
      <url>/start/</url>
      
        <content type="html"><![CDATA[<p>最近开始想把自己工作常用的组件封装成一个组件库<br>于是准备学习一下AntDesignVue的源码<br>顺便巩固一下vue3的知识<br>所以临时开了个Hexo博客<br>记录一下自己学习的笔记</p><p>顺便当个qq空间</p><p><em>#オリジナル Living with a hobby - くっか的插画</em></p><p><img src="/images/0721.jpg" alt="#オリジナル Living with a hobby - くっか的插画"></p><p><a href="https://github.com/vueComponent/ant-design-vue">AntDesignVue</a><br><a href="https://github.com/ArchyInk/Archy-UI">ArchyUI</a><br><a href="https://github.com/ArchyInk/">follow</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> AntDesignVue源码学习 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
